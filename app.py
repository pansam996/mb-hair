import configparser
import datetime
import pickle
import os.path
import os,tempfile
import psycopg2
from flask import Flask, request, abort
from linebot import LineBotApi, WebhookHandler
from linebot.exceptions import InvalidSignatureError
from linebot.models import *
from imgurpython import ImgurClient

app = Flask(__name__)
config = configparser.ConfigParser()
config.read("config.ini")

## imgur key
client_id = config['imgur']['Client_ID']
client_secret = config['imgur']['Client_Secret']
service_album_id = 'mTWZmzL' #Ââ™È´ÆÈ†ÖÁõÆÁõ∏Á∞ø
works_album_id = 'K6ZS6Fj' #‰ΩúÂìÅÈõÜÁõ∏Á∞ø
access_token = config['imgur']['Access_Token']
refresh_token = config['imgur']['Refresh_Token']


## line bot setting
line_bot_api = LineBotApi(config['line_bot']['Channel_Access_Token'])
handler = WebhookHandler(config['line_bot']['Channel_Secret'])

# time format setting
ISOTIMEFORMAT = '%m-%d %H:%M'
slot_table = ['0900','0930','1000','1030','1100','1130','1200','1230',
'1300','1330','1400','1430','1500','1530','1600','1630','1700','1730',
'1800','1830','1900','1930','2000','2030','2100','2130','2200']
time_table = ['09:00','09:30','10:00','10:30','11:00','11:30','12:00','12:30',
'13:00','13:30','14:00','14:30','15:00','15:30','16:00','16:30','17:00','17:30',
'18:00','18:30','19:00','19:30','20:00','20:30','21:00','21:30','22:00']
week_day_dict = {
        0 : '‰∏Ä',
        1 : '‰∫å',
        2 : '‰∏â',
        3 : 'Âõõ',
        4 : '‰∫î',
        5 : 'ÂÖ≠',
        6 : 'Êó•',
    }
business_day = []
date_list = []

def update_bussiness_day():
    # DB set
    DATABASE_URL = os.environ['DATABASE_URL']
    conn = psycopg2.connect(DATABASE_URL, sslmode='require')
    cursor = conn.cursor()

    sql = "select off_date from manager where userid = 'Ue9484510f6a0ba4d68b30d0c759949c9'"
    cursor.execute(sql)
    conn.commit()

    off_date = cursor.fetchone()[0]
    off_date_list = off_date.split()

    business_day.clear()
    date_list.clear()

    _ = 0
    while(len(business_day) < 7):
        date = (datetime.datetime.now()+datetime.timedelta(days=_)).strftime("%m-%d")
        weekday = (datetime.datetime.now()+datetime.timedelta(days=_)).weekday()

        if date in off_date_list:
            _ += 1
            continue
        if weekday == 6 :
            _ += 1
            continue
        else:
            _ += 1
        date_list.append(date)
        business_day.append(date+" ("+ week_day_dict[weekday] +")")


@app.route("/callback", methods=['POST'])
def callback():
    # get X-Line-Signature header value
    signature = request.headers['X-Line-Signature']

    # get request body as text
    body = request.get_data(as_text=True)
    app.logger.info("Request body: " + body)

    # handle webhook body
    try:
        handler.handle(body, signature)
    except InvalidSignatureError:
        print("Invalid signature. Please check your channel access token/channel secret.")
        abort(400)

    return 'OK'

@handler.add(PostbackEvent)
def reply_postback(event):
    update_bussiness_day()
    userID = event.source.user_id
    userName = line_bot_api.get_profile(event.source.user_id).display_name

    if event.postback.data == "ÊúÄÊñ∞Ê∂àÊÅØ":
        #DB set
        DATABASE_URL = os.environ['DATABASE_URL']
        conn = psycopg2.connect(DATABASE_URL, sslmode='require')
        cursor = conn.cursor()

        sql = "select * from news_table order by id DESC"
        cursor.execute(sql)
        conn.commit()
        result = cursor.fetchall()

        if not result:
            news_status = "ÁõÆÂâçÊ≤íÊúâÊúÄÊñ∞Ê∂àÊÅØÂî∑üòñ"

            line_bot_api.reply_message(event.reply_token, TextSendMessage(news_status))
            return 0

        else:
            content = {
            "type": "carousel",
            "contents": [
                ]
            }
            max_num = len(result)
            if max_num > 10:
                max_num = 10

            for i in range(max_num):
                style1 = {
                    "type": "bubble",
                    "size": "mega",
                    "body": {
                        "type": "box",
                        "layout": "vertical",
                        "contents": [
                        {
                            "type": "box",
                            "layout": "vertical",
                            "contents": [
                            {
                                "type": "image",
                                "url": "https://scdn.line-apps.com/n/channel_devcenter/img/flexsnapshot/clip/clip13.jpg",
                                "aspectMode": "cover",
                                "size": "full",
                                "aspectRatio": "50:100"
                            }
                            ],
                            "cornerRadius": "10px"
                        },
                        {
                            "type": "text",
                            "text": "ÊúÄÊñ∞Ê∂àÊÅØ",
                            "size": "lg",
                            "weight": "bold",
                            "offsetTop": "5px"
                        }
                        ],
                        "paddingAll": "10px"
                    }
                }

                style2 = {
                    "type": "bubble",
                    "size": "mega",
                    "body": {
                        "type": "box",
                        "layout": "vertical",
                        "contents": [
                        {
                            "type": "box",
                            "layout": "vertical",
                            "contents": [
                            {
                                "type": "image",
                                "url": "https://scdn.line-apps.com/n/channel_devcenter/img/flexsnapshot/clip/clip13.jpg",
                                "aspectMode": "cover",
                                "size": "full",
                                "aspectRatio": "100:100"
                            },
                            {
                                "type": "image",
                                "url": "https://scdn.line-apps.com/n/channel_devcenter/img/flexsnapshot/clip/clip13.jpg",
                                "aspectMode": "cover",
                                "size": "full",
                                "aspectRatio": "100:100"
                            }
                            ],
                            "cornerRadius": "10px"
                        },
                        {
                            "type": "text",
                            "text": "ÊúÄÊñ∞Ê∂àÊÅØ",
                            "size": "lg",
                            "weight": "bold",
                            "offsetTop": "5px"
                        }
                        ],
                        "paddingAll": "10px"
                    }
                }

                if result[i][3] != "":
                    style2['body']['contents'][0]['contents'][0]['url'] = result[i][2]
                    style2['body']['contents'][0]['contents'][1]['url'] = result[i][3]
                    # Â≠óÊï∏ÈÅéÂ§öÊôÇ
                    # 92~104
                    if len(result[i][1]) > 91:
                        for j in range(2,9):
                            text_block = {
                                "type": "text",
                                "text": "ÊúÄÊñ∞Ê∂àÊÅØ",
                                "size": "lg",
                                "weight": "bold",
                                "offsetTop": "3px"
                            }
                            style2['body']['contents'].insert(j,text_block)
                        style2['body']['contents'][1]['text'] = result[i][1][:13]
                        style2['body']['contents'][2]['text'] = result[i][1][13:26]
                        style2['body']['contents'][3]['text'] = result[i][1][26:39]
                        style2['body']['contents'][4]['text'] = result[i][1][39:52]
                        style2['body']['contents'][5]['text'] = result[i][1][52:65]
                        style2['body']['contents'][6]['text'] = result[i][1][65:78]
                        style2['body']['contents'][7]['text'] = result[i][1][78:91]
                        style2['body']['contents'][8]['text'] = result[i][1][91:]

                    # 78~91
                    elif len(result[i][1]) > 78:
                        for j in range(2,8):
                            text_block = {
                                "type": "text",
                                "text": "ÊúÄÊñ∞Ê∂àÊÅØ",
                                "size": "lg",
                                "weight": "bold",
                                "offsetTop": "3px"
                            }
                            style2['body']['contents'].insert(j,text_block)
                        style2['body']['contents'][1]['text'] = result[i][1][:13]
                        style2['body']['contents'][2]['text'] = result[i][1][13:26]
                        style2['body']['contents'][3]['text'] = result[i][1][26:39]
                        style2['body']['contents'][4]['text'] = result[i][1][39:52]
                        style2['body']['contents'][5]['text'] = result[i][1][52:65]
                        style2['body']['contents'][6]['text'] = result[i][1][65:78]
                        style2['body']['contents'][7]['text'] = result[i][1][78:]
                    elif len(result[i][1]) > 65:
                        for j in range(2,7):
                            text_block = {
                                "type": "text",
                                "text": "ÊúÄÊñ∞Ê∂àÊÅØ",
                                "size": "lg",
                                "weight": "bold",
                                "offsetTop": "3px"
                            }
                            style2['body']['contents'].insert(j,text_block)
                        print(i)
                        style2['body']['contents'][1]['text'] = result[i][1][:13]
                        style2['body']['contents'][2]['text'] = result[i][1][13:26]
                        style2['body']['contents'][3]['text'] = result[i][1][26:39]
                        style2['body']['contents'][4]['text'] = result[i][1][39:52]
                        style2['body']['contents'][5]['text'] = result[i][1][52:65]
                        style2['body']['contents'][6]['text'] = result[i][1][65:]
                    elif len(result[i][1]) > 52:
                        for j in range(2,6):
                            text_block = {
                                "type": "text",
                                "text": "ÊúÄÊñ∞Ê∂àÊÅØ",
                                "size": "lg",
                                "weight": "bold",
                                "offsetTop": "3px"
                            }
                            style2['body']['contents'].insert(j,text_block)
                        style2['body']['contents'][1]['text'] = result[i][1][:13]
                        style2['body']['contents'][2]['text'] = result[i][1][13:26]
                        style2['body']['contents'][3]['text'] = result[i][1][26:39]
                        style2['body']['contents'][4]['text'] = result[i][1][39:52]
                        style2['body']['contents'][5]['text'] = result[i][1][52:]
                    elif len(result[i][1]) > 39:
                        for j in range(2,5):
                            text_block = {
                                "type": "text",
                                "text": "ÊúÄÊñ∞Ê∂àÊÅØ",
                                "size": "lg",
                                "weight": "bold",
                                "offsetTop": "3px"
                            }
                            style2['body']['contents'].insert(j,text_block)
                        style2['body']['contents'][1]['text'] = result[i][1][:13]
                        style2['body']['contents'][2]['text'] = result[i][1][13:26]
                        style2['body']['contents'][3]['text'] = result[i][1][26:39]
                        style2['body']['contents'][4]['text'] = result[i][1][39:]
                    elif len(result[i][1]) > 26:
                        for j in range(2,4):
                            text_block = {
                                "type": "text",
                                "text": "ÊúÄÊñ∞Ê∂àÊÅØ",
                                "size": "lg",
                                "weight": "bold",
                                "offsetTop": "3px"
                            }
                            style2['body']['contents'].insert(j,text_block)
                        style2['body']['contents'][1]['text'] = result[i][1][:13]
                        style2['body']['contents'][2]['text'] = result[i][1][13:26]
                        style2['body']['contents'][3]['text'] = result[i][1][26:]
                    elif len(result[i][1]) > 13:
                        for j in range(2,3):
                            text_block = {
                                "type": "text",
                                "text": "ÊúÄÊñ∞Ê∂àÊÅØ",
                                "size": "lg",
                                "weight": "bold",
                                "offsetTop": "3px"
                            }
                            style2['body']['contents'].insert(j,text_block)
                        style2['body']['contents'][1]['text'] = result[i][1][:13]
                        style2['body']['contents'][2]['text'] = result[i][1][13:]
                    else:
                        style2['body']['contents'][1]['text'] = result[i][1]

                    content['contents'].append(style2)

                else:
                    style1['body']['contents'][0]['contents'][0]['url'] = result[i][2]
                    # Â≠óÊï∏ÈÅéÂ§öÊôÇ
                    # 92~104
                    if len(result[i][1]) > 91:
                        for j in range(2,9):
                            text_block = {
                                "type": "text",
                                "text": "ÊúÄÊñ∞Ê∂àÊÅØ",
                                "size": "lg",
                                "weight": "bold",
                                "offsetTop": "3px"
                            }
                            style1['body']['contents'].insert(j,text_block)
                        style1['body']['contents'][1]['text'] = result[i][1][:13]
                        style1['body']['contents'][2]['text'] = result[i][1][13:26]
                        style1['body']['contents'][3]['text'] = result[i][1][26:39]
                        style1['body']['contents'][4]['text'] = result[i][1][39:52]
                        style1['body']['contents'][5]['text'] = result[i][1][52:65]
                        style1['body']['contents'][6]['text'] = result[i][1][65:78]
                        style1['body']['contents'][7]['text'] = result[i][1][78:91]
                        style1['body']['contents'][8]['text'] = result[i][1][91:]

                    # 78~91
                    elif len(result[i][1]) > 78:
                        for j in range(2,8):
                            text_block = {
                                "type": "text",
                                "text": "ÊúÄÊñ∞Ê∂àÊÅØ",
                                "size": "lg",
                                "weight": "bold",
                                "offsetTop": "3px"
                            }
                            style1['body']['contents'].insert(j,text_block)
                        style1['body']['contents'][1]['text'] = result[i][1][:13]
                        style1['body']['contents'][2]['text'] = result[i][1][13:26]
                        style1['body']['contents'][3]['text'] = result[i][1][26:39]
                        style1['body']['contents'][4]['text'] = result[i][1][39:52]
                        style1['body']['contents'][5]['text'] = result[i][1][52:65]
                        style1['body']['contents'][6]['text'] = result[i][1][65:78]
                        style1['body']['contents'][7]['text'] = result[i][1][78:]
                    elif len(result[i][1]) > 65:
                        for j in range(2,7):
                            text_block = {
                                "type": "text",
                                "text": "ÊúÄÊñ∞Ê∂àÊÅØ",
                                "size": "lg",
                                "weight": "bold",
                                "offsetTop": "3px"
                            }
                            style1['body']['contents'].insert(j,text_block)
                        print(i)
                        style1['body']['contents'][1]['text'] = result[i][1][:13]
                        style1['body']['contents'][2]['text'] = result[i][1][13:26]
                        style1['body']['contents'][3]['text'] = result[i][1][26:39]
                        style1['body']['contents'][4]['text'] = result[i][1][39:52]
                        style1['body']['contents'][5]['text'] = result[i][1][52:65]
                        style1['body']['contents'][6]['text'] = result[i][1][65:]
                    elif len(result[i][1]) > 52:
                        for j in range(2,6):
                            text_block = {
                                "type": "text",
                                "text": "ÊúÄÊñ∞Ê∂àÊÅØ",
                                "size": "lg",
                                "weight": "bold",
                                "offsetTop": "3px"
                            }
                            style1['body']['contents'].insert(j,text_block)
                        style1['body']['contents'][1]['text'] = result[i][1][:13]
                        style1['body']['contents'][2]['text'] = result[i][1][13:26]
                        style1['body']['contents'][3]['text'] = result[i][1][26:39]
                        style1['body']['contents'][4]['text'] = result[i][1][39:52]
                        style1['body']['contents'][5]['text'] = result[i][1][52:]
                    elif len(result[i][1]) > 39:
                        for j in range(2,5):
                            text_block = {
                                "type": "text",
                                "text": "ÊúÄÊñ∞Ê∂àÊÅØ",
                                "size": "lg",
                                "weight": "bold",
                                "offsetTop": "3px"
                            }
                            style1['body']['contents'].insert(j,text_block)
                        style1['body']['contents'][1]['text'] = result[i][1][:13]
                        style1['body']['contents'][2]['text'] = result[i][1][13:26]
                        style1['body']['contents'][3]['text'] = result[i][1][26:39]
                        style1['body']['contents'][4]['text'] = result[i][1][39:]
                    elif len(result[i][1]) > 26:
                        for j in range(2,4):
                            text_block = {
                                "type": "text",
                                "text": "ÊúÄÊñ∞Ê∂àÊÅØ",
                                "size": "lg",
                                "weight": "bold",
                                "offsetTop": "3px"
                            }
                            style1['body']['contents'].insert(j,text_block)
                        style1['body']['contents'][1]['text'] = result[i][1][:13]
                        style1['body']['contents'][2]['text'] = result[i][1][13:26]
                        style1['body']['contents'][3]['text'] = result[i][1][26:]
                    elif len(result[i][1]) > 13:
                        for j in range(2,3):
                            text_block = {
                                "type": "text",
                                "text": "ÊúÄÊñ∞Ê∂àÊÅØ",
                                "size": "lg",
                                "weight": "bold",
                                "offsetTop": "3px"
                            }
                            style1['body']['contents'].insert(j,text_block)
                        style1['body']['contents'][1]['text'] = result[i][1][:13]
                        style1['body']['contents'][2]['text'] = result[i][1][13:]
                    else:
                        style1['body']['contents'][1]['text'] = result[i][1]

                    content['contents'].append(style1)

            line_bot_api.reply_message(event.reply_token, FlexSendMessage(alt_text="ÁõÆÂâçÊúÄÊñ∞Ê∂àÊÅØ",contents=content))


            return 0

    if event.postback.data == "ËÅØÁµ°ÊàëÂÄë":
        contact_us_flex = {
            "type": "bubble",
            "size": "giga",
            "body": {
                "type": "box",
                "layout": "vertical",
                "contents": [
                {
                    "type": "box",
                    "layout": "horizontal",
                    "contents": [
                    {
                        "type": "image",
                        "url": "https://imgur.com/1KGFakd.jpg",
                        "size": "5xl",
                        "aspectMode": "cover",
                        "aspectRatio": "150:196",
                        "gravity": "center",
                        "flex": 1
                    },
                    {
                        "type": "box",
                        "layout": "vertical",
                        "contents": [
                        {
                            "type": "image",
                            "url": "https://i.imgur.com/pOVQ6Ro.jpg",
                            "size": "full",
                            "aspectMode": "cover",
                            "aspectRatio": "150:98",
                            "gravity": "center"
                        },
                        {
                            "type": "image",
                            "url": "https://i.imgur.com/5BiqNjh.jpg",
                            "size": "full",
                            "aspectMode": "cover",
                            "aspectRatio": "150:98",
                            "gravity": "center"
                        }
                        ],
                        "flex": 1
                    }
                    ]
                },
                {
                    "type": "box",
                    "layout": "horizontal",
                    "contents": [
                    {
                        "type": "box",
                        "layout": "vertical",
                        "contents": [
                        {
                            "type": "image",
                            "url": "https://scdn.line-apps.com/n/channel_devcenter/img/flexsnapshot/clip/clip13.jpg",
                            "aspectMode": "cover",
                            "size": "full"
                        }
                        ],
                        "cornerRadius": "100px",
                        "width": "72px",
                        "height": "72px"
                    },
                    {
                        "type": "box",
                        "layout": "vertical",
                        "contents": [
                        {
                            "type": "text",
                            "contents": [
                            {
                                "type": "span",
                                "text": "MB È´ÆËóù",
                                "weight": "bold",
                                "color": "#000000",
                                "size": "lg"
                            }
                            ],
                            "size": "sm"
                        },
                        {
                            "type": "separator",
                            "margin": "md"
                        },
                        {
                            "type": "text",
                            "contents": [
                            {
                                "type": "span",
                                "text": "Ë®≠Ë®àÂ∏´üíáüèª‚Äç‚ôÄÔ∏è ÊùéË≤û",
                                "weight": "bold",
                                "color": "#000000"
                            }
                            ],
                            "size": "sm",
                            "margin": "md"
                        },
                        {
                            "type": "separator",
                            "margin": "md"
                        },
                        {
                            "type": "text",
                            "contents": [
                            {
                                "type": "span",
                                "text": "Âú∞ÂùÄüè° Â±èÊù±Â∏Ç‰∏≠ËèØË∑Ø431Ëôü",
                                "weight": "bold",
                                "color": "#000000"
                            }
                            ],
                            "size": "sm",
                            "margin": "md"
                        },
                        {
                            "type": "separator",
                            "margin": "md"
                        },
                        {
                            "type": "text",
                            "contents": [
                            {
                                "type": "span",
                                "text": "ËÅØÁµ°ÈõªË©± üìû (08)-7366715",
                                "weight": "bold",
                                "color": "#000000"
                            }
                            ],
                            "size": "sm",
                            "margin": "md"
                        }
                        ]
                    }
                    ],
                    "spacing": "xl",
                    "paddingAll": "20px"
                },
                {
                    "type": "box",
                    "layout": "horizontal",
                    "contents": [
                    {
                        "type": "button",
                        "action": {
                        "type": "uri",
                        "label": "È´ÆÂ¶ùË©¢Âïè",
                        "uri": "https://line.me/ti/p/MY9sqcvY6h"
                        },
                        "gravity": "center",
                        "height": "md",
                        "flex": 1
                    },
                    {
                        "type": "button",
                        "action": {
                        "type": "uri",
                        "label": "Êí•ÊâìÈõªË©±",
                        "uri": "tel://087366715"
                        },
                        "height": "md",
                        "flex": 1,
                        "gravity": "center"
                    },
                    {
                        "type": "button",
                        "action": {
                        "type": "uri",
                        "label": "ÈñãÂïüÂ∞éËà™",
                        "uri": "https://goo.gl/maps/UusBtgnWjZAMzYhW6"
                        },
                        "height": "md",
                        "flex": 1,
                        "gravity": "center"
                    }
                    ],
                    "paddingAll": "20px"
                },
                {
                    "type": "spacer"
                }
                ],
                "paddingAll": "0px"
            }
            }
        line_bot_api.reply_message(event.reply_token, FlexSendMessage(
                alt_text = 'ËÅØÁµ°Ë≥áË®ä',
                contents = contact_us_flex ))

        return 0

    if event.postback.data == "È†êÁ¥ÑÈÅ∏È†Ö":
        #DB setting
        DATABASE_URL = os.environ['DATABASE_URL']
        conn = psycopg2.connect(DATABASE_URL, sslmode='require')
        cursor = conn.cursor()


        # update DB to newest 7 dates
        theTime = datetime.datetime.now().strftime(ISOTIMEFORMAT)
        today = str(theTime).split()[0]
        nowtime = str(theTime).split()[1]
        sql = "delete from reservation where reser_date < '" + today +"';"
        cursor.execute(sql)
        conn.commit()

        #DB update new customer into customer table
        query = f"""select * from customer where userid = (%s);"""
        cursor.execute(query,(userID,))
        conn.commit()
        if cursor.fetchone() == None:
            record = (userID,'',userName,'','','',0,'')
            table_columns = '(userid, service ,name,has_reser1,has_reser2,has_reser3,reser_num,reser_full_data)'
            postgres_insert_query = f"""INSERT INTO customer {table_columns} VALUES (%s, %s, %s, %s, %s, %s, %s, %s);"""
            cursor.execute(postgres_insert_query, record)
            conn.commit()
        else:
            sql = "select reser_num from customer where userid = '" +userID + "';"
            cursor.execute(sql)
            conn.commit()

            reser_num = cursor.fetchone()[0]
            if reser_num == 3:
                line_bot_api.reply_message(event.reply_token, TextSendMessage("ÊúÄÂ§ö‰∏ÄÊ¨°Âè™ËÉΩÈ†êÁ¥Ñ‰∏âÂÄãÊôÇÊÆµÂñîÔºÅüò•\nÂ¶ÇÊûúË¶ÅË™øÊï¥ÊôÇÊÆµË´ãÂà∞\"È†êÁ¥ÑÊü•Ë©¢ÂÅöË™øÊï¥\""))
                return 0
        cursor.close()
        conn.close()


        line_bot_api.reply_message(event.reply_token, TextSendMessage(
            "Ë´ãÈÅ∏ÊìáÁæéÈ´ÆÈ†ÖÁõÆüíá\n\n" +
            "Ââ™È´ÆÔºö 30ÂàÜÈêò\n"   +
            "Ê¥óÈ´ÆÔºö 30ÂàÜÈêò \n"   +
            "Ââ™È´Æ + Ê¥óÈ´ÆÔºö 1Â∞èÊôÇ\n" +
            "Ë≠∑È´Æ + Ê¥óÈ´ÆÔºö 1Â∞èÊôÇ\n\n"  +
            "------------------\n\n" +
            "Áî∑ÁîüÁáôÈ´ÆÔºö 2Â∞èÊôÇ \n\n " +
            "Â•≥ÁîüÁáôÈ´ÆÔºö \n" +
            "Áü≠È´ÆÔºö 2Â∞èÊôÇ\n" +
            "‰∏≠Èï∑È´ÆÔºö 3.5Â∞èÊôÇ\n" +
            "Èï∑È´ÆÔºö 4Â∞èÊôÇ\n\n" +
            "------------------\n\n" +
            "Áî∑Â•≥ÊüìÈ´ÆÔºö \n" +
            "Áü≠È´ÆÔºö 1.5Â∞èÊôÇ\n" +
            "‰∏≠Èï∑È´ÆÔºö 2Â∞èÊôÇ\n" +
            "Èï∑È´ÆÔºö 2.5Â∞èÊôÇ"

            ,quick_reply=QuickReply(
                items=[
                    QuickReplyButton(
                        action=PostbackAction(label="Ââ™È´Æ"
                                            , data="Ââ™È´Æ")
                    ),
                    QuickReplyButton(
                        action=PostbackAction(label="Ê¥óÈ´Æ"
                                            , data="Ê¥óÈ´Æ")
                    ),
                    QuickReplyButton(
                        action=PostbackAction(label="Ââ™È´Æ+Ê¥óÈ´Æ"
                                            , data="Ââ™È´Æ(Ê¥óÈ´Æ)")
                    ),
                    QuickReplyButton(
                        action=PostbackAction(label="Ë≠∑È´Æ+Ë≠∑È´Æ"
                                            , data="Ë≠∑È´Æ(Ê¥óÈ´Æ)")
                    ),
                    QuickReplyButton(
                        action=PostbackAction(label="ÁáôÈ´Æ(Áî∑)"
                                            , data="ÁáôÈ´Æ(Áî∑)")
                    ),
                    QuickReplyButton(
                        action=PostbackAction(label="ÁáôÈ´Æ(Â•≥)"
                                            , data="ÁáôÈ´Æ(Â•≥)")
                    ),
                    QuickReplyButton(
                        action=PostbackAction(label="ÊüìÈ´Æ"
                                            , data="ÊüìÈ´Æ")
                    ),
                    QuickReplyButton(
                        action=PostbackAction(label="ÊüìÈ´Æ+Ââ™È´Æ"
                                            , data="ÊüìÈ´Æ(Ââ™È´Æ)")
                    )
                ]
        )))
        return 0

    if event.postback.data == "È†êÁ¥ÑÊü•Ë©¢":
        #DB set
        DATABASE_URL = os.environ['DATABASE_URL']
        conn = psycopg2.connect(DATABASE_URL, sslmode='require')
        cursor = conn.cursor()

        #DB update new customer into customer table
        query = f"""select * from customer where userid = (%s);"""
        cursor.execute(query,(userID,))
        conn.commit()
        if cursor.fetchone() == None:
            record = (userID,'',userName,'','','',0,'')
            table_columns = '(userid, service ,name,has_reser1,has_reser2,has_reser3,reser_num,reser_full_data)'
            postgres_insert_query = f"""INSERT INTO customer {table_columns} VALUES (%s, %s, %s, %s, %s, %s, %s, %s);"""
            cursor.execute(postgres_insert_query, record)
            conn.commit()

        sql = "select reser_num from customer where userid = '" +userID + "';"
        cursor.execute(sql)
        conn.commit()
        reser_num = int(cursor.fetchone()[0])
        if reser_num == 0:
            line_bot_api.reply_message(event.reply_token, TextSendMessage("ÁõÆÂâçÊ≤íÊúâÈ†êÁ¥ÑÁ¥ÄÈåÑÂî∑üíá"))
            return 0

        #Âèñ has_reser_list
        has_reser_list = []
        for i in range(3):
            sql = "select has_reser"+ str(i+1) + " from customer where userid = '" + userID + "';"
            cursor.execute(sql)
            conn.commit()
            result = cursor.fetchone()[0]
            if result != '':
                has_reser_list.append(result)


        #Ê™¢Êü• has_reserÊó•Êúü ÊúâÊ≤íÊúâÂ§ßÊñº‰ªäÂ§©Êó•Êúü Ëã•Ê≤íÊúâ Âà™Êéâ
        theTime = datetime.datetime.now().strftime(ISOTIMEFORMAT)
        today = str(theTime).split()[0]
        nowtime = str(theTime).split()[1]

        re_write_into_has_reser = []
        for i in range(len(has_reser_list)):
            date = has_reser_list[i].split('#')[0].split()[0]
            time = has_reser_list[i].split('#')[1].split('-')[1]
            if today > date:
                reser_num-=1
                sql = "update customer set has_reser" + str(i+1) + " = '' where userid = '" + userID +"';"
                cursor.execute(sql)
                conn.commit()
                continue
            if today == date:
                if nowtime > time:
                    reser_num-=1
                    sql = "update customer set has_reser" + str(i+1) + " = '' where userid = '" + userID +"';"
                    cursor.execute(sql)
                    conn.commit()
                    continue
            re_write_into_has_reser.append(has_reser_list[i])


        #ÂÖàÊ∏ÖÁ©∫ ÂÜç rewrite
        for i in range(3):
            sql = sql = "update customer set has_reser" + str(i+1) + " = '' where userid = '" + userID +"';"
            cursor.execute(sql)
            conn.commit()

        # rewrite into customer
        if reser_num > 0 :
            #rewrite data an update reser_num
            sql = "update customer set reser_num = " + str(reser_num) + " where userid = '" + userID +"';"
            cursor.execute(sql)
            conn.commit()

            for i in range(len(re_write_into_has_reser)):
                sql = "update customer set has_reser" + str(i+1) + " = '" + re_write_into_has_reser[i] + "' where userid = '" + userID +"';"
                cursor.execute(sql)
                conn.commit()
        # Ê≤íÊúâÁ¥ÄÈåÑÂ∞± return 0
        else:
            sql = "update customer set reser_num = 0 where userid = '" + userID +"';"
            cursor.execute(sql)
            conn.commit()
            line_bot_api.reply_message(event.reply_token, TextSendMessage("ÁõÆÂâçÊ≤íÊúâÈ†êÁ¥ÑÁ¥ÄÈåÑ"))
            return 0



        search_reservation = {
            "type": "carousel",
            "contents": [
            ]
        }

        # Ë¢´ apprnd ÁöÑ item ÂøÖÈ†àÂú®for Ë£°Èù¢ÂàùÂßãÂåñ ÔºåÂê¶ÂâáappendÈÄ≤Âéªitem ÁöÑÈÉΩÊúÉÂèÉËÄÉÂêå‰∏ÄÂÄã‰ΩçÁΩÆ
        for i in range(len(re_write_into_has_reser)):
            research_data = {
                "type": "bubble",
                "body": {
                    "type": "box",
                    "layout": "vertical",
                    "contents": [
                    {
                        "type": "text",
                        "text": "È†êÁ¥ÑÁ¥ÄÈåÑ",
                        "weight": "bold",
                        "color": "#1DB446",
                        "size": "xl",
                        "gravity": "center",
                        "align": "center"
                    },
                    {
                        "type": "separator",
                        "margin": "lg"
                    },
                    {
                        "type": "box",
                        "layout": "vertical",
                        "margin": "xxl",
                        "spacing": "sm",
                        "contents": [
                        {
                            "type": "box",
                            "layout": "horizontal",
                            "contents": [
                            {
                                "type": "text",
                                "text": "È†êÁ¥ÑÊó•Êúü",
                                "size": "lg",
                                "color": "#555555",
                                "flex": 0
                            },
                            {
                                "type": "text",
                                "text": "05-18 (‰∏â)",
                                "size": "lg",
                                "color": "#111111",
                                "align": "end"
                            }
                            ]
                        },
                        {
                            "type": "box",
                            "layout": "horizontal",
                            "contents": [
                            {
                                "type": "text",
                                "text": "È†êÁ¥ÑÊôÇÈñì",
                                "size": "lg",
                                "color": "#555555",
                                "flex": 0
                            },
                            {
                                "type": "text",
                                "text": "14:00-15:00",
                                "size": "lg",
                                "color": "#111111",
                                "align": "end"
                            }
                            ]
                        },
                        {
                            "type": "box",
                            "layout": "horizontal",
                            "contents": [
                            {
                                "type": "text",
                                "text": "ÁæéÈ´ÆÈ†ÖÁõÆ",
                                "size": "lg",
                                "color": "#555555",
                                "flex": 0
                            },
                            {
                                "type": "text",
                                "text": "ÁáôÈ´Æ",
                                "size": "lg",
                                "color": "#111111",
                                "align": "end"
                            }
                            ]
                        }
                        ]
                    },
                    {
                        "type": "button",
                        "action": {
                        "type": "postback",
                        "label": "Âà™Èô§È†êÁ¥Ñ",
                        "data": "Âà™Èô§È†êÁ¥Ñ"
                        },
                        "style": "primary",
                        "margin": "md"
                    }
                    ]
                }
            }
            search_reservation['contents'].append(research_data)


        for i in range(len(re_write_into_has_reser)):
            write_date = re_write_into_has_reser[i].split('#')[0]
            write_time = re_write_into_has_reser[i].split('#')[1]
            write_service = re_write_into_has_reser[i].split('#')[2]
            search_reservation['contents'][i]['body']['contents'][2]['contents'][0]['contents'][1]['text'] = write_date
            search_reservation['contents'][i]['body']['contents'][2]['contents'][1]['contents'][1]['text'] = write_time
            search_reservation['contents'][i]['body']['contents'][2]['contents'][2]['contents'][1]['text'] = write_service

            write_in_date = write_date.split()[0]
            write_in_time1_index = time_table.index(write_time.split('-')[0])
            write_in_time2_index = time_table.index(write_time.split('-')[1])

            write_in_data = str(write_in_date) + ' ' + str(write_in_time1_index) + ' ' + str(write_in_time2_index)
            search_reservation['contents'][i]['body']['contents'][3]['action']['data'] = 'Âà™Èô§È†êÁ¥Ñ ' + write_in_data + ' ' + str(i+1)

        line_bot_api.reply_message(event.reply_token, FlexSendMessage(
                alt_text = 'È†êÁ¥ÑÊü•Ë©¢ÁµêÊûú',
                contents = search_reservation ))


        cursor.close()
        conn.close()

        return 0


    if event.postback.data == "‰ΩúÂìÅÈõÜÁÆ°ÁêÜ":
        line_bot_api.reply_message(event.reply_token, TextSendMessage("‰ΩúÂìÅÈõÜÁÆ°ÁêÜ"
            ,quick_reply=QuickReply(
                items=[
                    QuickReplyButton(
                        action=PostbackAction(label="Êñ∞Â¢û‰ΩúÂìÅ"
                                            , data="Êñ∞Â¢û‰ΩúÂìÅ")
                    ),
                    QuickReplyButton(
                        action=PostbackAction(label="ÁÆ°ÁêÜ‰ΩúÂìÅÈõÜ"
                                            , data="ÁÆ°ÁêÜ‰ΩúÂìÅÈõÜ")
                    )
                ]
        )))
        return 0

    if event.postback.data == "Êü•Áúã‰ΩúÂìÅÈõÜ":
        line_bot_api.reply_message(event.reply_token, TextSendMessage("ÈÅ∏Êìá„ÄéÁî∑Áîü‰ΩúÂìÅÈõÜ„Äè or „ÄéÂ•≥Áîü‰ΩúÂìÅÈõÜ„Äè"
            ,quick_reply=QuickReply(
                items=[
                    QuickReplyButton(
                        action=PostbackAction(label="Áî∑Áîü‰ΩúÂìÅÈõÜ"
                                            , data="Êü•ÁúãÁî∑Áîü‰ΩúÂìÅÈõÜ")
                    ),
                    QuickReplyButton(
                        action=PostbackAction(label="Â•≥Áîü‰ΩúÂìÅÈõÜ"
                                            , data="Êü•ÁúãÂ•≥Áîü‰ΩúÂìÅÈõÜ")
                    )
                ]
        )))

        return 0


    if event.postback.data == "Êü•ÁúãÁî∑Áîü‰ΩúÂìÅÈõÜ":
        line_bot_api.reply_message(event.reply_token, TextSendMessage("Áî∑Áîü‰ΩúÂìÅÈõÜ"
            ,quick_reply=QuickReply(
                items=[
                    QuickReplyButton(
                        action=PostbackAction(label="Ââ™È´Æ‰ΩúÂìÅÈõÜ"
                                            , data="Êü•ÁúãÁî∑ÁîüÂâ™È´Æ‰ΩúÂìÅÈõÜ")
                    ),
                    QuickReplyButton(
                        action=PostbackAction(label="ÊüìÈ´Æ‰ΩúÂìÅÈõÜ"
                                            , data="Êü•ÁúãÁî∑ÁîüÊüìÈ´Æ‰ΩúÂìÅÈõÜ")
                    ),
                    QuickReplyButton(
                        action=PostbackAction(label="ÁáôÈ´Æ‰ΩúÂìÅÈõÜ"
                                            , data="Êü•ÁúãÁî∑ÁîüÁáôÈ´Æ‰ΩúÂìÅÈõÜ")
                    )
                ]
        )))

        return 0

    if event.postback.data == "Êü•ÁúãÂ•≥Áîü‰ΩúÂìÅÈõÜ":
        line_bot_api.reply_message(event.reply_token, TextSendMessage("Â•≥Áîü‰ΩúÂìÅÈõÜ"
            ,quick_reply=QuickReply(
                items=[
                    QuickReplyButton(
                        action=PostbackAction(label="Ââ™È´Æ‰ΩúÂìÅÈõÜ"
                                            , data="Êü•ÁúãÂ•≥ÁîüÂâ™È´Æ‰ΩúÂìÅÈõÜ")
                    ),
                    QuickReplyButton(
                        action=PostbackAction(label="ÊüìÈ´Æ‰ΩúÂìÅÈõÜ"
                                            , data="Êü•ÁúãÂ•≥ÁîüÊüìÈ´Æ‰ΩúÂìÅÈõÜ")
                    ),
                    QuickReplyButton(
                        action=PostbackAction(label="ÁáôÈ´Æ‰ΩúÂìÅÈõÜ"
                                            , data="Êü•ÁúãÂ•≥ÁîüÁáôÈ´Æ‰ΩúÂìÅÈõÜ")
                    )
                ]
        )))

        return 0

    if event.postback.data == "‰∏äÂÇ≥Ââ™È´ÆÁõ∏Á∞ø":

        line_bot_api.reply_message(event.reply_token, TextSendMessage("ÂàÜÈ°ûËá≥„ÄéÁî∑Áîü„Äè or „ÄéÂ•≥Áîü„Äè"
            ,quick_reply=QuickReply(
                items=[
                    QuickReplyButton(
                        action=PostbackAction(label="Áî∑Áîü"
                                            , data="Áî∑ÁîüÂâ™È´Æ")
                    ),
                    QuickReplyButton(
                        action=PostbackAction(label="Â•≥Áîü"
                                            , data="Â•≥ÁîüÂâ™È´Æ")
                    )
                ]
        )))

        return 0
    if event.postback.data == "‰∏äÂÇ≥ÁáôÈ´ÆÁõ∏Á∞ø":
        line_bot_api.reply_message(event.reply_token, TextSendMessage("ÂàÜÈ°ûËá≥„ÄéÁî∑Áîü„Äè or „ÄéÂ•≥Áîü„Äè"
            ,quick_reply=QuickReply(
                items=[
                    QuickReplyButton(
                        action=PostbackAction(label="Áî∑Áîü"
                                            , data="Áî∑ÁîüÁáôÈ´Æ")
                    ),
                    QuickReplyButton(
                        action=PostbackAction(label="Â•≥Áîü"
                                            , data="Â•≥ÁîüÁáôÈ´Æ")
                    )
                ]
        )))

        return 0

    if event.postback.data == "‰∏äÂÇ≥ÊüìÈ´ÆÁõ∏Á∞ø":
        line_bot_api.reply_message(event.reply_token, TextSendMessage("ÂàÜÈ°ûËá≥„ÄéÁî∑Áîü„Äè or „ÄéÂ•≥Áîü„Äè"
            ,quick_reply=QuickReply(
                items=[
                    QuickReplyButton(
                        action=PostbackAction(label="Áî∑Áîü"
                                            , data="Áî∑ÁîüÊüìÈ´Æ")
                    ),
                    QuickReplyButton(
                        action=PostbackAction(label="Â•≥Áîü"
                                            , data="Â•≥ÁîüÊüìÈ´Æ")
                    )
                ]
        )))

        return 0


    if event.postback.data == "Áî∑ÁîüÂâ™È´Æ":
        line_bot_api.reply_message(event.reply_token, TextSendMessage("Â∑≤Êñ∞Â¢ûËá≥‰ΩúÂìÅÈõÜ„ÄÇ"))

        DATABASE_URL = os.environ['DATABASE_URL']
        conn = psycopg2.connect(DATABASE_URL, sslmode='require')
        cursor = conn.cursor()

        # get the url list
        sql = "select pic_1,pic_2,pic_3,pic_4 from manager where userid = 'Ue9484510f6a0ba4d68b30d0c759949c9'"
        cursor.execute(sql)
        conn.commit()
        img_list = cursor.fetchone()

        # update to the portfolio
        table_columns = '(add_date,pic_1,pic_2,pic_3,pic_4)'
        sql = f"""insert into cut_man {table_columns} values (%s,%s,%s,%s,%s)"""
        date = (datetime.datetime.now()+datetime.timedelta(days=0)).strftime("%m-%d")
        cursor.execute(sql , (date,img_list[0],img_list[1],img_list[2],img_list[3]))
        conn.commit()

        #reset pic_num ,reset img_url
        sql = "update manager set status='',pic_num = '0' ,pic_1 = '', pic_2 = '', pic_3 = '' where userid = 'Ue9484510f6a0ba4d68b30d0c759949c9'"
        cursor.execute(sql)
        conn.commit()


        return 0

    if event.postback.data == "Â•≥ÁîüÂâ™È´Æ":
        line_bot_api.reply_message(event.reply_token, TextSendMessage("Â∑≤Êñ∞Â¢ûËá≥‰ΩúÂìÅÈõÜ„ÄÇ"))

        DATABASE_URL = os.environ['DATABASE_URL']
        conn = psycopg2.connect(DATABASE_URL, sslmode='require')
        cursor = conn.cursor()

        # get the url list
        sql = "select pic_1,pic_2,pic_3,pic_4 from manager where userid = 'Ue9484510f6a0ba4d68b30d0c759949c9'"
        cursor.execute(sql)
        conn.commit()
        img_list = cursor.fetchone()

        # update to the portfolio
        table_columns = '(add_date,pic_1,pic_2,pic_3,pic_4)'
        sql = f"""insert into cut_male {table_columns} values (%s,%s,%s,%s,%s)"""
        date = (datetime.datetime.now()+datetime.timedelta(days=0)).strftime("%m-%d")
        cursor.execute(sql , (date,img_list[0],img_list[1],img_list[2],img_list[3]))
        conn.commit()

        #reset pic_num ,reset img_url
        sql = "update manager set status='',pic_num = '0' ,pic_1 = '', pic_2 = '', pic_3 = '' where userid = 'Ue9484510f6a0ba4d68b30d0c759949c9'"
        cursor.execute(sql)
        conn.commit()


        return 0

    if event.postback.data == "Áî∑ÁîüÁáôÈ´Æ":
        line_bot_api.reply_message(event.reply_token, TextSendMessage("Â∑≤Êñ∞Â¢ûËá≥‰ΩúÂìÅÈõÜ„ÄÇ"))

        DATABASE_URL = os.environ['DATABASE_URL']
        conn = psycopg2.connect(DATABASE_URL, sslmode='require')
        cursor = conn.cursor()

        # get the url list
        sql = "select pic_1,pic_2,pic_3,pic_4 from manager where userid = 'Ue9484510f6a0ba4d68b30d0c759949c9'"
        cursor.execute(sql)
        conn.commit()
        img_list = cursor.fetchone()

        # update to the portfolio
        table_columns = '(add_date,pic_1,pic_2,pic_3,pic_4)'
        sql = f"""insert into perm_man {table_columns} values (%s,%s,%s,%s,%s)"""
        date = (datetime.datetime.now()+datetime.timedelta(days=0)).strftime("%m-%d")
        cursor.execute(sql , (date,img_list[0],img_list[1],img_list[2],img_list[3]))
        conn.commit()

        #reset pic_num ,reset img_url
        sql = "update manager set status='',pic_num = '0' ,pic_1 = '', pic_2 = '', pic_3 = '' where userid = 'Ue9484510f6a0ba4d68b30d0c759949c9'"
        cursor.execute(sql)
        conn.commit()


        return 0

    if event.postback.data == "Â•≥ÁîüÁáôÈ´Æ":
        line_bot_api.reply_message(event.reply_token, TextSendMessage("ÂàÜÈ°ûËá≥„ÄéÈï∑È´Æ„Äè or „Äé‰∏≠Èï∑È´Æ„Äè or „ÄéÁü≠È´Æ„Äè"
            ,quick_reply=QuickReply(
                items=[
                    QuickReplyButton(
                        action=PostbackAction(label="Èï∑È´Æ"
                                            , data="Â•≥ÁîüÈï∑ÁáôÈ´Æ")
                    ),
                    QuickReplyButton(
                        action=PostbackAction(label="‰∏≠Èï∑È´Æ"
                                            , data="Â•≥Áîü‰∏≠Èï∑ÁáôÈ´Æ")
                    ),
                    QuickReplyButton(
                        action=PostbackAction(label="Áü≠È´Æ"
                                            , data="Â•≥ÁîüÁü≠ÁáôÈ´Æ")
                    )
                ]
        )))

        return 0

    if event.postback.data == "Â•≥ÁîüÈï∑ÁáôÈ´Æ":
        line_bot_api.reply_message(event.reply_token, TextSendMessage("Â∑≤Êñ∞Â¢ûËá≥‰ΩúÂìÅÈõÜ„ÄÇ"))

        DATABASE_URL = os.environ['DATABASE_URL']
        conn = psycopg2.connect(DATABASE_URL, sslmode='require')
        cursor = conn.cursor()

        # get the url list
        sql = "select pic_1,pic_2,pic_3,pic_4 from manager where userid = 'Ue9484510f6a0ba4d68b30d0c759949c9'"
        cursor.execute(sql)
        conn.commit()
        img_list = cursor.fetchone()

        # update to the portfolio
        table_columns = '(add_date,pic_1,pic_2,pic_3,pic_4,lenth)'
        sql = f"""insert into perm_male {table_columns} values (%s,%s,%s,%s,%s,%s)"""
        date = (datetime.datetime.now()+datetime.timedelta(days=0)).strftime("%m-%d")
        cursor.execute(sql , (date,img_list[0],img_list[1],img_list[2],img_list[3],'l'))
        conn.commit()

        #reset pic_num ,reset img_url
        sql = "update manager set status='',pic_num = '0' ,pic_1 = '', pic_2 = '', pic_3 = '' where userid = 'Ue9484510f6a0ba4d68b30d0c759949c9'"
        cursor.execute(sql)
        conn.commit()


        return 0

    if event.postback.data == "Â•≥Áîü‰∏≠Èï∑ÁáôÈ´Æ":
        line_bot_api.reply_message(event.reply_token, TextSendMessage("Â∑≤Êñ∞Â¢ûËá≥‰ΩúÂìÅÈõÜ„ÄÇ"))

        DATABASE_URL = os.environ['DATABASE_URL']
        conn = psycopg2.connect(DATABASE_URL, sslmode='require')
        cursor = conn.cursor()

        # get the url list
        sql = "select pic_1,pic_2,pic_3,pic_4 from manager where userid = 'Ue9484510f6a0ba4d68b30d0c759949c9'"
        cursor.execute(sql)
        conn.commit()
        img_list = cursor.fetchone()

        # update to the portfolio
        table_columns = '(add_date,pic_1,pic_2,pic_3,pic_4,lenth)'
        sql = f"""insert into perm_male {table_columns} values (%s,%s,%s,%s,%s,%s)"""
        date = (datetime.datetime.now()+datetime.timedelta(days=0)).strftime("%m-%d")
        cursor.execute(sql , (date,img_list[0],img_list[1],img_list[2],img_list[3],'m'))
        conn.commit()

        #reset pic_num ,reset img_url
        sql = "update manager set status='',pic_num = '0' ,pic_1 = '', pic_2 = '', pic_3 = '' where userid = 'Ue9484510f6a0ba4d68b30d0c759949c9'"
        cursor.execute(sql)
        conn.commit()


        return 0

    if event.postback.data == "Â•≥ÁîüÁü≠ÁáôÈ´Æ":
        line_bot_api.reply_message(event.reply_token, TextSendMessage("Â∑≤Êñ∞Â¢ûËá≥‰ΩúÂìÅÈõÜ„ÄÇ"))

        DATABASE_URL = os.environ['DATABASE_URL']
        conn = psycopg2.connect(DATABASE_URL, sslmode='require')
        cursor = conn.cursor()

        # get the url list
        sql = "select pic_1,pic_2,pic_3,pic_4 from manager where userid = 'Ue9484510f6a0ba4d68b30d0c759949c9'"
        cursor.execute(sql)
        conn.commit()
        img_list = cursor.fetchone()

        # update to the portfolio
        table_columns = '(add_date,pic_1,pic_2,pic_3,pic_4,lenth)'
        sql = f"""insert into perm_male {table_columns} values (%s,%s,%s,%s,%s,%s)"""
        date = (datetime.datetime.now()+datetime.timedelta(days=0)).strftime("%m-%d")
        cursor.execute(sql , (date,img_list[0],img_list[1],img_list[2],img_list[3],'s'))
        conn.commit()

        #reset pic_num ,reset img_url
        sql = "update manager set status='',pic_num = '0' ,pic_1 = '', pic_2 = '', pic_3 = '' where userid = 'Ue9484510f6a0ba4d68b30d0c759949c9'"
        cursor.execute(sql)
        conn.commit()


        return 0

    if event.postback.data == "Áî∑ÁîüÊüìÈ´Æ":
        line_bot_api.reply_message(event.reply_token, TextSendMessage("Â∑≤Êñ∞Â¢ûËá≥‰ΩúÂìÅÈõÜ„ÄÇ"))

        DATABASE_URL = os.environ['DATABASE_URL']
        conn = psycopg2.connect(DATABASE_URL, sslmode='require')
        cursor = conn.cursor()

        # get the url list
        sql = "select pic_1,pic_2,pic_3,pic_4 from manager where userid = 'Ue9484510f6a0ba4d68b30d0c759949c9'"
        cursor.execute(sql)
        conn.commit()
        img_list = cursor.fetchone()

        # update to the portfolio
        table_columns = '(add_date,pic_1,pic_2,pic_3,pic_4)'
        sql = f"""insert into dye_man {table_columns} values (%s,%s,%s,%s,%s)"""
        date = (datetime.datetime.now()+datetime.timedelta(days=0)).strftime("%m-%d")
        cursor.execute(sql , (date,img_list[0],img_list[1],img_list[2],img_list[3]))
        conn.commit()

        #reset pic_num ,reset img_url
        sql = "update manager set status='',pic_num = '0' ,pic_1 = '', pic_2 = '', pic_3 = '' where userid = 'Ue9484510f6a0ba4d68b30d0c759949c9'"
        cursor.execute(sql)
        conn.commit()


        return 0

    if event.postback.data == "Â•≥ÁîüÊüìÈ´Æ":
        line_bot_api.reply_message(event.reply_token, TextSendMessage("Â∑≤Êñ∞Â¢ûËá≥‰ΩúÂìÅÈõÜ„ÄÇ"))

        DATABASE_URL = os.environ['DATABASE_URL']
        conn = psycopg2.connect(DATABASE_URL, sslmode='require')
        cursor = conn.cursor()

        # get the url list
        sql = "select pic_1,pic_2,pic_3,pic_4 from manager where userid = 'Ue9484510f6a0ba4d68b30d0c759949c9'"
        cursor.execute(sql)
        conn.commit()
        img_list = cursor.fetchone()

        # update to the portfolio
        table_columns = '(add_date,pic_1,pic_2,pic_3,pic_4)'
        sql = f"""insert into dye_male {table_columns} values (%s,%s,%s,%s,%s)"""
        date = (datetime.datetime.now()+datetime.timedelta(days=0)).strftime("%m-%d")
        cursor.execute(sql , (date,img_list[0],img_list[1],img_list[2],img_list[3]))
        conn.commit()

        #reset pic_num ,reset img_url
        sql = "update manager set status='',pic_num = '0' ,pic_1 = '', pic_2 = '', pic_3 = '' where userid = 'Ue9484510f6a0ba4d68b30d0c759949c9'"
        cursor.execute(sql)
        conn.commit()


        return 0

    if event.postback.data == 'ÈÅ∏ÊìáÊ®£Âºè‰∏Ä':
        line_bot_api.reply_message(event.reply_token, TextSendMessage('Ë´ã‰∏äÂÇ≥‰∏ÄÂºµÂúñÁâá'))
        #DB set
        DATABASE_URL = os.environ['DATABASE_URL']
        conn = psycopg2.connect(DATABASE_URL, sslmode='require')
        cursor = conn.cursor()

        # set manager stauts '‰∏äÂÇ≥ÂúñÁâá'
        sql = "update manager set status = '‰∏äÂÇ≥ÂúñÁâá#Ê®£Âºè‰∏Ä' where userid = 'Ue9484510f6a0ba4d68b30d0c759949c9'"
        cursor.execute(sql)
        conn.commit()


        return 0

    if event.postback.data == 'ÈÅ∏ÊìáÊ®£Âºè‰∫å':
        line_bot_api.reply_message(event.reply_token, TextSendMessage('Ë´ã‰æùÂ∫è‰∏äÂÇ≥ÂÖ©ÂºµÂúñÁâá'))
        #DB set
        DATABASE_URL = os.environ['DATABASE_URL']
        conn = psycopg2.connect(DATABASE_URL, sslmode='require')
        cursor = conn.cursor()

        # set manager stauts '‰∏äÂÇ≥ÂúñÁâá'
        sql = "update manager set status = '‰∏äÂÇ≥ÂúñÁâá#Ê®£Âºè‰∫å' where userid = 'Ue9484510f6a0ba4d68b30d0c759949c9'"
        cursor.execute(sql)
        conn.commit()


        return 0

    if event.postback.data == 'ÈÅ∏ÊìáÊ®£Âºè‰∏â':
        line_bot_api.reply_message(event.reply_token, TextSendMessage('Ë´ã‰æùÂ∫è‰∏äÂÇ≥‰∏âÂºµÂúñÁâá'))
        #DB set
        DATABASE_URL = os.environ['DATABASE_URL']
        conn = psycopg2.connect(DATABASE_URL, sslmode='require')
        cursor = conn.cursor()

        # set manager stauts '‰∏äÂÇ≥ÂúñÁâá'
        sql = "update manager set status = '‰∏äÂÇ≥ÂúñÁâá#Ê®£Âºè‰∏â' where userid = 'Ue9484510f6a0ba4d68b30d0c759949c9'"
        cursor.execute(sql)
        conn.commit()


        return 0

    if event.postback.data == "Êñ∞Â¢û‰ΩúÂìÅ":

        test = {
            "type": "carousel",
            "contents": [
                {
                "type": "bubble",
                "size": "giga",
                "body": {
                    "type": "box",
                    "layout": "vertical",
                    "contents": [
                    {
                        "type": "box",
                        "layout": "vertical",
                        "contents": [
                        {
                            "type": "image",
                            "url": "https://scdn.line-apps.com/n/channel_devcenter/img/flexsnapshot/clip/clip13.jpg",
                            "aspectMode": "cover",
                            "size": "full",
                            "aspectRatio": "50:100"
                        }
                        ]
                    },
                    {
                        "type": "box",
                        "layout": "vertical",
                        "contents": [
                        {
                            "type": "button",
                            "action": {
                            "type": "postback",
                            "label": "ÈÅ∏ÊìáÊ®£Âºè‰∏Ä",
                            "data": "ÈÅ∏ÊìáÊ®£Âºè‰∏Ä"
                            },
                            "style": "primary",
                            "height": "md",
                            "offsetBottom": "10px"
                        }
                        ],
                        "offsetTop": "10px",
                        "paddingAll": "10px"
                    }
                    ],
                    "paddingAll": "10px"
                }
                },
                {
                "type": "bubble",
                "size": "giga",
                "body": {
                    "type": "box",
                    "layout": "vertical",
                    "contents": [
                    {
                        "type": "box",
                        "layout": "vertical",
                        "contents": [
                        {
                            "type": "image",
                            "url": "https://scdn.line-apps.com/n/channel_devcenter/img/flexsnapshot/clip/clip13.jpg",
                            "aspectMode": "cover",
                            "size": "full",
                            "aspectRatio": "100:100"
                        },
                        {
                            "type": "image",
                            "url": "https://scdn.line-apps.com/n/channel_devcenter/img/flexsnapshot/clip/clip13.jpg",
                            "aspectMode": "cover",
                            "size": "full",
                            "aspectRatio": "100:100"
                        }
                        ]
                    },
                    {
                        "type": "box",
                        "layout": "vertical",
                        "contents": [
                        {
                            "type": "button",
                            "action": {
                            "type": "postback",
                            "label": "ÈÅ∏ÊìáÊ®£Âºè‰∫å",
                            "data": "ÈÅ∏ÊìáÊ®£Âºè‰∫å"
                            },
                            "style": "primary",
                            "height": "md",
                            "offsetBottom": "10px"
                        }
                        ],
                        "offsetTop": "10px",
                        "paddingAll": "10px"
                    }
                    ],
                    "paddingAll": "10px"
                }
                },
                {
                "type": "bubble",
                "size": "giga",
                "body": {
                    "type": "box",
                    "layout": "vertical",
                    "contents": [
                    {
                        "type": "box",
                        "layout": "vertical",
                        "contents": [
                        {
                            "type": "image",
                            "url": "https://scdn.line-apps.com/n/channel_devcenter/img/flexsnapshot/clip/clip13.jpg",
                            "aspectMode": "cover",
                            "size": "full"
                        }
                        ],
                        "cornerRadius": "200px"
                    },
                    {
                        "type": "box",
                        "layout": "horizontal",
                        "contents": [
                        {
                            "type": "image",
                            "url": "https://scdn.line-apps.com/n/channel_devcenter/img/flexsnapshot/clip/clip13.jpg",
                            "aspectMode": "cover",
                            "size": "5xl",
                            "aspectRatio": "150:300"
                        },
                        {
                            "type": "image",
                            "url": "https://scdn.line-apps.com/n/channel_devcenter/img/flexsnapshot/clip/clip13.jpg",
                            "aspectMode": "cover",
                            "size": "5xl",
                            "aspectRatio": "150:300"
                        }
                        ]
                    },
                    {
                        "type": "box",
                        "layout": "vertical",
                        "contents": [
                        {
                            "type": "button",
                            "action": {
                            "type": "postback",
                            "label": "ÈÅ∏ÊìáÊ®£Âºè‰∏â",
                            "data": "ÈÅ∏ÊìáÊ®£Âºè‰∏â"
                            },
                            "style": "primary",
                            "height": "md",
                            "offsetBottom": "10px"
                        }
                        ],
                        "offsetTop": "10px",
                        "paddingAll": "10px"
                    }
                    ],
                    "paddingAll": "10px"
                }
                }
            ]
        }

        line_bot_api.reply_message(event.reply_token , FlexSendMessage('Ë´ãÈÅ∏ÊìáÊì∫ÊîæÊ®£Âºè', contents= test))


        #DB set
        DATABASE_URL = os.environ['DATABASE_URL']
        conn = psycopg2.connect(DATABASE_URL, sslmode='require')
        cursor = conn.cursor()

        #Ê∏ÖÁ©∫manager status
        sql = "update manager set pic_num = '0',pic_1 = '', pic_2 = '', pic_3 = '' where userid = 'Ue9484510f6a0ba4d68b30d0c759949c9'"
        cursor.execute(sql)
        conn.commit()

        return 0

    if event.postback.data == "ÁÆ°ÁêÜ‰ΩúÂìÅÈõÜ":
        line_bot_api.reply_message(event.reply_token, TextSendMessage("ÁÆ°ÁêÜ‰ΩúÂìÅÈõÜ"
            ,quick_reply=QuickReply(
                items=[
                    QuickReplyButton(
                        action=PostbackAction(label="Áî∑Áîü‰ΩúÂìÅÈõÜ"
                                            , data="Áî∑Áîü‰ΩúÂìÅÈõÜ")
                    ),
                    QuickReplyButton(
                        action=PostbackAction(label="Â•≥Áîü‰ΩúÂìÅÈõÜ"
                                            , data="Â•≥Áîü‰ΩúÂìÅÈõÜ")
                    )
                ]
        )))

        return 0

    if event.postback.data == "Áî∑Áîü‰ΩúÂìÅÈõÜ":
        line_bot_api.reply_message(event.reply_token, TextSendMessage("Áî∑Áîü‰ΩúÂìÅÈõÜ"
            ,quick_reply=QuickReply(
                items=[
                    QuickReplyButton(
                        action=PostbackAction(label="Áî∑ÁîüÂâ™È´Æ‰ΩúÂìÅÈõÜ"
                                            , data="Áî∑ÁîüÂâ™È´Æ‰ΩúÂìÅÈõÜ")
                    ),
                    QuickReplyButton(
                        action=PostbackAction(label="Áî∑ÁîüÊüìÈ´Æ‰ΩúÂìÅÈõÜ"
                                            , data="Áî∑ÁîüÊüìÈ´Æ‰ΩúÂìÅÈõÜ")
                    ),
                    QuickReplyButton(
                        action=PostbackAction(label="Áî∑ÁîüÁáôÈ´Æ‰ΩúÂìÅÈõÜ"
                                            , data="Áî∑ÁîüÁáôÈ´Æ‰ΩúÂìÅÈõÜ")
                    )
                ]
        )))

        return 0

    if event.postback.data == "Â•≥Áîü‰ΩúÂìÅÈõÜ":
        line_bot_api.reply_message(event.reply_token, TextSendMessage("Â•≥Áîü‰ΩúÂìÅÈõÜ"
            ,quick_reply=QuickReply(
                items=[
                    QuickReplyButton(
                        action=PostbackAction(label="Â•≥ÁîüÂâ™È´Æ‰ΩúÂìÅÈõÜ"
                                            , data="Â•≥ÁîüÂâ™È´Æ‰ΩúÂìÅÈõÜ")
                    ),
                    QuickReplyButton(
                        action=PostbackAction(label="Â•≥ÁîüÊüìÈ´Æ‰ΩúÂìÅÈõÜ"
                                            , data="Â•≥ÁîüÊüìÈ´Æ‰ΩúÂìÅÈõÜ")
                    ),
                    QuickReplyButton(
                        action=PostbackAction(label="Â•≥ÁîüÁáôÈ´Æ‰ΩúÂìÅÈõÜ"
                                            , data="Â•≥ÁîüÁáôÈ´Æ‰ΩúÂìÅÈõÜ")
                    )
                ]
        )))

        return 0

# host look up
    if event.postback.data == "Áî∑ÁîüÂâ™È´Æ‰ΩúÂìÅÈõÜ":
        #DB set
        DATABASE_URL = os.environ['DATABASE_URL']
        conn = psycopg2.connect(DATABASE_URL, sslmode='require')
        cursor = conn.cursor()

        sql = "select * from cut_man order by id DESC"
        cursor.execute(sql)
        conn.commit()

        result = cursor.fetchall()

        if not result:
            line_bot_api.reply_message(event.reply_token, TextSendMessage("ÁõÆÂâçÊ≤íÊúâ‰ΩúÂìÅ"))
            return 0

        content = {
            "type": "carousel",
            "contents": [
            ]
        }

        max_num = len(result)
        if max_num > 10:
            max_num = 10

        for i in range(max_num):
            style1 = {
                "type": "bubble",
                "size": "giga",
                "body": {
                    "type": "box",
                    "layout": "vertical",
                    "contents": [
                    {
                        "type": "box",
                        "layout": "vertical",
                        "contents": [
                        {
                            "type": "image",
                            "url": "https://scdn.line-apps.com/n/channel_devcenter/img/flexsnapshot/clip/clip13.jpg",
                            "aspectMode": "cover",
                            "size": "full",
                            "aspectRatio": "50:100"
                        }
                        ]
                    },
                    {
                        "type": "box",
                        "layout": "vertical",
                        "contents": [
                        {
                            "type": "button",
                            "action": {
                            "type": "postback",
                            "label": "Âà™Èô§",
                            "data": "Âà™Èô§‰ΩúÂìÅÈõÜ#cut_man#"
                            },
                            "style": "primary",
                            "height": "md",
                            "offsetBottom": "10px"
                        }
                        ],
                        "offsetTop": "10px",
                        "paddingAll": "10px"
                    }
                    ],
                    "paddingAll": "10px"
                }
            }

            style2 = {
                "type": "bubble",
                "size": "giga",
                "body": {
                    "type": "box",
                    "layout": "vertical",
                    "contents": [
                    {
                        "type": "box",
                        "layout": "vertical",
                        "contents": [
                        {
                            "type": "image",
                            "url": "https://scdn.line-apps.com/n/channel_devcenter/img/flexsnapshot/clip/clip13.jpg",
                            "aspectMode": "cover",
                            "size": "full",
                            "aspectRatio": "100:100"
                        },
                        {
                            "type": "image",
                            "url": "https://scdn.line-apps.com/n/channel_devcenter/img/flexsnapshot/clip/clip13.jpg",
                            "aspectMode": "cover",
                            "size": "full",
                            "aspectRatio": "100:100"
                        }
                        ]
                    },
                    {
                        "type": "box",
                        "layout": "vertical",
                        "contents": [
                        {
                            "type": "button",
                            "action": {
                            "type": "postback",
                            "label": "Âà™Èô§",
                            "data": "Âà™Èô§‰ΩúÂìÅÈõÜ#cut_man#"
                            },
                            "style": "primary",
                            "height": "md",
                            "offsetBottom": "10px"
                        }
                        ],
                        "offsetTop": "10px",
                        "paddingAll": "10px"
                    }
                    ],
                    "paddingAll": "10px"
                }
            }

            style3 = {
                "type": "bubble",
                "size": "giga",
                "body": {
                    "type": "box",
                    "layout": "vertical",
                    "contents": [
                    {
                        "type": "box",
                        "layout": "vertical",
                        "contents": [
                        {
                            "type": "image",
                            "url": "https://scdn.line-apps.com/n/channel_devcenter/img/flexsnapshot/clip/clip13.jpg",
                            "aspectMode": "cover",
                            "size": "full"
                        }
                        ],
                        "cornerRadius": "200px"
                    },
                    {
                        "type": "box",
                        "layout": "horizontal",
                        "contents": [
                        {
                            "type": "image",
                            "url": "https://scdn.line-apps.com/n/channel_devcenter/img/flexsnapshot/clip/clip13.jpg",
                            "aspectMode": "cover",
                            "size": "5xl",
                            "aspectRatio": "150:300"
                        },
                        {
                            "type": "image",
                            "url": "https://scdn.line-apps.com/n/channel_devcenter/img/flexsnapshot/clip/clip13.jpg",
                            "aspectMode": "cover",
                            "size": "5xl",
                            "aspectRatio": "150:300"
                        }
                        ]
                    },
                    {
                        "type": "box",
                        "layout": "vertical",
                        "contents": [
                        {
                            "type": "button",
                            "action": {
                            "type": "postback",
                            "label": "Âà™Èô§",
                            "data": "Âà™Èô§‰ΩúÂìÅÈõÜ#cut_man#"
                            },
                            "style": "primary",
                            "height": "md",
                            "offsetBottom": "10px"
                        }
                        ],
                        "offsetTop": "10px",
                        "paddingAll": "10px"
                    }
                    ],
                    "paddingAll": "10px"
                }
            }

            if result[i][4]!= "":
                style3['body']['contents'][2]['contents'][0]['action']['data'] += str(result[i][0])
                style3['body']['contents'][0]['contents'][0]['url'] = result[i][2]
                style3['body']['contents'][1]['contents'][0]['url'] = result[i][3]
                style3['body']['contents'][1]['contents'][1]['url'] = result[i][4]

                content['contents'].append(style3)
            elif result[i][3] != "":
                style2['body']['contents'][1]['contents'][0]['action']['data'] += str(result[i][0])
                style2['body']['contents'][0]['contents'][0]['url'] = result[i][2]
                style2['body']['contents'][0]['contents'][1]['url'] = result[i][3]

                content['contents'].append(style2)

            else:
                style1['body']['contents'][1]['contents'][0]['action']['data'] += str(result[i][0])
                style1['body']['contents'][0]['contents'][0]['url'] = result[i][2]

                content['contents'].append(style1)
        line_bot_api.reply_message(event.reply_token,FlexSendMessage(alt_text="Áî∑ÁîüÂâ™È´Æ‰ΩúÂìÅÈõÜ",contents=content
        ,quick_reply=QuickReply(
                items=[
                    QuickReplyButton(
                        action=PostbackAction(label="Áî∑ÁîüÂâ™È´Æ‰ΩúÂìÅÈõÜ"
                                            , data="Áî∑ÁîüÂâ™È´Æ‰ΩúÂìÅÈõÜ")
                    ),
                    QuickReplyButton(
                        action=PostbackAction(label="Áî∑ÁîüÊüìÈ´Æ‰ΩúÂìÅÈõÜ"
                                            , data="Áî∑ÁîüÊüìÈ´Æ‰ΩúÂìÅÈõÜ")
                    ),
                    QuickReplyButton(
                        action=PostbackAction(label="Áî∑ÁîüÁáôÈ´Æ‰ΩúÂìÅÈõÜ"
                                            , data="Áî∑ÁîüÁáôÈ´Æ‰ΩúÂìÅÈõÜ")
                    )
                ]
        )))

        return 0


    if event.postback.data == "Áî∑ÁîüÊüìÈ´Æ‰ΩúÂìÅÈõÜ":
        #DB set
        DATABASE_URL = os.environ['DATABASE_URL']
        conn = psycopg2.connect(DATABASE_URL, sslmode='require')
        cursor = conn.cursor()

        sql = "select * from dye_man order by id DESC"
        cursor.execute(sql)
        conn.commit()

        result = cursor.fetchall()

        if not result:
            line_bot_api.reply_message(event.reply_token, TextSendMessage("ÁõÆÂâçÊ≤íÊúâ‰ΩúÂìÅ"))
            return 0

        content = {
            "type": "carousel",
            "contents": [
            ]
        }

        max_num = len(result)
        if max_num > 10:
            max_num = 10

        for i in range(max_num):
            style1 = {
                "type": "bubble",
                "size": "giga",
                "body": {
                    "type": "box",
                    "layout": "vertical",
                    "contents": [
                    {
                        "type": "box",
                        "layout": "vertical",
                        "contents": [
                        {
                            "type": "image",
                            "url": "https://scdn.line-apps.com/n/channel_devcenter/img/flexsnapshot/clip/clip13.jpg",
                            "aspectMode": "cover",
                            "size": "full",
                            "aspectRatio": "50:100"
                        }
                        ]
                    },
                    {
                        "type": "box",
                        "layout": "vertical",
                        "contents": [
                        {
                            "type": "button",
                            "action": {
                            "type": "postback",
                            "label": "Âà™Èô§",
                            "data": "Âà™Èô§‰ΩúÂìÅÈõÜ#dye_man#"
                            },
                            "style": "primary",
                            "height": "md",
                            "offsetBottom": "10px"
                        }
                        ],
                        "offsetTop": "10px",
                        "paddingAll": "10px"
                    }
                    ],
                    "paddingAll": "10px"
                }
            }

            style2 = {
                "type": "bubble",
                "size": "giga",
                "body": {
                    "type": "box",
                    "layout": "vertical",
                    "contents": [
                    {
                        "type": "box",
                        "layout": "vertical",
                        "contents": [
                        {
                            "type": "image",
                            "url": "https://scdn.line-apps.com/n/channel_devcenter/img/flexsnapshot/clip/clip13.jpg",
                            "aspectMode": "cover",
                            "size": "full",
                            "aspectRatio": "100:100"
                        },
                        {
                            "type": "image",
                            "url": "https://scdn.line-apps.com/n/channel_devcenter/img/flexsnapshot/clip/clip13.jpg",
                            "aspectMode": "cover",
                            "size": "full",
                            "aspectRatio": "100:100"
                        }
                        ]
                    },
                    {
                        "type": "box",
                        "layout": "vertical",
                        "contents": [
                        {
                            "type": "button",
                            "action": {
                            "type": "postback",
                            "label": "Âà™Èô§",
                            "data": "Âà™Èô§‰ΩúÂìÅÈõÜ#dye_man#"
                            },
                            "style": "primary",
                            "height": "md",
                            "offsetBottom": "10px"
                        }
                        ],
                        "offsetTop": "10px",
                        "paddingAll": "10px"
                    }
                    ],
                    "paddingAll": "10px"
                }
            }

            style3 = {
                "type": "bubble",
                "size": "giga",
                "body": {
                    "type": "box",
                    "layout": "vertical",
                    "contents": [
                    {
                        "type": "box",
                        "layout": "vertical",
                        "contents": [
                        {
                            "type": "image",
                            "url": "https://scdn.line-apps.com/n/channel_devcenter/img/flexsnapshot/clip/clip13.jpg",
                            "aspectMode": "cover",
                            "size": "full"
                        }
                        ],
                        "cornerRadius": "200px"
                    },
                    {
                        "type": "box",
                        "layout": "horizontal",
                        "contents": [
                        {
                            "type": "image",
                            "url": "https://scdn.line-apps.com/n/channel_devcenter/img/flexsnapshot/clip/clip13.jpg",
                            "aspectMode": "cover",
                            "size": "5xl",
                            "aspectRatio": "150:300"
                        },
                        {
                            "type": "image",
                            "url": "https://scdn.line-apps.com/n/channel_devcenter/img/flexsnapshot/clip/clip13.jpg",
                            "aspectMode": "cover",
                            "size": "5xl",
                            "aspectRatio": "150:300"
                        }
                        ]
                    },
                    {
                        "type": "box",
                        "layout": "vertical",
                        "contents": [
                        {
                            "type": "button",
                            "action": {
                            "type": "postback",
                            "label": "Âà™Èô§",
                            "data": "Âà™Èô§‰ΩúÂìÅÈõÜ#dye_man#"
                            },
                            "style": "primary",
                            "height": "md",
                            "offsetBottom": "10px"
                        }
                        ],
                        "offsetTop": "10px",
                        "paddingAll": "10px"
                    }
                    ],
                    "paddingAll": "10px"
                }
            }

            if result[i][4]!= "":
                style3['body']['contents'][2]['contents'][0]['action']['data'] += str(result[i][0])
                style3['body']['contents'][0]['contents'][0]['url'] = result[i][2]
                style3['body']['contents'][1]['contents'][0]['url'] = result[i][3]
                style3['body']['contents'][1]['contents'][1]['url'] = result[i][4]

                content['contents'].append(style3)
            elif result[i][3] != "":
                style2['body']['contents'][1]['contents'][0]['action']['data'] += str(result[i][0])
                style2['body']['contents'][0]['contents'][0]['url'] = result[i][2]
                style2['body']['contents'][0]['contents'][1]['url'] = result[i][3]

                content['contents'].append(style2)

            else:
                style1['body']['contents'][1]['contents'][0]['action']['data'] += str(result[i][0])
                style1['body']['contents'][0]['contents'][0]['url'] = result[i][2]

                content['contents'].append(style1)

        line_bot_api.reply_message(event.reply_token,FlexSendMessage(alt_text="Áî∑ÁîüÊüìÈ´Æ‰ΩúÂìÅÈõÜ",contents=content
        ,quick_reply=QuickReply(
                items=[
                    QuickReplyButton(
                        action=PostbackAction(label="Áî∑ÁîüÂâ™È´Æ‰ΩúÂìÅÈõÜ"
                                            , data="Áî∑ÁîüÂâ™È´Æ‰ΩúÂìÅÈõÜ")
                    ),
                    QuickReplyButton(
                        action=PostbackAction(label="Áî∑ÁîüÊüìÈ´Æ‰ΩúÂìÅÈõÜ"
                                            , data="Áî∑ÁîüÊüìÈ´Æ‰ΩúÂìÅÈõÜ")
                    ),
                    QuickReplyButton(
                        action=PostbackAction(label="Áî∑ÁîüÁáôÈ´Æ‰ΩúÂìÅÈõÜ"
                                            , data="Áî∑ÁîüÁáôÈ´Æ‰ΩúÂìÅÈõÜ")
                    )
                ]
        )))

        return 0

    if event.postback.data == "Áî∑ÁîüÁáôÈ´Æ‰ΩúÂìÅÈõÜ":
        #DB set
        DATABASE_URL = os.environ['DATABASE_URL']
        conn = psycopg2.connect(DATABASE_URL, sslmode='require')
        cursor = conn.cursor()

        sql = "select * from perm_man order by id DESC"
        cursor.execute(sql)
        conn.commit()

        result = cursor.fetchall()
        if not result:
            line_bot_api.reply_message(event.reply_token, TextSendMessage("ÁõÆÂâçÊ≤íÊúâ‰ΩúÂìÅ"))
            return 0

        content = {
            "type": "carousel",
            "contents": [
            ]
        }

        max_num = len(result)
        if max_num > 10:
            max_num = 10

        for i in range(max_num):
            style1 = {
                "type": "bubble",
                "size": "giga",
                "body": {
                    "type": "box",
                    "layout": "vertical",
                    "contents": [
                    {
                        "type": "box",
                        "layout": "vertical",
                        "contents": [
                        {
                            "type": "image",
                            "url": "https://scdn.line-apps.com/n/channel_devcenter/img/flexsnapshot/clip/clip13.jpg",
                            "aspectMode": "cover",
                            "size": "full",
                            "aspectRatio": "50:100"
                        }
                        ]
                    },
                    {
                        "type": "box",
                        "layout": "vertical",
                        "contents": [
                        {
                            "type": "button",
                            "action": {
                            "type": "postback",
                            "label": "Âà™Èô§",
                            "data": "Âà™Èô§‰ΩúÂìÅÈõÜ#perm_man#"
                            },
                            "style": "primary",
                            "height": "md",
                            "offsetBottom": "10px"
                        }
                        ],
                        "offsetTop": "10px",
                        "paddingAll": "10px"
                    }
                    ],
                    "paddingAll": "10px"
                }
            }

            style2 = {
                "type": "bubble",
                "size": "giga",
                "body": {
                    "type": "box",
                    "layout": "vertical",
                    "contents": [
                    {
                        "type": "box",
                        "layout": "vertical",
                        "contents": [
                        {
                            "type": "image",
                            "url": "https://scdn.line-apps.com/n/channel_devcenter/img/flexsnapshot/clip/clip13.jpg",
                            "aspectMode": "cover",
                            "size": "full",
                            "aspectRatio": "100:100"
                        },
                        {
                            "type": "image",
                            "url": "https://scdn.line-apps.com/n/channel_devcenter/img/flexsnapshot/clip/clip13.jpg",
                            "aspectMode": "cover",
                            "size": "full",
                            "aspectRatio": "100:100"
                        }
                        ]
                    },
                    {
                        "type": "box",
                        "layout": "vertical",
                        "contents": [
                        {
                            "type": "button",
                            "action": {
                            "type": "postback",
                            "label": "Âà™Èô§",
                            "data": "Âà™Èô§‰ΩúÂìÅÈõÜ#perm_man#"
                            },
                            "style": "primary",
                            "height": "md",
                            "offsetBottom": "10px"
                        }
                        ],
                        "offsetTop": "10px",
                        "paddingAll": "10px"
                    }
                    ],
                    "paddingAll": "10px"
                }
            }

            style3 = {
                "type": "bubble",
                "size": "giga",
                "body": {
                    "type": "box",
                    "layout": "vertical",
                    "contents": [
                    {
                        "type": "box",
                        "layout": "vertical",
                        "contents": [
                        {
                            "type": "image",
                            "url": "https://scdn.line-apps.com/n/channel_devcenter/img/flexsnapshot/clip/clip13.jpg",
                            "aspectMode": "cover",
                            "size": "full"
                        }
                        ],
                        "cornerRadius": "200px"
                    },
                    {
                        "type": "box",
                        "layout": "horizontal",
                        "contents": [
                        {
                            "type": "image",
                            "url": "https://scdn.line-apps.com/n/channel_devcenter/img/flexsnapshot/clip/clip13.jpg",
                            "aspectMode": "cover",
                            "size": "5xl",
                            "aspectRatio": "150:300"
                        },
                        {
                            "type": "image",
                            "url": "https://scdn.line-apps.com/n/channel_devcenter/img/flexsnapshot/clip/clip13.jpg",
                            "aspectMode": "cover",
                            "size": "5xl",
                            "aspectRatio": "150:300"
                        }
                        ]
                    },
                    {
                        "type": "box",
                        "layout": "vertical",
                        "contents": [
                        {
                            "type": "button",
                            "action": {
                            "type": "postback",
                            "label": "Âà™Èô§",
                            "data": "Âà™Èô§‰ΩúÂìÅÈõÜ#perm_man#"
                            },
                            "style": "primary",
                            "height": "md",
                            "offsetBottom": "10px"
                        }
                        ],
                        "offsetTop": "10px",
                        "paddingAll": "10px"
                    }
                    ],
                    "paddingAll": "10px"
                }
            }

            if result[i][4]!= "":
                style3['body']['contents'][2]['contents'][0]['action']['data'] += str(result[i][0])
                style3['body']['contents'][0]['contents'][0]['url'] = result[i][2]
                style3['body']['contents'][1]['contents'][0]['url'] = result[i][3]
                style3['body']['contents'][1]['contents'][1]['url'] = result[i][4]

                content['contents'].append(style3)
            elif result[i][3] != "":
                style2['body']['contents'][1]['contents'][0]['action']['data'] += str(result[i][0])
                style2['body']['contents'][0]['contents'][0]['url'] = result[i][2]
                style2['body']['contents'][0]['contents'][1]['url'] = result[i][3]

                content['contents'].append(style2)

            else:
                style1['body']['contents'][1]['contents'][0]['action']['data'] += str(result[i][0])
                style1['body']['contents'][0]['contents'][0]['url'] = result[i][2]

                content['contents'].append(style1)

        line_bot_api.reply_message(event.reply_token,FlexSendMessage(alt_text="Áî∑ÁîüÁáôÈ´Æ‰ΩúÂìÅÈõÜ",contents=content
        ,quick_reply=QuickReply(
                items=[
                    QuickReplyButton(
                        action=PostbackAction(label="Áî∑ÁîüÂâ™È´Æ‰ΩúÂìÅÈõÜ"
                                            , data="Áî∑ÁîüÂâ™È´Æ‰ΩúÂìÅÈõÜ")
                    ),
                    QuickReplyButton(
                        action=PostbackAction(label="Áî∑ÁîüÊüìÈ´Æ‰ΩúÂìÅÈõÜ"
                                            , data="Áî∑ÁîüÊüìÈ´Æ‰ΩúÂìÅÈõÜ")
                    ),
                    QuickReplyButton(
                        action=PostbackAction(label="Áî∑ÁîüÁáôÈ´Æ‰ΩúÂìÅÈõÜ"
                                            , data="Áî∑ÁîüÁáôÈ´Æ‰ΩúÂìÅÈõÜ")
                    )
                ]
        )))

        return 0

    if event.postback.data == "Â•≥ÁîüÂâ™È´Æ‰ΩúÂìÅÈõÜ":
        #DB set
        DATABASE_URL = os.environ['DATABASE_URL']
        conn = psycopg2.connect(DATABASE_URL, sslmode='require')
        cursor = conn.cursor()

        sql = "select * from cut_male order by id DESC"
        cursor.execute(sql)
        conn.commit()

        result = cursor.fetchall()
        if not result:
            line_bot_api.reply_message(event.reply_token, TextSendMessage("ÁõÆÂâçÊ≤íÊúâ‰ΩúÂìÅ"))
            return 0

        content = {
            "type": "carousel",
            "contents": [
            ]
        }

        max_num = len(result)
        if max_num > 10:
            max_num = 10

        for i in range(max_num):
            style1 = {
                "type": "bubble",
                "size": "giga",
                "body": {
                    "type": "box",
                    "layout": "vertical",
                    "contents": [
                    {
                        "type": "box",
                        "layout": "vertical",
                        "contents": [
                        {
                            "type": "image",
                            "url": "https://scdn.line-apps.com/n/channel_devcenter/img/flexsnapshot/clip/clip13.jpg",
                            "aspectMode": "cover",
                            "size": "full",
                            "aspectRatio": "50:100"
                        }
                        ]
                    },
                    {
                        "type": "box",
                        "layout": "vertical",
                        "contents": [
                        {
                            "type": "button",
                            "action": {
                            "type": "postback",
                            "label": "Âà™Èô§",
                            "data": "Âà™Èô§‰ΩúÂìÅÈõÜ#cut_male#"
                            },
                            "style": "primary",
                            "height": "md",
                            "offsetBottom": "10px"
                        }
                        ],
                        "offsetTop": "10px",
                        "paddingAll": "10px"
                    }
                    ],
                    "paddingAll": "10px"
                }
            }

            style2 = {
                "type": "bubble",
                "size": "giga",
                "body": {
                    "type": "box",
                    "layout": "vertical",
                    "contents": [
                    {
                        "type": "box",
                        "layout": "vertical",
                        "contents": [
                        {
                            "type": "image",
                            "url": "https://scdn.line-apps.com/n/channel_devcenter/img/flexsnapshot/clip/clip13.jpg",
                            "aspectMode": "cover",
                            "size": "full",
                            "aspectRatio": "100:100"
                        },
                        {
                            "type": "image",
                            "url": "https://scdn.line-apps.com/n/channel_devcenter/img/flexsnapshot/clip/clip13.jpg",
                            "aspectMode": "cover",
                            "size": "full",
                            "aspectRatio": "100:100"
                        }
                        ]
                    },
                    {
                        "type": "box",
                        "layout": "vertical",
                        "contents": [
                        {
                            "type": "button",
                            "action": {
                            "type": "postback",
                            "label": "Âà™Èô§",
                            "data": "Âà™Èô§‰ΩúÂìÅÈõÜ#cut_male#"
                            },
                            "style": "primary",
                            "height": "md",
                            "offsetBottom": "10px"
                        }
                        ],
                        "offsetTop": "10px",
                        "paddingAll": "10px"
                    }
                    ],
                    "paddingAll": "10px"
                }
            }

            style3 = {
                "type": "bubble",
                "size": "giga",
                "body": {
                    "type": "box",
                    "layout": "vertical",
                    "contents": [
                    {
                        "type": "box",
                        "layout": "vertical",
                        "contents": [
                        {
                            "type": "image",
                            "url": "https://scdn.line-apps.com/n/channel_devcenter/img/flexsnapshot/clip/clip13.jpg",
                            "aspectMode": "cover",
                            "size": "full"
                        }
                        ],
                        "cornerRadius": "200px"
                    },
                    {
                        "type": "box",
                        "layout": "horizontal",
                        "contents": [
                        {
                            "type": "image",
                            "url": "https://scdn.line-apps.com/n/channel_devcenter/img/flexsnapshot/clip/clip13.jpg",
                            "aspectMode": "cover",
                            "size": "5xl",
                            "aspectRatio": "150:300"
                        },
                        {
                            "type": "image",
                            "url": "https://scdn.line-apps.com/n/channel_devcenter/img/flexsnapshot/clip/clip13.jpg",
                            "aspectMode": "cover",
                            "size": "5xl",
                            "aspectRatio": "150:300"
                        }
                        ]
                    },
                    {
                        "type": "box",
                        "layout": "vertical",
                        "contents": [
                        {
                            "type": "button",
                            "action": {
                            "type": "postback",
                            "label": "Âà™Èô§",
                            "data": "Âà™Èô§‰ΩúÂìÅÈõÜ#cut_male#"
                            },
                            "style": "primary",
                            "height": "md",
                            "offsetBottom": "10px"
                        }
                        ],
                        "offsetTop": "10px",
                        "paddingAll": "10px"
                    }
                    ],
                    "paddingAll": "10px"
                }
            }

            if result[i][4]!= "":
                style3['body']['contents'][2]['contents'][0]['action']['data'] += str(result[i][0])
                style3['body']['contents'][0]['contents'][0]['url'] = result[i][2]
                style3['body']['contents'][1]['contents'][0]['url'] = result[i][3]
                style3['body']['contents'][1]['contents'][1]['url'] = result[i][4]

                content['contents'].append(style3)
            elif result[i][3] != "":
                style2['body']['contents'][1]['contents'][0]['action']['data'] += str(result[i][0])
                style2['body']['contents'][0]['contents'][0]['url'] = result[i][2]
                style2['body']['contents'][0]['contents'][1]['url'] = result[i][3]

                content['contents'].append(style2)

            else:
                style1['body']['contents'][1]['contents'][0]['action']['data'] += str(result[i][0])
                style1['body']['contents'][0]['contents'][0]['url'] = result[i][2]

                content['contents'].append(style1)

        line_bot_api.reply_message(event.reply_token,FlexSendMessage(alt_text="Â•≥ÁîüÂâ™È´Æ‰ΩúÂìÅÈõÜ",contents=content
        ,quick_reply=QuickReply(
                items=[
                    QuickReplyButton(
                        action=PostbackAction(label="Â•≥ÁîüÂâ™È´Æ‰ΩúÂìÅÈõÜ"
                                            , data="Â•≥ÁîüÂâ™È´Æ‰ΩúÂìÅÈõÜ")
                    ),
                    QuickReplyButton(
                        action=PostbackAction(label="Â•≥ÁîüÊüìÈ´Æ‰ΩúÂìÅÈõÜ"
                                            , data="Â•≥ÁîüÊüìÈ´Æ‰ΩúÂìÅÈõÜ")
                    ),
                    QuickReplyButton(
                        action=PostbackAction(label="Â•≥ÁîüÁáôÈ´Æ‰ΩúÂìÅÈõÜ"
                                            , data="Â•≥ÁîüÁáôÈ´Æ‰ΩúÂìÅÈõÜ")
                    )
                ]
        )))

        return 0

    if event.postback.data == "Â•≥ÁîüÊüìÈ´Æ‰ΩúÂìÅÈõÜ":
        #DB set
        DATABASE_URL = os.environ['DATABASE_URL']
        conn = psycopg2.connect(DATABASE_URL, sslmode='require')
        cursor = conn.cursor()

        sql = "select * from dye_male order by id DESC"
        cursor.execute(sql)
        conn.commit()

        result = cursor.fetchall()
        if not result:
            line_bot_api.reply_message(event.reply_token, TextSendMessage("ÁõÆÂâçÊ≤íÊúâ‰ΩúÂìÅ"))
            return 0

        content = {
            "type": "carousel",
            "contents": [
            ]
        }

        max_num = len(result)
        if max_num > 10:
            max_num = 10

        for i in range(max_num):
            style1 = {
                "type": "bubble",
                "size": "giga",
                "body": {
                    "type": "box",
                    "layout": "vertical",
                    "contents": [
                    {
                        "type": "box",
                        "layout": "vertical",
                        "contents": [
                        {
                            "type": "image",
                            "url": "https://scdn.line-apps.com/n/channel_devcenter/img/flexsnapshot/clip/clip13.jpg",
                            "aspectMode": "cover",
                            "size": "full",
                            "aspectRatio": "50:100"
                        }
                        ]
                    },
                    {
                        "type": "box",
                        "layout": "vertical",
                        "contents": [
                        {
                            "type": "button",
                            "action": {
                            "type": "postback",
                            "label": "Âà™Èô§",
                            "data": "Âà™Èô§‰ΩúÂìÅÈõÜ#dye_male#"
                            },
                            "style": "primary",
                            "height": "md",
                            "offsetBottom": "10px"
                        }
                        ],
                        "offsetTop": "10px",
                        "paddingAll": "10px"
                    }
                    ],
                    "paddingAll": "10px"
                }
            }

            style2 = {
                "type": "bubble",
                "size": "giga",
                "body": {
                    "type": "box",
                    "layout": "vertical",
                    "contents": [
                    {
                        "type": "box",
                        "layout": "vertical",
                        "contents": [
                        {
                            "type": "image",
                            "url": "https://scdn.line-apps.com/n/channel_devcenter/img/flexsnapshot/clip/clip13.jpg",
                            "aspectMode": "cover",
                            "size": "full",
                            "aspectRatio": "100:100"
                        },
                        {
                            "type": "image",
                            "url": "https://scdn.line-apps.com/n/channel_devcenter/img/flexsnapshot/clip/clip13.jpg",
                            "aspectMode": "cover",
                            "size": "full",
                            "aspectRatio": "100:100"
                        }
                        ]
                    },
                    {
                        "type": "box",
                        "layout": "vertical",
                        "contents": [
                        {
                            "type": "button",
                            "action": {
                            "type": "postback",
                            "label": "Âà™Èô§",
                            "data": "Âà™Èô§‰ΩúÂìÅÈõÜ#dye_male#"
                            },
                            "style": "primary",
                            "height": "md",
                            "offsetBottom": "10px"
                        }
                        ],
                        "offsetTop": "10px",
                        "paddingAll": "10px"
                    }
                    ],
                    "paddingAll": "10px"
                }
            }

            style3 = {
                "type": "bubble",
                "size": "giga",
                "body": {
                    "type": "box",
                    "layout": "vertical",
                    "contents": [
                    {
                        "type": "box",
                        "layout": "vertical",
                        "contents": [
                        {
                            "type": "image",
                            "url": "https://scdn.line-apps.com/n/channel_devcenter/img/flexsnapshot/clip/clip13.jpg",
                            "aspectMode": "cover",
                            "size": "full"
                        }
                        ],
                        "cornerRadius": "200px"
                    },
                    {
                        "type": "box",
                        "layout": "horizontal",
                        "contents": [
                        {
                            "type": "image",
                            "url": "https://scdn.line-apps.com/n/channel_devcenter/img/flexsnapshot/clip/clip13.jpg",
                            "aspectMode": "cover",
                            "size": "5xl",
                            "aspectRatio": "150:300"
                        },
                        {
                            "type": "image",
                            "url": "https://scdn.line-apps.com/n/channel_devcenter/img/flexsnapshot/clip/clip13.jpg",
                            "aspectMode": "cover",
                            "size": "5xl",
                            "aspectRatio": "150:300"
                        }
                        ]
                    },
                    {
                        "type": "box",
                        "layout": "vertical",
                        "contents": [
                        {
                            "type": "button",
                            "action": {
                            "type": "postback",
                            "label": "Âà™Èô§",
                            "data": "Âà™Èô§‰ΩúÂìÅÈõÜ#dye_male#"
                            },
                            "style": "primary",
                            "height": "md",
                            "offsetBottom": "10px"
                        }
                        ],
                        "offsetTop": "10px",
                        "paddingAll": "10px"
                    }
                    ],
                    "paddingAll": "10px"
                }
            }

            if result[i][4]!= "":
                style3['body']['contents'][2]['contents'][0]['action']['data'] += str(result[i][0])
                style3['body']['contents'][0]['contents'][0]['url'] = result[i][2]
                style3['body']['contents'][1]['contents'][0]['url'] = result[i][3]
                style3['body']['contents'][1]['contents'][1]['url'] = result[i][4]

                content['contents'].append(style3)
            elif result[i][3] != "":
                style2['body']['contents'][1]['contents'][0]['action']['data'] += str(result[i][0])
                style2['body']['contents'][0]['contents'][0]['url'] = result[i][2]
                style2['body']['contents'][0]['contents'][1]['url'] = result[i][3]

                content['contents'].append(style2)

            else:
                style1['body']['contents'][1]['contents'][0]['action']['data'] += str(result[i][0])
                style1['body']['contents'][0]['contents'][0]['url'] = result[i][2]

                content['contents'].append(style1)

        line_bot_api.reply_message(event.reply_token,FlexSendMessage(alt_text="Â•≥ÁîüÊüìÈ´Æ‰ΩúÂìÅÈõÜ",contents=content
        ,quick_reply=QuickReply(
                items=[
                    QuickReplyButton(
                        action=PostbackAction(label="Â•≥ÁîüÂâ™È´Æ‰ΩúÂìÅÈõÜ"
                                            , data="Â•≥ÁîüÂâ™È´Æ‰ΩúÂìÅÈõÜ")
                    ),
                    QuickReplyButton(
                        action=PostbackAction(label="Â•≥ÁîüÊüìÈ´Æ‰ΩúÂìÅÈõÜ"
                                            , data="Â•≥ÁîüÊüìÈ´Æ‰ΩúÂìÅÈõÜ")
                    ),
                    QuickReplyButton(
                        action=PostbackAction(label="Â•≥ÁîüÁáôÈ´Æ‰ΩúÂìÅÈõÜ"
                                            , data="Â•≥ÁîüÁáôÈ´Æ‰ΩúÂìÅÈõÜ")
                    )
                ]
        )))

        return 0

    if event.postback.data == "Â•≥ÁîüÁáôÈ´Æ‰ΩúÂìÅÈõÜ":
        line_bot_api.reply_message(event.reply_token, TextSendMessage("ÈÅ∏Êìá„ÄéÈï∑È´Æ„Äè or „Äé‰∏≠Èï∑È´Æ„Äè or „ÄéÁü≠È´Æ„Äè"
            ,quick_reply=QuickReply(
                items=[
                    QuickReplyButton(
                        action=PostbackAction(label="Èï∑È´Æ"
                                            , data="Â•≥ÁîüÈï∑ÁáôÈ´Æ‰ΩúÂìÅÈõÜ")
                    ),
                    QuickReplyButton(
                        action=PostbackAction(label="‰∏≠Èï∑È´Æ"
                                            , data="Â•≥Áîü‰∏≠Èï∑ÁáôÈ´Æ‰ΩúÂìÅÈõÜ")
                    ),
                    QuickReplyButton(
                        action=PostbackAction(label="Áü≠È´Æ"
                                            , data="Â•≥ÁîüÁü≠ÁáôÈ´Æ‰ΩúÂìÅÈõÜ")
                    )
                ]
        )))

        return 0

    if event.postback.data == "Â•≥ÁîüÈï∑ÁáôÈ´Æ‰ΩúÂìÅÈõÜ":
        #DB set
        DATABASE_URL = os.environ['DATABASE_URL']
        conn = psycopg2.connect(DATABASE_URL, sslmode='require')
        cursor = conn.cursor()

        sql = "select * from perm_male where lenth = 'l' order by id DESC"
        cursor.execute(sql)
        conn.commit()

        result = cursor.fetchall()
        if not result:
            line_bot_api.reply_message(event.reply_token, TextSendMessage("ÁõÆÂâçÊ≤íÊúâ‰ΩúÂìÅ"))
            return 0

        content = {
            "type": "carousel",
            "contents": [
            ]
        }

        max_num = len(result)
        if max_num > 10:
            max_num = 10

        for i in range(max_num):
            style1 = {
                "type": "bubble",
                "size": "giga",
                "body": {
                    "type": "box",
                    "layout": "vertical",
                    "contents": [
                    {
                        "type": "box",
                        "layout": "vertical",
                        "contents": [
                        {
                            "type": "image",
                            "url": "https://scdn.line-apps.com/n/channel_devcenter/img/flexsnapshot/clip/clip13.jpg",
                            "aspectMode": "cover",
                            "size": "full",
                            "aspectRatio": "50:100"
                        }
                        ]
                    },
                    {
                        "type": "box",
                        "layout": "vertical",
                        "contents": [
                        {
                            "type": "button",
                            "action": {
                            "type": "postback",
                            "label": "Âà™Èô§",
                            "data": "Âà™Èô§‰ΩúÂìÅÈõÜ#perm_male#"
                            },
                            "style": "primary",
                            "height": "md",
                            "offsetBottom": "10px"
                        }
                        ],
                        "offsetTop": "10px",
                        "paddingAll": "10px"
                    }
                    ],
                    "paddingAll": "10px"
                }
            }

            style2 = {
                "type": "bubble",
                "size": "giga",
                "body": {
                    "type": "box",
                    "layout": "vertical",
                    "contents": [
                    {
                        "type": "box",
                        "layout": "vertical",
                        "contents": [
                        {
                            "type": "image",
                            "url": "https://scdn.line-apps.com/n/channel_devcenter/img/flexsnapshot/clip/clip13.jpg",
                            "aspectMode": "cover",
                            "size": "full",
                            "aspectRatio": "100:100"
                        },
                        {
                            "type": "image",
                            "url": "https://scdn.line-apps.com/n/channel_devcenter/img/flexsnapshot/clip/clip13.jpg",
                            "aspectMode": "cover",
                            "size": "full",
                            "aspectRatio": "100:100"
                        }
                        ]
                    },
                    {
                        "type": "box",
                        "layout": "vertical",
                        "contents": [
                        {
                            "type": "button",
                            "action": {
                            "type": "postback",
                            "label": "Âà™Èô§",
                            "data": "Âà™Èô§‰ΩúÂìÅÈõÜ#perm_male#"
                            },
                            "style": "primary",
                            "height": "md",
                            "offsetBottom": "10px"
                        }
                        ],
                        "offsetTop": "10px",
                        "paddingAll": "10px"
                    }
                    ],
                    "paddingAll": "10px"
                }
            }

            style3 = {
                "type": "bubble",
                "size": "giga",
                "body": {
                    "type": "box",
                    "layout": "vertical",
                    "contents": [
                    {
                        "type": "box",
                        "layout": "vertical",
                        "contents": [
                        {
                            "type": "image",
                            "url": "https://scdn.line-apps.com/n/channel_devcenter/img/flexsnapshot/clip/clip13.jpg",
                            "aspectMode": "cover",
                            "size": "full"
                        }
                        ],
                        "cornerRadius": "200px"
                    },
                    {
                        "type": "box",
                        "layout": "horizontal",
                        "contents": [
                        {
                            "type": "image",
                            "url": "https://scdn.line-apps.com/n/channel_devcenter/img/flexsnapshot/clip/clip13.jpg",
                            "aspectMode": "cover",
                            "size": "5xl",
                            "aspectRatio": "150:300"
                        },
                        {
                            "type": "image",
                            "url": "https://scdn.line-apps.com/n/channel_devcenter/img/flexsnapshot/clip/clip13.jpg",
                            "aspectMode": "cover",
                            "size": "5xl",
                            "aspectRatio": "150:300"
                        }
                        ]
                    },
                    {
                        "type": "box",
                        "layout": "vertical",
                        "contents": [
                        {
                            "type": "button",
                            "action": {
                            "type": "postback",
                            "label": "Âà™Èô§",
                            "data": "Âà™Èô§‰ΩúÂìÅÈõÜ#perm_male#"
                            },
                            "style": "primary",
                            "height": "md",
                            "offsetBottom": "10px"
                        }
                        ],
                        "offsetTop": "10px",
                        "paddingAll": "10px"
                    }
                    ],
                    "paddingAll": "10px"
                }
            }

            if result[i][4]!= "":
                style3['body']['contents'][2]['contents'][0]['action']['data'] += str(result[i][0])
                style3['body']['contents'][0]['contents'][0]['url'] = result[i][2]
                style3['body']['contents'][1]['contents'][0]['url'] = result[i][3]
                style3['body']['contents'][1]['contents'][1]['url'] = result[i][4]

                content['contents'].append(style3)
            elif result[i][3] != "":
                style2['body']['contents'][1]['contents'][0]['action']['data'] += str(result[i][0])
                style2['body']['contents'][0]['contents'][0]['url'] = result[i][2]
                style2['body']['contents'][0]['contents'][1]['url'] = result[i][3]

                content['contents'].append(style2)

            else:
                style1['body']['contents'][1]['contents'][0]['action']['data'] += str(result[i][0])
                style1['body']['contents'][0]['contents'][0]['url'] = result[i][2]

                content['contents'].append(style1)

        line_bot_api.reply_message(event.reply_token,FlexSendMessage(alt_text="Â•≥ÁîüÁáôÈ´Æ‰ΩúÂìÅÈõÜ",contents=content
        ,quick_reply=QuickReply(
                items=[
                    QuickReplyButton(
                        action=PostbackAction(label="Â•≥ÁîüÂâ™È´Æ‰ΩúÂìÅÈõÜ"
                                            , data="Â•≥ÁîüÂâ™È´Æ‰ΩúÂìÅÈõÜ")
                    ),
                    QuickReplyButton(
                        action=PostbackAction(label="Â•≥ÁîüÊüìÈ´Æ‰ΩúÂìÅÈõÜ"
                                            , data="Â•≥ÁîüÊüìÈ´Æ‰ΩúÂìÅÈõÜ")
                    ),
                    QuickReplyButton(
                        action=PostbackAction(label="Â•≥ÁîüÁáôÈ´Æ‰ΩúÂìÅÈõÜ"
                                            , data="Â•≥ÁîüÁáôÈ´Æ‰ΩúÂìÅÈõÜ")
                    )
                ]
        )))

        return 0

    if event.postback.data == "Â•≥Áîü‰∏≠Èï∑ÁáôÈ´Æ‰ΩúÂìÅÈõÜ":
        #DB set
        DATABASE_URL = os.environ['DATABASE_URL']
        conn = psycopg2.connect(DATABASE_URL, sslmode='require')
        cursor = conn.cursor()

        sql = "select * from perm_male where lenth = 'm' order by id DESC"
        cursor.execute(sql)
        conn.commit()

        result = cursor.fetchall()
        if not result:
            line_bot_api.reply_message(event.reply_token, TextSendMessage("ÁõÆÂâçÊ≤íÊúâ‰ΩúÂìÅ"))
            return 0

        content = {
            "type": "carousel",
            "contents": [
            ]
        }

        max_num = len(result)
        if max_num > 10:
            max_num = 10

        for i in range(max_num):
            style1 = {
                "type": "bubble",
                "size": "giga",
                "body": {
                    "type": "box",
                    "layout": "vertical",
                    "contents": [
                    {
                        "type": "box",
                        "layout": "vertical",
                        "contents": [
                        {
                            "type": "image",
                            "url": "https://scdn.line-apps.com/n/channel_devcenter/img/flexsnapshot/clip/clip13.jpg",
                            "aspectMode": "cover",
                            "size": "full",
                            "aspectRatio": "50:100"
                        }
                        ]
                    },
                    {
                        "type": "box",
                        "layout": "vertical",
                        "contents": [
                        {
                            "type": "button",
                            "action": {
                            "type": "postback",
                            "label": "Âà™Èô§",
                            "data": "Âà™Èô§‰ΩúÂìÅÈõÜ#perm_male#"
                            },
                            "style": "primary",
                            "height": "md",
                            "offsetBottom": "10px"
                        }
                        ],
                        "offsetTop": "10px",
                        "paddingAll": "10px"
                    }
                    ],
                    "paddingAll": "10px"
                }
            }

            style2 = {
                "type": "bubble",
                "size": "giga",
                "body": {
                    "type": "box",
                    "layout": "vertical",
                    "contents": [
                    {
                        "type": "box",
                        "layout": "vertical",
                        "contents": [
                        {
                            "type": "image",
                            "url": "https://scdn.line-apps.com/n/channel_devcenter/img/flexsnapshot/clip/clip13.jpg",
                            "aspectMode": "cover",
                            "size": "full",
                            "aspectRatio": "100:100"
                        },
                        {
                            "type": "image",
                            "url": "https://scdn.line-apps.com/n/channel_devcenter/img/flexsnapshot/clip/clip13.jpg",
                            "aspectMode": "cover",
                            "size": "full",
                            "aspectRatio": "100:100"
                        }
                        ]
                    },
                    {
                        "type": "box",
                        "layout": "vertical",
                        "contents": [
                        {
                            "type": "button",
                            "action": {
                            "type": "postback",
                            "label": "Âà™Èô§",
                            "data": "Âà™Èô§‰ΩúÂìÅÈõÜ#perm_male#"
                            },
                            "style": "primary",
                            "height": "md",
                            "offsetBottom": "10px"
                        }
                        ],
                        "offsetTop": "10px",
                        "paddingAll": "10px"
                    }
                    ],
                    "paddingAll": "10px"
                }
            }

            style3 = {
                "type": "bubble",
                "size": "giga",
                "body": {
                    "type": "box",
                    "layout": "vertical",
                    "contents": [
                    {
                        "type": "box",
                        "layout": "vertical",
                        "contents": [
                        {
                            "type": "image",
                            "url": "https://scdn.line-apps.com/n/channel_devcenter/img/flexsnapshot/clip/clip13.jpg",
                            "aspectMode": "cover",
                            "size": "full"
                        }
                        ],
                        "cornerRadius": "200px"
                    },
                    {
                        "type": "box",
                        "layout": "horizontal",
                        "contents": [
                        {
                            "type": "image",
                            "url": "https://scdn.line-apps.com/n/channel_devcenter/img/flexsnapshot/clip/clip13.jpg",
                            "aspectMode": "cover",
                            "size": "5xl",
                            "aspectRatio": "150:300"
                        },
                        {
                            "type": "image",
                            "url": "https://scdn.line-apps.com/n/channel_devcenter/img/flexsnapshot/clip/clip13.jpg",
                            "aspectMode": "cover",
                            "size": "5xl",
                            "aspectRatio": "150:300"
                        }
                        ]
                    },
                    {
                        "type": "box",
                        "layout": "vertical",
                        "contents": [
                        {
                            "type": "button",
                            "action": {
                            "type": "postback",
                            "label": "Âà™Èô§",
                            "data": "Âà™Èô§‰ΩúÂìÅÈõÜ#perm_male#"
                            },
                            "style": "primary",
                            "height": "md",
                            "offsetBottom": "10px"
                        }
                        ],
                        "offsetTop": "10px",
                        "paddingAll": "10px"
                    }
                    ],
                    "paddingAll": "10px"
                }
            }

            if result[i][4]!= "":
                style3['body']['contents'][2]['contents'][0]['action']['data'] += str(result[i][0])
                style3['body']['contents'][0]['contents'][0]['url'] = result[i][2]
                style3['body']['contents'][1]['contents'][0]['url'] = result[i][3]
                style3['body']['contents'][1]['contents'][1]['url'] = result[i][4]

                content['contents'].append(style3)
            elif result[i][3] != "":
                style2['body']['contents'][1]['contents'][0]['action']['data'] += str(result[i][0])
                style2['body']['contents'][0]['contents'][0]['url'] = result[i][2]
                style2['body']['contents'][0]['contents'][1]['url'] = result[i][3]

                content['contents'].append(style2)

            else:
                style1['body']['contents'][1]['contents'][0]['action']['data'] += str(result[i][0])
                style1['body']['contents'][0]['contents'][0]['url'] = result[i][2]

                content['contents'].append(style1)

        line_bot_api.reply_message(event.reply_token,FlexSendMessage(alt_text="Â•≥ÁîüÁáôÈ´Æ‰ΩúÂìÅÈõÜ",contents=content
        ,quick_reply=QuickReply(
                items=[
                    QuickReplyButton(
                        action=PostbackAction(label="Â•≥ÁîüÂâ™È´Æ‰ΩúÂìÅÈõÜ"
                                            , data="Â•≥ÁîüÂâ™È´Æ‰ΩúÂìÅÈõÜ")
                    ),
                    QuickReplyButton(
                        action=PostbackAction(label="Â•≥ÁîüÊüìÈ´Æ‰ΩúÂìÅÈõÜ"
                                            , data="Â•≥ÁîüÊüìÈ´Æ‰ΩúÂìÅÈõÜ")
                    ),
                    QuickReplyButton(
                        action=PostbackAction(label="Â•≥ÁîüÁáôÈ´Æ‰ΩúÂìÅÈõÜ"
                                            , data="Â•≥ÁîüÁáôÈ´Æ‰ΩúÂìÅÈõÜ")
                    )
                ]
        )))

        return 0

    if event.postback.data == "Â•≥ÁîüÁü≠ÁáôÈ´Æ‰ΩúÂìÅÈõÜ":
        #DB set
        DATABASE_URL = os.environ['DATABASE_URL']
        conn = psycopg2.connect(DATABASE_URL, sslmode='require')
        cursor = conn.cursor()

        sql = "select * from perm_male where lenth = 's' order by id DESC"
        cursor.execute(sql)
        conn.commit()

        result = cursor.fetchall()
        if not result:
            line_bot_api.reply_message(event.reply_token, TextSendMessage("ÁõÆÂâçÊ≤íÊúâ‰ΩúÂìÅ"))
            return 0

        content = {
            "type": "carousel",
            "contents": [
            ]
        }

        max_num = len(result)
        if max_num > 10:
            max_num = 10

        for i in range(max_num):
            style1 = {
                "type": "bubble",
                "size": "giga",
                "body": {
                    "type": "box",
                    "layout": "vertical",
                    "contents": [
                    {
                        "type": "box",
                        "layout": "vertical",
                        "contents": [
                        {
                            "type": "image",
                            "url": "https://scdn.line-apps.com/n/channel_devcenter/img/flexsnapshot/clip/clip13.jpg",
                            "aspectMode": "cover",
                            "size": "full",
                            "aspectRatio": "50:100"
                        }
                        ]
                    },
                    {
                        "type": "box",
                        "layout": "vertical",
                        "contents": [
                        {
                            "type": "button",
                            "action": {
                            "type": "postback",
                            "label": "Âà™Èô§",
                            "data": "Âà™Èô§‰ΩúÂìÅÈõÜ#perm_male#"
                            },
                            "style": "primary",
                            "height": "md",
                            "offsetBottom": "10px"
                        }
                        ],
                        "offsetTop": "10px",
                        "paddingAll": "10px"
                    }
                    ],
                    "paddingAll": "10px"
                }
            }

            style2 = {
                "type": "bubble",
                "size": "giga",
                "body": {
                    "type": "box",
                    "layout": "vertical",
                    "contents": [
                    {
                        "type": "box",
                        "layout": "vertical",
                        "contents": [
                        {
                            "type": "image",
                            "url": "https://scdn.line-apps.com/n/channel_devcenter/img/flexsnapshot/clip/clip13.jpg",
                            "aspectMode": "cover",
                            "size": "full",
                            "aspectRatio": "100:100"
                        },
                        {
                            "type": "image",
                            "url": "https://scdn.line-apps.com/n/channel_devcenter/img/flexsnapshot/clip/clip13.jpg",
                            "aspectMode": "cover",
                            "size": "full",
                            "aspectRatio": "100:100"
                        }
                        ]
                    },
                    {
                        "type": "box",
                        "layout": "vertical",
                        "contents": [
                        {
                            "type": "button",
                            "action": {
                            "type": "postback",
                            "label": "Âà™Èô§",
                            "data": "Âà™Èô§‰ΩúÂìÅÈõÜ#perm_male#"
                            },
                            "style": "primary",
                            "height": "md",
                            "offsetBottom": "10px"
                        }
                        ],
                        "offsetTop": "10px",
                        "paddingAll": "10px"
                    }
                    ],
                    "paddingAll": "10px"
                }
            }

            style3 = {
                "type": "bubble",
                "size": "giga",
                "body": {
                    "type": "box",
                    "layout": "vertical",
                    "contents": [
                    {
                        "type": "box",
                        "layout": "vertical",
                        "contents": [
                        {
                            "type": "image",
                            "url": "https://scdn.line-apps.com/n/channel_devcenter/img/flexsnapshot/clip/clip13.jpg",
                            "aspectMode": "cover",
                            "size": "full"
                        }
                        ],
                        "cornerRadius": "200px"
                    },
                    {
                        "type": "box",
                        "layout": "horizontal",
                        "contents": [
                        {
                            "type": "image",
                            "url": "https://scdn.line-apps.com/n/channel_devcenter/img/flexsnapshot/clip/clip13.jpg",
                            "aspectMode": "cover",
                            "size": "5xl",
                            "aspectRatio": "150:300"
                        },
                        {
                            "type": "image",
                            "url": "https://scdn.line-apps.com/n/channel_devcenter/img/flexsnapshot/clip/clip13.jpg",
                            "aspectMode": "cover",
                            "size": "5xl",
                            "aspectRatio": "150:300"
                        }
                        ]
                    },
                    {
                        "type": "box",
                        "layout": "vertical",
                        "contents": [
                        {
                            "type": "button",
                            "action": {
                            "type": "postback",
                            "label": "Âà™Èô§",
                            "data": "Âà™Èô§‰ΩúÂìÅÈõÜ#perm_male#"
                            },
                            "style": "primary",
                            "height": "md",
                            "offsetBottom": "10px"
                        }
                        ],
                        "offsetTop": "10px",
                        "paddingAll": "10px"
                    }
                    ],
                    "paddingAll": "10px"
                }
            }

            if result[i][4]!= "":
                style3['body']['contents'][2]['contents'][0]['action']['data'] += str(result[i][0])
                style3['body']['contents'][0]['contents'][0]['url'] = result[i][2]
                style3['body']['contents'][1]['contents'][0]['url'] = result[i][3]
                style3['body']['contents'][1]['contents'][1]['url'] = result[i][4]

                content['contents'].append(style3)
            elif result[i][3] != "":
                style2['body']['contents'][1]['contents'][0]['action']['data'] += str(result[i][0])
                style2['body']['contents'][0]['contents'][0]['url'] = result[i][2]
                style2['body']['contents'][0]['contents'][1]['url'] = result[i][3]

                content['contents'].append(style2)

            else:
                style1['body']['contents'][1]['contents'][0]['action']['data'] += str(result[i][0])
                style1['body']['contents'][0]['contents'][0]['url'] = result[i][2]

                content['contents'].append(style1)

        line_bot_api.reply_message(event.reply_token,FlexSendMessage(alt_text="Â•≥ÁîüÁáôÈ´Æ‰ΩúÂìÅÈõÜ",contents=content
        ,quick_reply=QuickReply(
                items=[
                    QuickReplyButton(
                        action=PostbackAction(label="Â•≥ÁîüÂâ™È´Æ‰ΩúÂìÅÈõÜ"
                                            , data="Â•≥ÁîüÂâ™È´Æ‰ΩúÂìÅÈõÜ")
                    ),
                    QuickReplyButton(
                        action=PostbackAction(label="Â•≥ÁîüÊüìÈ´Æ‰ΩúÂìÅÈõÜ"
                                            , data="Â•≥ÁîüÊüìÈ´Æ‰ΩúÂìÅÈõÜ")
                    ),
                    QuickReplyButton(
                        action=PostbackAction(label="Â•≥ÁîüÁáôÈ´Æ‰ΩúÂìÅÈõÜ"
                                            , data="Â•≥ÁîüÁáôÈ´Æ‰ΩúÂìÅÈõÜ")
                    )
                ]
        )))

        return 0

# guest look up
    if event.postback.data == "Êü•ÁúãÁî∑ÁîüÂâ™È´Æ‰ΩúÂìÅÈõÜ":
        #DB set
        DATABASE_URL = os.environ['DATABASE_URL']
        conn = psycopg2.connect(DATABASE_URL, sslmode='require')
        cursor = conn.cursor()

        sql = "select * from cut_man order by id DESC"
        cursor.execute(sql)
        conn.commit()

        result = cursor.fetchall()
        if not result:
            line_bot_api.reply_message(event.reply_token, TextSendMessage("ÁõÆÂâçÊ≤íÊúâ‰ΩúÂìÅ"))
            return 0

        content = {
            "type": "carousel",
            "contents": [
            ]
        }

        max_num = len(result)
        if max_num > 10:
            max_num = 10

        for i in range(max_num):
            style1 = {
                "type": "bubble",
                "size": "giga",
                "body": {
                    "type": "box",
                    "layout": "vertical",
                    "contents": [
                    {
                        "type": "box",
                        "layout": "vertical",
                        "contents": [
                        {
                            "type": "image",
                            "url": "https://scdn.line-apps.com/n/channel_devcenter/img/flexsnapshot/clip/clip13.jpg",
                            "aspectMode": "cover",
                            "size": "full",
                            "aspectRatio": "50:100"
                        }
                        ]
                    }
                    ],
                    "paddingAll": "10px"
                }
            }

            style2 = {
                "type": "bubble",
                "size": "giga",
                "body": {
                    "type": "box",
                    "layout": "vertical",
                    "contents": [
                    {
                        "type": "box",
                        "layout": "vertical",
                        "contents": [
                        {
                            "type": "image",
                            "url": "https://scdn.line-apps.com/n/channel_devcenter/img/flexsnapshot/clip/clip13.jpg",
                            "aspectMode": "cover",
                            "size": "full",
                            "aspectRatio": "100:100"
                        },
                        {
                            "type": "image",
                            "url": "https://scdn.line-apps.com/n/channel_devcenter/img/flexsnapshot/clip/clip13.jpg",
                            "aspectMode": "cover",
                            "size": "full",
                            "aspectRatio": "100:100"
                        }
                        ]
                    }
                    ],
                    "paddingAll": "10px"
                }
            }

            style3 = {
                "type": "bubble",
                "size": "giga",
                "body": {
                    "type": "box",
                    "layout": "vertical",
                    "contents": [
                    {
                        "type": "box",
                        "layout": "vertical",
                        "contents": [
                        {
                            "type": "image",
                            "url": "https://scdn.line-apps.com/n/channel_devcenter/img/flexsnapshot/clip/clip13.jpg",
                            "aspectMode": "cover",
                            "size": "full"
                        }
                        ],
                        "cornerRadius": "200px"
                    },
                    {
                        "type": "box",
                        "layout": "horizontal",
                        "contents": [
                        {
                            "type": "image",
                            "url": "https://scdn.line-apps.com/n/channel_devcenter/img/flexsnapshot/clip/clip13.jpg",
                            "aspectMode": "cover",
                            "size": "5xl",
                            "aspectRatio": "150:300"
                        },
                        {
                            "type": "image",
                            "url": "https://scdn.line-apps.com/n/channel_devcenter/img/flexsnapshot/clip/clip13.jpg",
                            "aspectMode": "cover",
                            "size": "5xl",
                            "aspectRatio": "150:300"
                        }
                        ]
                    }
                    ],
                    "paddingAll": "10px"
                }
            }

            if result[i][4]!= "":
                style3['body']['contents'][0]['contents'][0]['url'] = result[i][2]
                style3['body']['contents'][1]['contents'][0]['url'] = result[i][3]
                style3['body']['contents'][1]['contents'][1]['url'] = result[i][4]

                content['contents'].append(style3)
            elif result[i][3] != "":
                style2['body']['contents'][0]['contents'][0]['url'] = result[i][2]
                style2['body']['contents'][0]['contents'][1]['url'] = result[i][3]

                content['contents'].append(style2)

            else:
                style1['body']['contents'][0]['contents'][0]['url'] = result[i][2]

                content['contents'].append(style1)

        line_bot_api.reply_message(event.reply_token,FlexSendMessage(alt_text="Áî∑ÁîüÂâ™È´Æ‰ΩúÂìÅÈõÜ",contents=content
        ,quick_reply=QuickReply(
                items=[
                    QuickReplyButton(
                        action=PostbackAction(label="Áî∑ÁîüÂâ™È´Æ‰ΩúÂìÅÈõÜ"
                                            , data="Êü•ÁúãÁî∑ÁîüÂâ™È´Æ‰ΩúÂìÅÈõÜ")
                    ),
                    QuickReplyButton(
                        action=PostbackAction(label="Áî∑ÁîüÊüìÈ´Æ‰ΩúÂìÅÈõÜ"
                                            , data="Êü•ÁúãÁî∑ÁîüÊüìÈ´Æ‰ΩúÂìÅÈõÜ")
                    ),
                    QuickReplyButton(
                        action=PostbackAction(label="Áî∑ÁîüÁáôÈ´Æ‰ΩúÂìÅÈõÜ"
                                            , data="Êü•ÁúãÁî∑ÁîüÁáôÈ´Æ‰ΩúÂìÅÈõÜ")
                    )
                ]
        )))

        return 0


    if event.postback.data == "Êü•ÁúãÁî∑ÁîüÊüìÈ´Æ‰ΩúÂìÅÈõÜ":
        #DB set
        DATABASE_URL = os.environ['DATABASE_URL']
        conn = psycopg2.connect(DATABASE_URL, sslmode='require')
        cursor = conn.cursor()

        sql = "select * from dye_man order by id DESC"
        cursor.execute(sql)
        conn.commit()

        result = cursor.fetchall()
        if not result:
            line_bot_api.reply_message(event.reply_token, TextSendMessage("ÁõÆÂâçÊ≤íÊúâ‰ΩúÂìÅ"))
            return 0

        content = {
            "type": "carousel",
            "contents": [
            ]
        }

        max_num = len(result)
        if max_num > 10:
            max_num = 10

        for i in range(max_num):
            style1 = {
                "type": "bubble",
                "size": "giga",
                "body": {
                    "type": "box",
                    "layout": "vertical",
                    "contents": [
                    {
                        "type": "box",
                        "layout": "vertical",
                        "contents": [
                        {
                            "type": "image",
                            "url": "https://scdn.line-apps.com/n/channel_devcenter/img/flexsnapshot/clip/clip13.jpg",
                            "aspectMode": "cover",
                            "size": "full",
                            "aspectRatio": "50:100"
                        }
                        ]
                    }
                    ],
                    "paddingAll": "10px"
                }
            }

            style2 = {
                "type": "bubble",
                "size": "giga",
                "body": {
                    "type": "box",
                    "layout": "vertical",
                    "contents": [
                    {
                        "type": "box",
                        "layout": "vertical",
                        "contents": [
                        {
                            "type": "image",
                            "url": "https://scdn.line-apps.com/n/channel_devcenter/img/flexsnapshot/clip/clip13.jpg",
                            "aspectMode": "cover",
                            "size": "full",
                            "aspectRatio": "100:100"
                        },
                        {
                            "type": "image",
                            "url": "https://scdn.line-apps.com/n/channel_devcenter/img/flexsnapshot/clip/clip13.jpg",
                            "aspectMode": "cover",
                            "size": "full",
                            "aspectRatio": "100:100"
                        }
                        ]
                    }
                    ],
                    "paddingAll": "10px"
                }
            }

            style3 = {
                "type": "bubble",
                "size": "giga",
                "body": {
                    "type": "box",
                    "layout": "vertical",
                    "contents": [
                    {
                        "type": "box",
                        "layout": "vertical",
                        "contents": [
                        {
                            "type": "image",
                            "url": "https://scdn.line-apps.com/n/channel_devcenter/img/flexsnapshot/clip/clip13.jpg",
                            "aspectMode": "cover",
                            "size": "full"
                        }
                        ],
                        "cornerRadius": "200px"
                    },
                    {
                        "type": "box",
                        "layout": "horizontal",
                        "contents": [
                        {
                            "type": "image",
                            "url": "https://scdn.line-apps.com/n/channel_devcenter/img/flexsnapshot/clip/clip13.jpg",
                            "aspectMode": "cover",
                            "size": "5xl",
                            "aspectRatio": "150:300"
                        },
                        {
                            "type": "image",
                            "url": "https://scdn.line-apps.com/n/channel_devcenter/img/flexsnapshot/clip/clip13.jpg",
                            "aspectMode": "cover",
                            "size": "5xl",
                            "aspectRatio": "150:300"
                        }
                        ]
                    }
                    ],
                    "paddingAll": "10px"
                }
            }

            if result[i][4]!= "":
                style3['body']['contents'][0]['contents'][0]['url'] = result[i][2]
                style3['body']['contents'][1]['contents'][0]['url'] = result[i][3]
                style3['body']['contents'][1]['contents'][1]['url'] = result[i][4]

                content['contents'].append(style3)
            elif result[i][3] != "":
                style2['body']['contents'][0]['contents'][0]['url'] = result[i][2]
                style2['body']['contents'][0]['contents'][1]['url'] = result[i][3]

                content['contents'].append(style2)

            else:
                style1['body']['contents'][0]['contents'][0]['url'] = result[i][2]

                content['contents'].append(style1)

        line_bot_api.reply_message(event.reply_token,FlexSendMessage(alt_text="Áî∑ÁîüÊüìÈ´Æ‰ΩúÂìÅÈõÜ",contents=content
        ,quick_reply=QuickReply(
                items=[
                    QuickReplyButton(
                        action=PostbackAction(label="Áî∑ÁîüÂâ™È´Æ‰ΩúÂìÅÈõÜ"
                                            , data="Êü•ÁúãÁî∑ÁîüÂâ™È´Æ‰ΩúÂìÅÈõÜ")
                    ),
                    QuickReplyButton(
                        action=PostbackAction(label="Áî∑ÁîüÊüìÈ´Æ‰ΩúÂìÅÈõÜ"
                                            , data="Êü•ÁúãÁî∑ÁîüÊüìÈ´Æ‰ΩúÂìÅÈõÜ")
                    ),
                    QuickReplyButton(
                        action=PostbackAction(label="Áî∑ÁîüÁáôÈ´Æ‰ΩúÂìÅÈõÜ"
                                            , data="Êü•ÁúãÁî∑ÁîüÁáôÈ´Æ‰ΩúÂìÅÈõÜ")
                    )
                ]
        )))

        return 0

    if event.postback.data == "Êü•ÁúãÁî∑ÁîüÁáôÈ´Æ‰ΩúÂìÅÈõÜ":
        #DB set
        DATABASE_URL = os.environ['DATABASE_URL']
        conn = psycopg2.connect(DATABASE_URL, sslmode='require')
        cursor = conn.cursor()

        sql = "select * from perm_man order by id DESC"
        cursor.execute(sql)
        conn.commit()

        result = cursor.fetchall()
        if not result:
            line_bot_api.reply_message(event.reply_token, TextSendMessage("ÁõÆÂâçÊ≤íÊúâ‰ΩúÂìÅ"))
            return 0

        content = {
            "type": "carousel",
            "contents": [
            ]
        }

        max_num = len(result)
        if max_num > 10:
            max_num = 10

        for i in range(max_num):
            style1 = {
                "type": "bubble",
                "size": "giga",
                "body": {
                    "type": "box",
                    "layout": "vertical",
                    "contents": [
                    {
                        "type": "box",
                        "layout": "vertical",
                        "contents": [
                        {
                            "type": "image",
                            "url": "https://scdn.line-apps.com/n/channel_devcenter/img/flexsnapshot/clip/clip13.jpg",
                            "aspectMode": "cover",
                            "size": "full",
                            "aspectRatio": "50:100"
                        }
                        ]
                    }
                    ],
                    "paddingAll": "10px"
                }
            }

            style2 = {
                "type": "bubble",
                "size": "giga",
                "body": {
                    "type": "box",
                    "layout": "vertical",
                    "contents": [
                    {
                        "type": "box",
                        "layout": "vertical",
                        "contents": [
                        {
                            "type": "image",
                            "url": "https://scdn.line-apps.com/n/channel_devcenter/img/flexsnapshot/clip/clip13.jpg",
                            "aspectMode": "cover",
                            "size": "full",
                            "aspectRatio": "100:100"
                        },
                        {
                            "type": "image",
                            "url": "https://scdn.line-apps.com/n/channel_devcenter/img/flexsnapshot/clip/clip13.jpg",
                            "aspectMode": "cover",
                            "size": "full",
                            "aspectRatio": "100:100"
                        }
                        ]
                    }
                    ],
                    "paddingAll": "10px"
                }
            }

            style3 = {
                "type": "bubble",
                "size": "giga",
                "body": {
                    "type": "box",
                    "layout": "vertical",
                    "contents": [
                    {
                        "type": "box",
                        "layout": "vertical",
                        "contents": [
                        {
                            "type": "image",
                            "url": "https://scdn.line-apps.com/n/channel_devcenter/img/flexsnapshot/clip/clip13.jpg",
                            "aspectMode": "cover",
                            "size": "full"
                        }
                        ],
                        "cornerRadius": "200px"
                    },
                    {
                        "type": "box",
                        "layout": "horizontal",
                        "contents": [
                        {
                            "type": "image",
                            "url": "https://scdn.line-apps.com/n/channel_devcenter/img/flexsnapshot/clip/clip13.jpg",
                            "aspectMode": "cover",
                            "size": "5xl",
                            "aspectRatio": "150:300"
                        },
                        {
                            "type": "image",
                            "url": "https://scdn.line-apps.com/n/channel_devcenter/img/flexsnapshot/clip/clip13.jpg",
                            "aspectMode": "cover",
                            "size": "5xl",
                            "aspectRatio": "150:300"
                        }
                        ]
                    }
                    ],
                    "paddingAll": "10px"
                }
            }

            if result[i][4]!= "":
                style3['body']['contents'][0]['contents'][0]['url'] = result[i][2]
                style3['body']['contents'][1]['contents'][0]['url'] = result[i][3]
                style3['body']['contents'][1]['contents'][1]['url'] = result[i][4]

                content['contents'].append(style3)
            elif result[i][3] != "":
                style2['body']['contents'][0]['contents'][0]['url'] = result[i][2]
                style2['body']['contents'][0]['contents'][1]['url'] = result[i][3]

                content['contents'].append(style2)

            else:
                style1['body']['contents'][0]['contents'][0]['url'] = result[i][2]

                content['contents'].append(style1)

        line_bot_api.reply_message(event.reply_token,FlexSendMessage(alt_text="Áî∑ÁîüÁáôÈ´Æ‰ΩúÂìÅÈõÜ",contents=content
        ,quick_reply=QuickReply(
                items=[
                    QuickReplyButton(
                        action=PostbackAction(label="Áî∑ÁîüÂâ™È´Æ‰ΩúÂìÅÈõÜ"
                                            , data="Êü•ÁúãÁî∑ÁîüÂâ™È´Æ‰ΩúÂìÅÈõÜ")
                    ),
                    QuickReplyButton(
                        action=PostbackAction(label="Áî∑ÁîüÊüìÈ´Æ‰ΩúÂìÅÈõÜ"
                                            , data="Êü•ÁúãÁî∑ÁîüÊüìÈ´Æ‰ΩúÂìÅÈõÜ")
                    ),
                    QuickReplyButton(
                        action=PostbackAction(label="Áî∑ÁîüÁáôÈ´Æ‰ΩúÂìÅÈõÜ"
                                            , data="Êü•ÁúãÁî∑ÁîüÁáôÈ´Æ‰ΩúÂìÅÈõÜ")
                    )
                ]
        )))

        return 0

    if event.postback.data == "Êü•ÁúãÂ•≥ÁîüÂâ™È´Æ‰ΩúÂìÅÈõÜ":
        #DB set
        DATABASE_URL = os.environ['DATABASE_URL']
        conn = psycopg2.connect(DATABASE_URL, sslmode='require')
        cursor = conn.cursor()

        sql = "select * from cut_male order by id DESC"
        cursor.execute(sql)
        conn.commit()

        result = cursor.fetchall()
        if not result:
            line_bot_api.reply_message(event.reply_token, TextSendMessage("ÁõÆÂâçÊ≤íÊúâ‰ΩúÂìÅ"))
            return 0

        content = {
            "type": "carousel",
            "contents": [
            ]
        }

        max_num = len(result)
        if max_num > 10:
            max_num = 10

        for i in range(max_num):
            style1 = {
                "type": "bubble",
                "size": "giga",
                "body": {
                    "type": "box",
                    "layout": "vertical",
                    "contents": [
                    {
                        "type": "box",
                        "layout": "vertical",
                        "contents": [
                        {
                            "type": "image",
                            "url": "https://scdn.line-apps.com/n/channel_devcenter/img/flexsnapshot/clip/clip13.jpg",
                            "aspectMode": "cover",
                            "size": "full",
                            "aspectRatio": "50:100"
                        }
                        ]
                    }
                    ],
                    "paddingAll": "10px"
                }
            }

            style2 = {
                "type": "bubble",
                "size": "giga",
                "body": {
                    "type": "box",
                    "layout": "vertical",
                    "contents": [
                    {
                        "type": "box",
                        "layout": "vertical",
                        "contents": [
                        {
                            "type": "image",
                            "url": "https://scdn.line-apps.com/n/channel_devcenter/img/flexsnapshot/clip/clip13.jpg",
                            "aspectMode": "cover",
                            "size": "full",
                            "aspectRatio": "100:100"
                        },
                        {
                            "type": "image",
                            "url": "https://scdn.line-apps.com/n/channel_devcenter/img/flexsnapshot/clip/clip13.jpg",
                            "aspectMode": "cover",
                            "size": "full",
                            "aspectRatio": "100:100"
                        }
                        ]
                    }
                    ],
                    "paddingAll": "10px"
                }
            }

            style3 = {
                "type": "bubble",
                "size": "giga",
                "body": {
                    "type": "box",
                    "layout": "vertical",
                    "contents": [
                    {
                        "type": "box",
                        "layout": "vertical",
                        "contents": [
                        {
                            "type": "image",
                            "url": "https://scdn.line-apps.com/n/channel_devcenter/img/flexsnapshot/clip/clip13.jpg",
                            "aspectMode": "cover",
                            "size": "full"
                        }
                        ],
                        "cornerRadius": "200px"
                    },
                    {
                        "type": "box",
                        "layout": "horizontal",
                        "contents": [
                        {
                            "type": "image",
                            "url": "https://scdn.line-apps.com/n/channel_devcenter/img/flexsnapshot/clip/clip13.jpg",
                            "aspectMode": "cover",
                            "size": "5xl",
                            "aspectRatio": "150:300"
                        },
                        {
                            "type": "image",
                            "url": "https://scdn.line-apps.com/n/channel_devcenter/img/flexsnapshot/clip/clip13.jpg",
                            "aspectMode": "cover",
                            "size": "5xl",
                            "aspectRatio": "150:300"
                        }
                        ]
                    }
                    ],
                    "paddingAll": "10px"
                }
            }

            if result[i][4]!= "":
                style3['body']['contents'][0]['contents'][0]['url'] = result[i][2]
                style3['body']['contents'][1]['contents'][0]['url'] = result[i][3]
                style3['body']['contents'][1]['contents'][1]['url'] = result[i][4]

                content['contents'].append(style3)
            elif result[i][3] != "":
                style2['body']['contents'][0]['contents'][0]['url'] = result[i][2]
                style2['body']['contents'][0]['contents'][1]['url'] = result[i][3]

                content['contents'].append(style2)

            else:
                style1['body']['contents'][0]['contents'][0]['url'] = result[i][2]

                content['contents'].append(style1)

        line_bot_api.reply_message(event.reply_token,FlexSendMessage(alt_text="Â•≥ÁîüÂâ™È´Æ‰ΩúÂìÅÈõÜ",contents=content
        ,quick_reply=QuickReply(
                items=[
                    QuickReplyButton(
                        action=PostbackAction(label="Â•≥ÁîüÂâ™È´Æ‰ΩúÂìÅÈõÜ"
                                            , data="Êü•ÁúãÂ•≥ÁîüÂâ™È´Æ‰ΩúÂìÅÈõÜ")
                    ),
                    QuickReplyButton(
                        action=PostbackAction(label="Â•≥ÁîüÊüìÈ´Æ‰ΩúÂìÅÈõÜ"
                                            , data="Êü•ÁúãÂ•≥ÁîüÊüìÈ´Æ‰ΩúÂìÅÈõÜ")
                    ),
                    QuickReplyButton(
                        action=PostbackAction(label="Â•≥ÁîüÁáôÈ´Æ‰ΩúÂìÅÈõÜ"
                                            , data="Êü•ÁúãÂ•≥ÁîüÁáôÈ´Æ‰ΩúÂìÅÈõÜ")
                    )
                ]
        )))

        return 0

    if event.postback.data == "Êü•ÁúãÂ•≥ÁîüÊüìÈ´Æ‰ΩúÂìÅÈõÜ":
        #DB set
        DATABASE_URL = os.environ['DATABASE_URL']
        conn = psycopg2.connect(DATABASE_URL, sslmode='require')
        cursor = conn.cursor()

        sql = "select * from dye_male order by id DESC"
        cursor.execute(sql)
        conn.commit()

        result = cursor.fetchall()
        if not result:
            line_bot_api.reply_message(event.reply_token, TextSendMessage("ÁõÆÂâçÊ≤íÊúâ‰ΩúÂìÅ"))
            return 0

        content = {
            "type": "carousel",
            "contents": [
            ]
        }

        max_num = len(result)
        if max_num > 10:
            max_num = 10

        for i in range(max_num):
            style1 = {
                "type": "bubble",
                "size": "giga",
                "body": {
                    "type": "box",
                    "layout": "vertical",
                    "contents": [
                    {
                        "type": "box",
                        "layout": "vertical",
                        "contents": [
                        {
                            "type": "image",
                            "url": "https://scdn.line-apps.com/n/channel_devcenter/img/flexsnapshot/clip/clip13.jpg",
                            "aspectMode": "cover",
                            "size": "full",
                            "aspectRatio": "50:100"
                        }
                        ]
                    }
                    ],
                    "paddingAll": "10px"
                }
            }

            style2 = {
                "type": "bubble",
                "size": "giga",
                "body": {
                    "type": "box",
                    "layout": "vertical",
                    "contents": [
                    {
                        "type": "box",
                        "layout": "vertical",
                        "contents": [
                        {
                            "type": "image",
                            "url": "https://scdn.line-apps.com/n/channel_devcenter/img/flexsnapshot/clip/clip13.jpg",
                            "aspectMode": "cover",
                            "size": "full",
                            "aspectRatio": "100:100"
                        },
                        {
                            "type": "image",
                            "url": "https://scdn.line-apps.com/n/channel_devcenter/img/flexsnapshot/clip/clip13.jpg",
                            "aspectMode": "cover",
                            "size": "full",
                            "aspectRatio": "100:100"
                        }
                        ]
                    }
                    ],
                    "paddingAll": "10px"
                }
            }

            style3 = {
                "type": "bubble",
                "size": "giga",
                "body": {
                    "type": "box",
                    "layout": "vertical",
                    "contents": [
                    {
                        "type": "box",
                        "layout": "vertical",
                        "contents": [
                        {
                            "type": "image",
                            "url": "https://scdn.line-apps.com/n/channel_devcenter/img/flexsnapshot/clip/clip13.jpg",
                            "aspectMode": "cover",
                            "size": "full"
                        }
                        ],
                        "cornerRadius": "200px"
                    },
                    {
                        "type": "box",
                        "layout": "horizontal",
                        "contents": [
                        {
                            "type": "image",
                            "url": "https://scdn.line-apps.com/n/channel_devcenter/img/flexsnapshot/clip/clip13.jpg",
                            "aspectMode": "cover",
                            "size": "5xl",
                            "aspectRatio": "150:300"
                        },
                        {
                            "type": "image",
                            "url": "https://scdn.line-apps.com/n/channel_devcenter/img/flexsnapshot/clip/clip13.jpg",
                            "aspectMode": "cover",
                            "size": "5xl",
                            "aspectRatio": "150:300"
                        }
                        ]
                    }
                    ],
                    "paddingAll": "10px"
                }
            }

            if result[i][4]!= "":
                style3['body']['contents'][0]['contents'][0]['url'] = result[i][2]
                style3['body']['contents'][1]['contents'][0]['url'] = result[i][3]
                style3['body']['contents'][1]['contents'][1]['url'] = result[i][4]

                content['contents'].append(style3)
            elif result[i][3] != "":
                style2['body']['contents'][0]['contents'][0]['url'] = result[i][2]
                style2['body']['contents'][0]['contents'][1]['url'] = result[i][3]

                content['contents'].append(style2)

            else:
                style1['body']['contents'][0]['contents'][0]['url'] = result[i][2]

                content['contents'].append(style1)

        line_bot_api.reply_message(event.reply_token,FlexSendMessage(alt_text="Â•≥ÁîüÊüìÈ´Æ‰ΩúÂìÅÈõÜ",contents=content
        ,quick_reply=QuickReply(
                items=[
                    QuickReplyButton(
                        action=PostbackAction(label="Â•≥ÁîüÂâ™È´Æ‰ΩúÂìÅÈõÜ"
                                            , data="Êü•ÁúãÂ•≥ÁîüÂâ™È´Æ‰ΩúÂìÅÈõÜ")
                    ),
                    QuickReplyButton(
                        action=PostbackAction(label="Â•≥ÁîüÊüìÈ´Æ‰ΩúÂìÅÈõÜ"
                                            , data="Êü•ÁúãÂ•≥ÁîüÊüìÈ´Æ‰ΩúÂìÅÈõÜ")
                    ),
                    QuickReplyButton(
                        action=PostbackAction(label="Â•≥ÁîüÁáôÈ´Æ‰ΩúÂìÅÈõÜ"
                                            , data="Êü•ÁúãÂ•≥ÁîüÁáôÈ´Æ‰ΩúÂìÅÈõÜ")
                    )
                ]
        )))

        return 0

    if event.postback.data == "Êü•ÁúãÂ•≥ÁîüÁáôÈ´Æ‰ΩúÂìÅÈõÜ":
        line_bot_api.reply_message(event.reply_token, TextSendMessage("ÈÅ∏Êìá„ÄéÈï∑È´Æ„Äè or „Äé‰∏≠Èï∑È´Æ„Äè or „ÄéÁü≠È´Æ„Äè"
            ,quick_reply=QuickReply(
                items=[
                    QuickReplyButton(
                        action=PostbackAction(label="Èï∑È´Æ"
                                            , data="Êü•ÁúãÂ•≥ÁîüÈï∑ÁáôÈ´Æ‰ΩúÂìÅÈõÜ")
                    ),
                    QuickReplyButton(
                        action=PostbackAction(label="‰∏≠Èï∑È´Æ"
                                            , data="Êü•ÁúãÂ•≥Áîü‰∏≠Èï∑ÁáôÈ´Æ‰ΩúÂìÅÈõÜ")
                    ),
                    QuickReplyButton(
                        action=PostbackAction(label="Áü≠È´Æ"
                                            , data="Êü•ÁúãÂ•≥ÁîüÁü≠ÁáôÈ´Æ‰ΩúÂìÅÈõÜ")
                    )
                ]
        )))

        return 0

    if event.postback.data == "Êü•ÁúãÂ•≥ÁîüÈï∑ÁáôÈ´Æ‰ΩúÂìÅÈõÜ":
        #DB set
        DATABASE_URL = os.environ['DATABASE_URL']
        conn = psycopg2.connect(DATABASE_URL, sslmode='require')
        cursor = conn.cursor()

        sql = "select * from perm_male where lenth = 'l' order by id DESC"
        cursor.execute(sql)
        conn.commit()

        result = cursor.fetchall()
        if not result:
            line_bot_api.reply_message(event.reply_token, TextSendMessage("ÁõÆÂâçÊ≤íÊúâ‰ΩúÂìÅ"))
            return 0

        content = {
            "type": "carousel",
            "contents": [
            ]
        }

        max_num = len(result)
        if max_num > 10:
            max_num = 10

        for i in range(max_num):
            style1 = {
                "type": "bubble",
                "size": "giga",
                "body": {
                    "type": "box",
                    "layout": "vertical",
                    "contents": [
                    {
                        "type": "box",
                        "layout": "vertical",
                        "contents": [
                        {
                            "type": "image",
                            "url": "https://scdn.line-apps.com/n/channel_devcenter/img/flexsnapshot/clip/clip13.jpg",
                            "aspectMode": "cover",
                            "size": "full",
                            "aspectRatio": "50:100"
                        }
                        ]
                    }
                    ],
                    "paddingAll": "10px"
                }
            }

            style2 = {
                "type": "bubble",
                "size": "giga",
                "body": {
                    "type": "box",
                    "layout": "vertical",
                    "contents": [
                    {
                        "type": "box",
                        "layout": "vertical",
                        "contents": [
                        {
                            "type": "image",
                            "url": "https://scdn.line-apps.com/n/channel_devcenter/img/flexsnapshot/clip/clip13.jpg",
                            "aspectMode": "cover",
                            "size": "full",
                            "aspectRatio": "100:100"
                        },
                        {
                            "type": "image",
                            "url": "https://scdn.line-apps.com/n/channel_devcenter/img/flexsnapshot/clip/clip13.jpg",
                            "aspectMode": "cover",
                            "size": "full",
                            "aspectRatio": "100:100"
                        }
                        ]
                    }
                    ],
                    "paddingAll": "10px"
                }
            }

            style3 = {
                "type": "bubble",
                "size": "giga",
                "body": {
                    "type": "box",
                    "layout": "vertical",
                    "contents": [
                    {
                        "type": "box",
                        "layout": "vertical",
                        "contents": [
                        {
                            "type": "image",
                            "url": "https://scdn.line-apps.com/n/channel_devcenter/img/flexsnapshot/clip/clip13.jpg",
                            "aspectMode": "cover",
                            "size": "full"
                        }
                        ],
                        "cornerRadius": "200px"
                    },
                    {
                        "type": "box",
                        "layout": "horizontal",
                        "contents": [
                        {
                            "type": "image",
                            "url": "https://scdn.line-apps.com/n/channel_devcenter/img/flexsnapshot/clip/clip13.jpg",
                            "aspectMode": "cover",
                            "size": "5xl",
                            "aspectRatio": "150:300"
                        },
                        {
                            "type": "image",
                            "url": "https://scdn.line-apps.com/n/channel_devcenter/img/flexsnapshot/clip/clip13.jpg",
                            "aspectMode": "cover",
                            "size": "5xl",
                            "aspectRatio": "150:300"
                        }
                        ]
                    }
                    ],
                    "paddingAll": "10px"
                }
            }

            if result[i][4]!= "":
                style3['body']['contents'][0]['contents'][0]['url'] = result[i][2]
                style3['body']['contents'][1]['contents'][0]['url'] = result[i][3]
                style3['body']['contents'][1]['contents'][1]['url'] = result[i][4]

                content['contents'].append(style3)
            elif result[i][3] != "":
                style2['body']['contents'][0]['contents'][0]['url'] = result[i][2]
                style2['body']['contents'][0]['contents'][1]['url'] = result[i][3]

                content['contents'].append(style2)

            else:
                style1['body']['contents'][0]['contents'][0]['url'] = result[i][2]

                content['contents'].append(style1)

        line_bot_api.reply_message(event.reply_token,FlexSendMessage(alt_text="Â•≥ÁîüÁáôÈ´Æ‰ΩúÂìÅÈõÜ",contents=content
        ,quick_reply=QuickReply(
                items=[
                    QuickReplyButton(
                        action=PostbackAction(label="Â•≥ÁîüÂâ™È´Æ‰ΩúÂìÅÈõÜ"
                                            , data="Êü•ÁúãÂ•≥ÁîüÂâ™È´Æ‰ΩúÂìÅÈõÜ")
                    ),
                    QuickReplyButton(
                        action=PostbackAction(label="Â•≥ÁîüÊüìÈ´Æ‰ΩúÂìÅÈõÜ"
                                            , data="Êü•ÁúãÂ•≥ÁîüÊüìÈ´Æ‰ΩúÂìÅÈõÜ")
                    ),
                    QuickReplyButton(
                        action=PostbackAction(label="Â•≥ÁîüÁáôÈ´Æ‰ΩúÂìÅÈõÜ"
                                            , data="Êü•ÁúãÂ•≥ÁîüÁáôÈ´Æ‰ΩúÂìÅÈõÜ")
                    )
                ]
        )))

        return 0

    if event.postback.data == "Êü•ÁúãÂ•≥Áîü‰∏≠Èï∑ÁáôÈ´Æ‰ΩúÂìÅÈõÜ":
        #DB set
        DATABASE_URL = os.environ['DATABASE_URL']
        conn = psycopg2.connect(DATABASE_URL, sslmode='require')
        cursor = conn.cursor()

        sql = "select * from perm_male where lenth = 'm' order by id DESC"
        cursor.execute(sql)
        conn.commit()

        result = cursor.fetchall()
        if not result:
            line_bot_api.reply_message(event.reply_token, TextSendMessage("ÁõÆÂâçÊ≤íÊúâ‰ΩúÂìÅ"))
            return 0

        content = {
            "type": "carousel",
            "contents": [
            ]
        }

        max_num = len(result)
        if max_num > 10:
            max_num = 10

        for i in range(max_num):
            style1 = {
                "type": "bubble",
                "size": "giga",
                "body": {
                    "type": "box",
                    "layout": "vertical",
                    "contents": [
                    {
                        "type": "box",
                        "layout": "vertical",
                        "contents": [
                        {
                            "type": "image",
                            "url": "https://scdn.line-apps.com/n/channel_devcenter/img/flexsnapshot/clip/clip13.jpg",
                            "aspectMode": "cover",
                            "size": "full",
                            "aspectRatio": "50:100"
                        }
                        ]
                    }
                    ],
                    "paddingAll": "10px"
                }
            }

            style2 = {
                "type": "bubble",
                "size": "giga",
                "body": {
                    "type": "box",
                    "layout": "vertical",
                    "contents": [
                    {
                        "type": "box",
                        "layout": "vertical",
                        "contents": [
                        {
                            "type": "image",
                            "url": "https://scdn.line-apps.com/n/channel_devcenter/img/flexsnapshot/clip/clip13.jpg",
                            "aspectMode": "cover",
                            "size": "full",
                            "aspectRatio": "100:100"
                        },
                        {
                            "type": "image",
                            "url": "https://scdn.line-apps.com/n/channel_devcenter/img/flexsnapshot/clip/clip13.jpg",
                            "aspectMode": "cover",
                            "size": "full",
                            "aspectRatio": "100:100"
                        }
                        ]
                    }
                    ],
                    "paddingAll": "10px"
                }
            }

            style3 = {
                "type": "bubble",
                "size": "giga",
                "body": {
                    "type": "box",
                    "layout": "vertical",
                    "contents": [
                    {
                        "type": "box",
                        "layout": "vertical",
                        "contents": [
                        {
                            "type": "image",
                            "url": "https://scdn.line-apps.com/n/channel_devcenter/img/flexsnapshot/clip/clip13.jpg",
                            "aspectMode": "cover",
                            "size": "full"
                        }
                        ],
                        "cornerRadius": "200px"
                    },
                    {
                        "type": "box",
                        "layout": "horizontal",
                        "contents": [
                        {
                            "type": "image",
                            "url": "https://scdn.line-apps.com/n/channel_devcenter/img/flexsnapshot/clip/clip13.jpg",
                            "aspectMode": "cover",
                            "size": "5xl",
                            "aspectRatio": "150:300"
                        },
                        {
                            "type": "image",
                            "url": "https://scdn.line-apps.com/n/channel_devcenter/img/flexsnapshot/clip/clip13.jpg",
                            "aspectMode": "cover",
                            "size": "5xl",
                            "aspectRatio": "150:300"
                        }
                        ]
                    }
                    ],
                    "paddingAll": "10px"
                }
            }

            if result[i][4]!= "":
                style3['body']['contents'][0]['contents'][0]['url'] = result[i][2]
                style3['body']['contents'][1]['contents'][0]['url'] = result[i][3]
                style3['body']['contents'][1]['contents'][1]['url'] = result[i][4]

                content['contents'].append(style3)
            elif result[i][3] != "":
                style2['body']['contents'][0]['contents'][0]['url'] = result[i][2]
                style2['body']['contents'][0]['contents'][1]['url'] = result[i][3]

                content['contents'].append(style2)

            else:
                style1['body']['contents'][0]['contents'][0]['url'] = result[i][2]

                content['contents'].append(style1)

        line_bot_api.reply_message(event.reply_token,FlexSendMessage(alt_text="Â•≥ÁîüÁáôÈ´Æ‰ΩúÂìÅÈõÜ",contents=content
        ,quick_reply=QuickReply(
                items=[
                    QuickReplyButton(
                        action=PostbackAction(label="Â•≥ÁîüÂâ™È´Æ‰ΩúÂìÅÈõÜ"
                                            , data="Êü•ÁúãÂ•≥ÁîüÂâ™È´Æ‰ΩúÂìÅÈõÜ")
                    ),
                    QuickReplyButton(
                        action=PostbackAction(label="Â•≥ÁîüÊüìÈ´Æ‰ΩúÂìÅÈõÜ"
                                            , data="Êü•ÁúãÂ•≥ÁîüÊüìÈ´Æ‰ΩúÂìÅÈõÜ")
                    ),
                    QuickReplyButton(
                        action=PostbackAction(label="Â•≥ÁîüÁáôÈ´Æ‰ΩúÂìÅÈõÜ"
                                            , data="Êü•ÁúãÂ•≥ÁîüÁáôÈ´Æ‰ΩúÂìÅÈõÜ")
                    )
                ]
        )))

        return 0

    if event.postback.data == "Êü•ÁúãÂ•≥ÁîüÁü≠ÁáôÈ´Æ‰ΩúÂìÅÈõÜ":
        #DB set
        DATABASE_URL = os.environ['DATABASE_URL']
        conn = psycopg2.connect(DATABASE_URL, sslmode='require')
        cursor = conn.cursor()

        sql = "select * from perm_male where lenth = 's' order by id DESC"
        cursor.execute(sql)
        conn.commit()

        result = cursor.fetchall()
        if not result:
            line_bot_api.reply_message(event.reply_token, TextSendMessage("ÁõÆÂâçÊ≤íÊúâ‰ΩúÂìÅ"))
            return 0

        content = {
            "type": "carousel",
            "contents": [
            ]
        }

        max_num = len(result)
        if max_num > 10:
            max_num = 10

        for i in range(max_num):
            style1 = {
                "type": "bubble",
                "size": "giga",
                "body": {
                    "type": "box",
                    "layout": "vertical",
                    "contents": [
                    {
                        "type": "box",
                        "layout": "vertical",
                        "contents": [
                        {
                            "type": "image",
                            "url": "https://scdn.line-apps.com/n/channel_devcenter/img/flexsnapshot/clip/clip13.jpg",
                            "aspectMode": "cover",
                            "size": "full",
                            "aspectRatio": "50:100"
                        }
                        ]
                    }
                    ],
                    "paddingAll": "10px"
                }
            }

            style2 = {
                "type": "bubble",
                "size": "giga",
                "body": {
                    "type": "box",
                    "layout": "vertical",
                    "contents": [
                    {
                        "type": "box",
                        "layout": "vertical",
                        "contents": [
                        {
                            "type": "image",
                            "url": "https://scdn.line-apps.com/n/channel_devcenter/img/flexsnapshot/clip/clip13.jpg",
                            "aspectMode": "cover",
                            "size": "full",
                            "aspectRatio": "100:100"
                        },
                        {
                            "type": "image",
                            "url": "https://scdn.line-apps.com/n/channel_devcenter/img/flexsnapshot/clip/clip13.jpg",
                            "aspectMode": "cover",
                            "size": "full",
                            "aspectRatio": "100:100"
                        }
                        ]
                    }
                    ],
                    "paddingAll": "10px"
                }
            }

            style3 = {
                "type": "bubble",
                "size": "giga",
                "body": {
                    "type": "box",
                    "layout": "vertical",
                    "contents": [
                    {
                        "type": "box",
                        "layout": "vertical",
                        "contents": [
                        {
                            "type": "image",
                            "url": "https://scdn.line-apps.com/n/channel_devcenter/img/flexsnapshot/clip/clip13.jpg",
                            "aspectMode": "cover",
                            "size": "full"
                        }
                        ],
                        "cornerRadius": "200px"
                    },
                    {
                        "type": "box",
                        "layout": "horizontal",
                        "contents": [
                        {
                            "type": "image",
                            "url": "https://scdn.line-apps.com/n/channel_devcenter/img/flexsnapshot/clip/clip13.jpg",
                            "aspectMode": "cover",
                            "size": "5xl",
                            "aspectRatio": "150:300"
                        },
                        {
                            "type": "image",
                            "url": "https://scdn.line-apps.com/n/channel_devcenter/img/flexsnapshot/clip/clip13.jpg",
                            "aspectMode": "cover",
                            "size": "5xl",
                            "aspectRatio": "150:300"
                        }
                        ]
                    }
                    ],
                    "paddingAll": "10px"
                }
            }

            if result[i][4]!= "":
                style3['body']['contents'][0]['contents'][0]['url'] = result[i][2]
                style3['body']['contents'][1]['contents'][0]['url'] = result[i][3]
                style3['body']['contents'][1]['contents'][1]['url'] = result[i][4]

                content['contents'].append(style3)
            elif result[i][3] != "":
                style2['body']['contents'][0]['contents'][0]['url'] = result[i][2]
                style2['body']['contents'][0]['contents'][1]['url'] = result[i][3]

                content['contents'].append(style2)

            else:
                style1['body']['contents'][0]['contents'][0]['url'] = result[i][2]

                content['contents'].append(style1)

        line_bot_api.reply_message(event.reply_token,FlexSendMessage(alt_text="Â•≥ÁîüÁáôÈ´Æ‰ΩúÂìÅÈõÜ",contents=content
        ,quick_reply=QuickReply(
                items=[
                    QuickReplyButton(
                        action=PostbackAction(label="Â•≥ÁîüÂâ™È´Æ‰ΩúÂìÅÈõÜ"
                                            , data="Êü•ÁúãÂ•≥ÁîüÂâ™È´Æ‰ΩúÂìÅÈõÜ")
                    ),
                    QuickReplyButton(
                        action=PostbackAction(label="Â•≥ÁîüÊüìÈ´Æ‰ΩúÂìÅÈõÜ"
                                            , data="Êü•ÁúãÂ•≥ÁîüÊüìÈ´Æ‰ΩúÂìÅÈõÜ")
                    ),
                    QuickReplyButton(
                        action=PostbackAction(label="Â•≥ÁîüÁáôÈ´Æ‰ΩúÂìÅÈõÜ"
                                            , data="Êü•ÁúãÂ•≥ÁîüÁáôÈ´Æ‰ΩúÂìÅÈõÜ")
                    )
                ]
        )))

        return 0

    if "Âà™Èô§‰ΩúÂìÅÈõÜ" in event.postback.data :
        table = event.postback.data.split('#')[1]
        data_id = event.postback.data.split('#')[2]

        if table == 'news_table':
            line_bot_api.reply_message(event.reply_token , TextSendMessage('Â∑≤Âà™Èô§ÈÄôÂâáÊúÄÊñ∞Ê∂àÊÅØ„ÄÇ'))
        else:
            line_bot_api.reply_message(event.reply_token , TextSendMessage('Â∑≤Âà™Èô§Ë©≤‰ΩúÂìÅ„ÄÇ'))
        #DB set
        DATABASE_URL = os.environ['DATABASE_URL']
        conn = psycopg2.connect(DATABASE_URL, sslmode='require')
        cursor = conn.cursor()

        sql = "delete from " + table + " where id = '" + data_id + "'"
        cursor.execute(sql)
        conn.commit()

        return 0

    if event.postback.data == "ÁáüÊ•≠ÊôÇÈñìÁÆ°ÁêÜ":
        #DB set
        DATABASE_URL = os.environ['DATABASE_URL']
        conn = psycopg2.connect(DATABASE_URL, sslmode='require')
        cursor = conn.cursor()

        offday_status = ""
        offshop_status = ""

        sql = "select off_date from manager where userid = 'Ue9484510f6a0ba4d68b30d0c759949c9'"
        cursor.execute(sql)
        conn.commit()
        offday_status = cursor.fetchone()[0]


        sql = "select off_hour from manager where userid = 'Ue9484510f6a0ba4d68b30d0c759949c9'"
        cursor.execute(sql)
        conn.commit()
        offshop_status = cursor.fetchone()[0]

        if offshop_status != "":
            offshop_status = offshop_status.split(' ')[0] +" "+ offshop_status.split(' ')[1]

        print(offshop_status)

        line_bot_api.reply_message(event.reply_token, TextSendMessage("Ë¶ÅË®≠ÂÆö„Äé‰ºëÊÅØÊó•„Äè ÈÇÑÊòØ „Äé‰ªäÊó•‰∏ãÁè≠ÊôÇÈñì„Äè?\n"  +
                                "ÁõÆÂâçË®≠ÂÆöÁöÑ‰ºëÊÅØÊó• : \n" + str(offday_status) + "\n" + "ÁõÆÂâçË®≠ÂÆöÁöÑ‰∏ãÁè≠ÊôÇÈñì : \n" + offshop_status,
                                quick_reply=QuickReply(
                                    items=[
                                        QuickReplyButton(
                                            action=DatetimePickerAction(label="Ë®≠ÂÆö‰ºëÊÅØÊó•",
                                                                        data="Ë®≠ÂÆö‰ºëÊÅØÊó•",
                                                                        mode="date")
                                        ),
                                        QuickReplyButton(
                                            action=DatetimePickerAction(label="Ë®≠ÂÆö‰ªäÊó•‰∏ãÁè≠ÊôÇÈñì",
                                                                        data="Ë®≠ÂÆö‰∏ãÁè≠ÊôÇÈñì",
                                                                        mode="time",
                                                                        initial= "09:00",
                                                                        min = "09:00",
                                                                        max = "18:00" )
                                        ),
                                        QuickReplyButton(
                                            action=PostbackAction(label="ÂèñÊ∂à‰ºëÊÅØÊó•Ë®≠ÂÆö"
                                            , data="ÂèñÊ∂à‰ºëÊÅØÊó•Ë®≠ÂÆö")
                                        ),
                                        QuickReplyButton(
                                            action=PostbackAction(label="ÂèñÊ∂à‰∏ãÁè≠ÊôÇÈñìË®≠ÂÆö"
                                            , data="ÂèñÊ∂à‰∏ãÁè≠ÊôÇÈñìË®≠ÂÆö")
                                        )
                                    ]
                            )))


        return 0


    if event.postback.data == "Ë®≠ÂÆöÊúÄÊñ∞Ê∂àÊÅØ(‰∏ÄÂºµÂúñÁâá)":
        line_bot_api.reply_message(event.reply_token, TextSendMessage("Ë´ãÂÖà‰∏äÂÇ≥‰∏ÄÂºµÂúñÁâá"))
        # set manager status
        #DB setting
        DATABASE_URL = os.environ['DATABASE_URL']
        conn = psycopg2.connect(DATABASE_URL, sslmode='require')
        cursor = conn.cursor()

        #reset pic_num ,reset img_url
        sql = "update manager set status='',pic_num = '0' ,pic_1 = '', pic_2 = '', pic_3 = '' where userid = 'Ue9484510f6a0ba4d68b30d0c759949c9'"
        cursor.execute(sql)
        conn.commit()

        sql = "update manager set status = '‰∏äÂÇ≥‰∏ÄÂºµÂúñÁâá' where userid = 'Ue9484510f6a0ba4d68b30d0c759949c9'"
        cursor.execute(sql)
        conn.commit()

        cursor.close()
        conn.close()

        return 0

    if event.postback.data == "Ë®≠ÂÆöÊúÄÊñ∞Ê∂àÊÅØ(ÂÖ©ÂºµÂúñÁâá)":
        line_bot_api.reply_message(event.reply_token, TextSendMessage("Ë´ãÂÖà‰∏äÂÇ≥ÂÖ©ÂºµÂúñÁâá"))
        # set manager status
        #DB setting
        DATABASE_URL = os.environ['DATABASE_URL']
        conn = psycopg2.connect(DATABASE_URL, sslmode='require')
        cursor = conn.cursor()

        #init
        #reset pic_num ,reset img_url
        sql = "update manager set status='',pic_num = '0' ,pic_1 = '', pic_2 = '', pic_3 = '' where userid = 'Ue9484510f6a0ba4d68b30d0c759949c9'"
        cursor.execute(sql)
        conn.commit()

        sql = "update manager set status = '‰∏äÂÇ≥ÂÖ©ÂºµÂúñÁâá' where userid = 'Ue9484510f6a0ba4d68b30d0c759949c9'"
        cursor.execute(sql)
        conn.commit()

        cursor.close()
        conn.close()

    if event.postback.data == "ÊúÄÊñ∞Ê∂àÊÅØÁÆ°ÁêÜ":

        #DB set
        DATABASE_URL = os.environ['DATABASE_URL']
        conn = psycopg2.connect(DATABASE_URL, sslmode='require')
        cursor = conn.cursor()

        sql = "select * from news_table order by id DESC"
        cursor.execute(sql)
        conn.commit()
        result = cursor.fetchall()


        if not result:
            news_status = "ÁõÆÂâçÊ≤íÊúâÊúÄÊñ∞Ê∂àÊÅØÂî∑üòñ"

            line_bot_api.reply_message(event.reply_token, TextSendMessage(news_status
                ,quick_reply=QuickReply(
                    items=[
                        QuickReplyButton(
                            action=PostbackAction(label="Ë®≠ÂÆöÊúÄÊñ∞Ê∂àÊÅØ(ÊñáÂ≠ó + ‰∏ÄÂºµÂúñÁâá)"
                                                , data="Ë®≠ÂÆöÊúÄÊñ∞Ê∂àÊÅØ(‰∏ÄÂºµÂúñÁâá)")
                        ),
                        QuickReplyButton(
                            action=PostbackAction(label="Ë®≠ÂÆöÊúÄÊñ∞Ê∂àÊÅØ(ÊñáÂ≠ó + ÂÖ©ÂºµÂúñÁâá)"
                                                , data="Ë®≠ÂÆöÊúÄÊñ∞Ê∂àÊÅØ(ÂÖ©ÂºµÂúñÁâá)")
                        )
                    ]
            )))
            return 0

        else:
            content = {
            "type": "carousel",
            "contents": [
                ]
            }
            max_num = len(result)
            if max_num > 10:
                max_num = 10

            for i in range(max_num):
                style1 = {
                    "type": "bubble",
                    "size": "mega",
                    "body": {
                        "type": "box",
                        "layout": "vertical",
                        "contents": [
                        {
                            "type": "box",
                            "layout": "vertical",
                            "contents": [
                            {
                                "type": "image",
                                "url": "https://scdn.line-apps.com/n/channel_devcenter/img/flexsnapshot/clip/clip13.jpg",
                                "aspectMode": "cover",
                                "size": "full",
                                "aspectRatio": "50:100"
                            }
                            ],
                            "cornerRadius": "10px"
                        },
                        {
                            "type": "text",
                            "text": "ÊúÄÊñ∞Ê∂àÊÅØ",
                            "size": "lg",
                            "weight": "bold",
                            "offsetTop": "5px"
                        },
                        {
                            "type": "box",
                            "layout": "vertical",
                            "contents": [
                            {
                                "type": "button",
                                "action": {
                                "type": "postback",
                                "label": "Âà™Èô§",
                                "data": "Âà™Èô§‰ΩúÂìÅÈõÜ#news_table#"
                                },
                                "style": "primary",
                                "height": "md",
                                "offsetBottom": "10px"
                            }
                            ],
                            "offsetTop": "10px",
                            "paddingAll": "10px"
                        }
                        ],
                        "paddingAll": "10px"
                    }
                }

                style2 = {
                    "type": "bubble",
                    "size": "mega",
                    "body": {
                        "type": "box",
                        "layout": "vertical",
                        "contents": [
                        {
                            "type": "box",
                            "layout": "vertical",
                            "contents": [
                            {
                                "type": "image",
                                "url": "https://scdn.line-apps.com/n/channel_devcenter/img/flexsnapshot/clip/clip13.jpg",
                                "aspectMode": "cover",
                                "size": "full",
                                "aspectRatio": "100:100"
                            },
                            {
                                "type": "image",
                                "url": "https://scdn.line-apps.com/n/channel_devcenter/img/flexsnapshot/clip/clip13.jpg",
                                "aspectMode": "cover",
                                "size": "full",
                                "aspectRatio": "100:100"
                            }
                            ],
                            "cornerRadius": "10px"
                        },
                        {
                            "type": "text",
                            "text": "ÊúÄÊñ∞Ê∂àÊÅØ",
                            "size": "lg",
                            "weight": "bold",
                            "offsetTop": "5px"
                        },
                        {
                            "type": "box",
                            "layout": "vertical",
                            "contents": [
                            {
                                "type": "button",
                                "action": {
                                "type": "postback",
                                "label": "Âà™Èô§",
                                "data": "Âà™Èô§‰ΩúÂìÅÈõÜ#news_table#"
                                },
                                "style": "primary",
                                "height": "md",
                                "offsetBottom": "10px"
                            }
                            ],
                            "offsetTop": "10px",
                            "paddingAll": "10px"
                        }
                        ],
                        "paddingAll": "10px"
                    }
                }

                if result[i][3] != "":
                    style2['body']['contents'][2]['contents'][0]['action']['data'] += str(result[i][0])
                    style2['body']['contents'][0]['contents'][0]['url'] = result[i][2]
                    style2['body']['contents'][0]['contents'][1]['url'] = result[i][3]

                    # Â≠óÊï∏ÈÅéÂ§öÊôÇ
                    # 92~104
                    if len(result[i][1]) > 91:
                        for j in range(2,9):
                            text_block = {
                                "type": "text",
                                "text": "ÊúÄÊñ∞Ê∂àÊÅØ",
                                "size": "lg",
                                "weight": "bold",
                                "offsetTop": "3px"
                            }
                            style2['body']['contents'].insert(j,text_block)
                        style2['body']['contents'][1]['text'] = result[i][1][:13]
                        style2['body']['contents'][2]['text'] = result[i][1][13:26]
                        style2['body']['contents'][3]['text'] = result[i][1][26:39]
                        style2['body']['contents'][4]['text'] = result[i][1][39:52]
                        style2['body']['contents'][5]['text'] = result[i][1][52:65]
                        style2['body']['contents'][6]['text'] = result[i][1][65:78]
                        style2['body']['contents'][7]['text'] = result[i][1][78:91]
                        style2['body']['contents'][8]['text'] = result[i][1][91:]

                    # 78~91
                    elif len(result[i][1]) > 78:
                        for j in range(2,8):
                            text_block = {
                                "type": "text",
                                "text": "ÊúÄÊñ∞Ê∂àÊÅØ",
                                "size": "lg",
                                "weight": "bold",
                                "offsetTop": "3px"
                            }
                            style2['body']['contents'].insert(j,text_block)
                        style2['body']['contents'][1]['text'] = result[i][1][:13]
                        style2['body']['contents'][2]['text'] = result[i][1][13:26]
                        style2['body']['contents'][3]['text'] = result[i][1][26:39]
                        style2['body']['contents'][4]['text'] = result[i][1][39:52]
                        style2['body']['contents'][5]['text'] = result[i][1][52:65]
                        style2['body']['contents'][6]['text'] = result[i][1][65:78]
                        style2['body']['contents'][7]['text'] = result[i][1][78:]
                    elif len(result[i][1]) > 65:
                        for j in range(2,7):
                            text_block = {
                                "type": "text",
                                "text": "ÊúÄÊñ∞Ê∂àÊÅØ",
                                "size": "lg",
                                "weight": "bold",
                                "offsetTop": "3px"
                            }
                            style2['body']['contents'].insert(j,text_block)
                        print(i)
                        style2['body']['contents'][1]['text'] = result[i][1][:13]
                        style2['body']['contents'][2]['text'] = result[i][1][13:26]
                        style2['body']['contents'][3]['text'] = result[i][1][26:39]
                        style2['body']['contents'][4]['text'] = result[i][1][39:52]
                        style2['body']['contents'][5]['text'] = result[i][1][52:65]
                        style2['body']['contents'][6]['text'] = result[i][1][65:]
                    elif len(result[i][1]) > 52:
                        for j in range(2,6):
                            text_block = {
                                "type": "text",
                                "text": "ÊúÄÊñ∞Ê∂àÊÅØ",
                                "size": "lg",
                                "weight": "bold",
                                "offsetTop": "3px"
                            }
                            style2['body']['contents'].insert(j,text_block)
                        style2['body']['contents'][1]['text'] = result[i][1][:13]
                        style2['body']['contents'][2]['text'] = result[i][1][13:26]
                        style2['body']['contents'][3]['text'] = result[i][1][26:39]
                        style2['body']['contents'][4]['text'] = result[i][1][39:52]
                        style2['body']['contents'][5]['text'] = result[i][1][52:]
                    elif len(result[i][1]) > 39:
                        for j in range(2,5):
                            text_block = {
                                "type": "text",
                                "text": "ÊúÄÊñ∞Ê∂àÊÅØ",
                                "size": "lg",
                                "weight": "bold",
                                "offsetTop": "3px"
                            }
                            style2['body']['contents'].insert(j,text_block)
                        style2['body']['contents'][1]['text'] = result[i][1][:13]
                        style2['body']['contents'][2]['text'] = result[i][1][13:26]
                        style2['body']['contents'][3]['text'] = result[i][1][26:39]
                        style2['body']['contents'][4]['text'] = result[i][1][39:]
                    elif len(result[i][1]) > 26:
                        for j in range(2,4):
                            text_block = {
                                "type": "text",
                                "text": "ÊúÄÊñ∞Ê∂àÊÅØ",
                                "size": "lg",
                                "weight": "bold",
                                "offsetTop": "3px"
                            }
                            style2['body']['contents'].insert(j,text_block)
                        style2['body']['contents'][1]['text'] = result[i][1][:13]
                        style2['body']['contents'][2]['text'] = result[i][1][13:26]
                        style2['body']['contents'][3]['text'] = result[i][1][26:]
                    elif len(result[i][1]) > 13:
                        for j in range(2,3):
                            text_block = {
                                "type": "text",
                                "text": "ÊúÄÊñ∞Ê∂àÊÅØ",
                                "size": "lg",
                                "weight": "bold",
                                "offsetTop": "3px"
                            }
                            style2['body']['contents'].insert(j,text_block)
                        style2['body']['contents'][1]['text'] = result[i][1][:13]
                        style2['body']['contents'][2]['text'] = result[i][1][13:]
                    else:
                        style2['body']['contents'][1]['text'] = result[i][1]

                    content['contents'].append(style2)

                else:
                    style1['body']['contents'][2]['contents'][0]['action']['data'] += str(result[i][0])
                    style1['body']['contents'][0]['contents'][0]['url'] = result[i][2]
                    # Â≠óÊï∏ÈÅéÂ§öÊôÇ
                    # 92~104
                    if len(result[i][1]) > 91:
                        for j in range(2,9):
                            text_block = {
                                "type": "text",
                                "text": "ÊúÄÊñ∞Ê∂àÊÅØ",
                                "size": "lg",
                                "weight": "bold",
                                "offsetTop": "3px"
                            }
                            style1['body']['contents'].insert(j,text_block)
                        style1['body']['contents'][1]['text'] = result[i][1][:13]
                        style1['body']['contents'][2]['text'] = result[i][1][13:26]
                        style1['body']['contents'][3]['text'] = result[i][1][26:39]
                        style1['body']['contents'][4]['text'] = result[i][1][39:52]
                        style1['body']['contents'][5]['text'] = result[i][1][52:65]
                        style1['body']['contents'][6]['text'] = result[i][1][65:78]
                        style1['body']['contents'][7]['text'] = result[i][1][78:91]
                        style1['body']['contents'][8]['text'] = result[i][1][91:]

                    # 78~91
                    elif len(result[i][1]) > 78:
                        for j in range(2,8):
                            text_block = {
                                "type": "text",
                                "text": "ÊúÄÊñ∞Ê∂àÊÅØ",
                                "size": "lg",
                                "weight": "bold",
                                "offsetTop": "3px"
                            }
                            style1['body']['contents'].insert(j,text_block)
                        style1['body']['contents'][1]['text'] = result[i][1][:13]
                        style1['body']['contents'][2]['text'] = result[i][1][13:26]
                        style1['body']['contents'][3]['text'] = result[i][1][26:39]
                        style1['body']['contents'][4]['text'] = result[i][1][39:52]
                        style1['body']['contents'][5]['text'] = result[i][1][52:65]
                        style1['body']['contents'][6]['text'] = result[i][1][65:78]
                        style1['body']['contents'][7]['text'] = result[i][1][78:]
                    elif len(result[i][1]) > 65:
                        for j in range(2,7):
                            text_block = {
                                "type": "text",
                                "text": "ÊúÄÊñ∞Ê∂àÊÅØ",
                                "size": "lg",
                                "weight": "bold",
                                "offsetTop": "3px"
                            }
                            style1['body']['contents'].insert(j,text_block)
                        print(i)
                        style1['body']['contents'][1]['text'] = result[i][1][:13]
                        style1['body']['contents'][2]['text'] = result[i][1][13:26]
                        style1['body']['contents'][3]['text'] = result[i][1][26:39]
                        style1['body']['contents'][4]['text'] = result[i][1][39:52]
                        style1['body']['contents'][5]['text'] = result[i][1][52:65]
                        style1['body']['contents'][6]['text'] = result[i][1][65:]
                    elif len(result[i][1]) > 52:
                        for j in range(2,6):
                            text_block = {
                                "type": "text",
                                "text": "ÊúÄÊñ∞Ê∂àÊÅØ",
                                "size": "lg",
                                "weight": "bold",
                                "offsetTop": "3px"
                            }
                            style1['body']['contents'].insert(j,text_block)
                        style1['body']['contents'][1]['text'] = result[i][1][:13]
                        style1['body']['contents'][2]['text'] = result[i][1][13:26]
                        style1['body']['contents'][3]['text'] = result[i][1][26:39]
                        style1['body']['contents'][4]['text'] = result[i][1][39:52]
                        style1['body']['contents'][5]['text'] = result[i][1][52:]
                    elif len(result[i][1]) > 39:
                        for j in range(2,5):
                            text_block = {
                                "type": "text",
                                "text": "ÊúÄÊñ∞Ê∂àÊÅØ",
                                "size": "lg",
                                "weight": "bold",
                                "offsetTop": "3px"
                            }
                            style1['body']['contents'].insert(j,text_block)
                        style1['body']['contents'][1]['text'] = result[i][1][:13]
                        style1['body']['contents'][2]['text'] = result[i][1][13:26]
                        style1['body']['contents'][3]['text'] = result[i][1][26:39]
                        style1['body']['contents'][4]['text'] = result[i][1][39:]
                    elif len(result[i][1]) > 26:
                        for j in range(2,4):
                            text_block = {
                                "type": "text",
                                "text": "ÊúÄÊñ∞Ê∂àÊÅØ",
                                "size": "lg",
                                "weight": "bold",
                                "offsetTop": "3px"
                            }
                            style1['body']['contents'].insert(j,text_block)
                        style1['body']['contents'][1]['text'] = result[i][1][:13]
                        style1['body']['contents'][2]['text'] = result[i][1][13:26]
                        style1['body']['contents'][3]['text'] = result[i][1][26:]
                    elif len(result[i][1]) > 13:
                        for j in range(2,3):
                            text_block = {
                                "type": "text",
                                "text": "ÊúÄÊñ∞Ê∂àÊÅØ",
                                "size": "lg",
                                "weight": "bold",
                                "offsetTop": "3px"
                            }
                            style1['body']['contents'].insert(j,text_block)
                        style1['body']['contents'][1]['text'] = result[i][1][:13]
                        style1['body']['contents'][2]['text'] = result[i][1][13:]
                    else:
                        style1['body']['contents'][1]['text'] = result[i][1]

                    content['contents'].append(style1)

            line_bot_api.reply_message(event.reply_token, FlexSendMessage(alt_text="ÁõÆÂâçÊúÄÊñ∞Ê∂àÊÅØ",contents=content
                ,quick_reply=QuickReply(
                    items=[
                        QuickReplyButton(
                            action=PostbackAction(label="Ë®≠ÂÆöÊúÄÊñ∞Ê∂àÊÅØ(ÊñáÂ≠ó + ‰∏ÄÂºµÂúñÁâá)"
                                                , data="Ë®≠ÂÆöÊúÄÊñ∞Ê∂àÊÅØ(‰∏ÄÂºµÂúñÁâá)")
                        ),
                        QuickReplyButton(
                            action=PostbackAction(label="Ë®≠ÂÆöÊúÄÊñ∞Ê∂àÊÅØ(ÊñáÂ≠ó + ÂÖ©ÂºµÂúñÁâá)"
                                                , data="Ë®≠ÂÆöÊúÄÊñ∞Ê∂àÊÅØ(ÂÖ©ÂºµÂúñÁâá)")
                        )
                    ]
            )))

            return 0
        return 0

    if "‰ºëÊÅØ#" in event.postback.data:
        # DB set
        DATABASE_URL = os.environ['DATABASE_URL']
        conn = psycopg2.connect(DATABASE_URL, sslmode='require')
        cursor = conn.cursor()

        select_day = event.postback.data.split('#')[2]
        number = int(event.postback.data.split('#')[1])
        date_object = datetime.datetime.strptime(select_day, '%Y-%m-%d').date()
        rest_end = (date_object + datetime.timedelta(days=number)).strftime("%m-%d")
        rest_Day = ''
        for i in range(number+1):
            rest_day = (date_object + datetime.timedelta(days=i)).strftime("%m-%d")
            rest_Day += rest_day + " "

        line_bot_api.reply_message(event.reply_token, TextSendMessage("Â∑≤Ë®≠ÂÆö " + select_day[5:] + "~" + rest_end + "‰ºëÊÅØ"))

        # write to manager off_date:
        sql = "update manager set off_date = '" + rest_Day + "' where userid = 'Ue9484510f6a0ba4d68b30d0c759949c9'"
        cursor.execute(sql)
        conn.commit()

        cursor.close()
        conn.close()
        return 0

    if "Ë®≠ÂÆö‰ºëÊÅØÊó•" in  event.postback.data:
        select_day = str(event.postback.params['date'])
        select_day_without_year = select_day[5:]
        # str to dateobject
        date_object = datetime.datetime.strptime(select_day, '%Y-%m-%d').date()
        week_day = date_object.weekday()
        line_bot_api.reply_message(event.reply_token,TextSendMessage("Ë´ãÂïèË¶ÅÂæû " + select_day_without_year + " (" +week_day_dict[week_day] + ") ‰ºëÊÅØÂà∞Âì™‰∏ÄÂ§©Ôºü"
                                ,quick_reply=QuickReply(
                                    items=[
                                    QuickReplyButton(
                                        action=PostbackAction(label= (date_object + datetime.timedelta(days=0)).strftime("%m-%d") + " (" + week_day_dict[week_day] + ")"
                                                            , data="‰ºëÊÅØ#0#" + select_day)
                                    ),
                                    QuickReplyButton(
                                        action=PostbackAction(label=(date_object + datetime.timedelta(days=1)).strftime("%m-%d") + " (" + week_day_dict[(week_day + 1) % 7] + ")"
                                                            , data="‰ºëÊÅØ#1#" + select_day)
                                    ),
                                    QuickReplyButton(
                                        action=PostbackAction(label=(date_object + datetime.timedelta(days=2)).strftime("%m-%d") + " (" + week_day_dict[(week_day + 2) % 7] + ")"
                                                            , data="‰ºëÊÅØ#2#" + select_day)
                                    ),
                                    QuickReplyButton(
                                        action=PostbackAction(label=(date_object + datetime.timedelta(days=3)).strftime("%m-%d") + " (" + week_day_dict[(week_day + 3) % 7] + ")"
                                                            , data="‰ºëÊÅØ#3#" + select_day)
                                    ),
                                    QuickReplyButton(
                                        action=PostbackAction(label=(date_object + datetime.timedelta(days=4)).strftime("%m-%d") + " (" + week_day_dict[(week_day + 4) % 7] + ")"
                                                            , data="‰ºëÊÅØ#4#" + select_day)
                                    ),
                                    QuickReplyButton(
                                        action=PostbackAction(label=(date_object + datetime.timedelta(days=5)).strftime("%m-%d") + " (" + week_day_dict[(week_day + 5) % 7] + ")"
                                                            , data="‰ºëÊÅØ#5#" + select_day)
                                    ),
                                    QuickReplyButton(
                                        action=PostbackAction(label=(date_object + datetime.timedelta(days=6)).strftime("%m-%d") + " (" + week_day_dict[(week_day + 6) % 7] + ")"
                                                            , data="‰ºëÊÅØ#6#" + select_day)
                                    )
                                ]

                                )))
        return 0


    if "Ë®≠ÂÆö‰∏ãÁè≠ÊôÇÈñì" in event.postback.data:
        # Áï∂Êó•ÊôÇÈñì
        theTime = datetime.datetime.now().strftime(ISOTIMEFORMAT)
        today = str(theTime).split()[0]
        nowtime = str(theTime).split()[1]


        #DB set
        DATABASE_URL = os.environ['DATABASE_URL']
        conn = psycopg2.connect(DATABASE_URL, sslmode='require')
        cursor = conn.cursor()


        select_time = str(event.postback.params['time'])
        write_in_off_hour = today +" "+select_time + " "

        # ÊîπÊàêslot ÂΩ¢Âºè
        slot_time_start_index = slot_table.index(select_time[:2] + select_time[3:])

        tmp = ""
        for i in range(slot_time_start_index,len(slot_table)):
            tmp += "slot" + slot_table[i]+" "


        sql = "update manager set off_hour = '" + write_in_off_hour + tmp + "' where userid = 'Ue9484510f6a0ba4d68b30d0c759949c9'"
        cursor.execute(sql)
        conn.commit()
        line_bot_api.reply_message(event.reply_token,TextSendMessage("Â∑≤Ë®≠ÂÆö\n" +business_day[0] + "\n" + select_time + "‰∏ãÁè≠" ))



        cursor.close()
        conn.close()
        return 0

    if "ÂèñÊ∂à‰ºëÊÅØÊó•Ë®≠ÂÆö" in event.postback.data:
        line_bot_api.reply_message(event.reply_token , TextSendMessage('Â∑≤ÂèñÊ∂à‰ºëÊÅØÊó•Ë®≠ÂÆöÔºåÂ¶ÇÊûúË¶ÅÈáçÊñ∞Ë®≠ÂÆöÔºåË´ãÂÜçÊåâ‰∏ÄÊ¨° „ÄéÁáüÊ•≠ÊôÇÈñìÁÆ°ÁêÜ„Äè'))
        #DB set
        DATABASE_URL = os.environ['DATABASE_URL']
        conn = psycopg2.connect(DATABASE_URL, sslmode='require')
        cursor = conn.cursor()

        #Ê∏ÖÁ©∫manager status
        sql = "update manager set off_date = '' where userid = 'Ue9484510f6a0ba4d68b30d0c759949c9'"
        cursor.execute(sql)
        conn.commit()

        return 0

    if "ÂèñÊ∂à‰∏ãÁè≠ÊôÇÈñìË®≠ÂÆö" in event.postback.data:
        line_bot_api.reply_message(event.reply_token , TextSendMessage('Â∑≤ÂèñÊ∂à‰∏ãÁè≠ÊôÇÈñìË®≠ÂÆöÔºåÂ¶ÇÊûúË¶ÅÈáçÊñ∞Ë®≠ÂÆöÔºåË´ãÂÜçÊåâ‰∏ÄÊ¨° „ÄéÁáüÊ•≠ÊôÇÈñìÁÆ°ÁêÜ„Äè'))
        #DB set
        DATABASE_URL = os.environ['DATABASE_URL']
        conn = psycopg2.connect(DATABASE_URL, sslmode='require')
        cursor = conn.cursor()

        #Ê∏ÖÁ©∫manager status
        sql = "update manager set off_hour = '' where userid = 'Ue9484510f6a0ba4d68b30d0c759949c9'"
        cursor.execute(sql)
        conn.commit()

        return 0


    if "Á¢∫ÂÆöÂà™Èô§ÂÆ¢‰∫∫È†êÁ¥Ñ" in event.postback.data:
        line_bot_api.reply_message(event.reply_token , TextSendMessage ("Â∑≤Âà™Èô§"))

        #DB set
        DATABASE_URL = os.environ['DATABASE_URL']
        conn = psycopg2.connect(DATABASE_URL, sslmode='require')
        cursor = conn.cursor()

        if len(event.postback.data.split('#')) == 4: # Êúâuserid
            # Âà™Èô§ reservation
            userName = event.postback.data.split('#')[2].split('@')[0]
            userid = event.postback.data.split('#')[1]
            date = event.postback.data.split('#')[3].split('@')[0]
            time_interval = event.postback.data.split('#')[3].split('@')[1]
            start_index = time_table.index(time_interval.split('-')[0])
            end_index = time_table.index(time_interval.split('-')[1])

            # Èò≤Ê≠¢‰∫åÊ¨°Âà™Èô§
            for i in range(start_index,end_index):
                sql = "select slot" + slot_table[i] + " from reservation where reser_date = '" + date + "';"
                cursor.execute(sql)
                conn.commit()
                slot_result = cursor.fetchone()[0]
                name = slot_result.split('#')[0]
                if name != userName : # È†êÈò≤Âà™Èô§Âà•‰∫∫ÁöÑÈ†êÁ¥Ñ
                    return 0

            for i in range(start_index,end_index):
                sql = "update reservation set slot" + slot_table[i] + " = null where reser_date = '" + date + "';"
                cursor.execute(sql)
                conn.commit()

            # Âà™Èô§ has_reser
            # get has_reser
            sql = "select has_reser from reservation where reser_date = '" + date + "';"
            cursor.execute(sql)
            conn.commit()
            has_reser_list = cursor.fetchone()[0].split()
            do_not_write_in_has_reser = []
            for i in range(start_index,end_index):
                do_not_write_in_has_reser.append('slot'+slot_table[i])

            re_write_has_reser_list = []

            for i in has_reser_list:
                if i in do_not_write_in_has_reser:
                    continue
                else:
                    re_write_has_reser_list.append(i)


            re_write_has_reser = ""
            for i in re_write_has_reser_list:
                re_write_has_reser += i + " "

            sql = "update reservation set has_reser = '" + re_write_has_reser + "' where reser_date = '" + date + "';"
            cursor.execute(sql)
            conn.commit()

            # Âà™Èô§ customer
            # Êâæhas_reser 1~3
            # ÁÑ∂Âæå reser_num - 1
            sql = "select has_reser1 , has_reser2 , has_reser3 from customer where userid = '" + userid +"'"
            cursor.execute(sql)
            conn.commit()
            has_reser_result = cursor.fetchone()

            for i in range(3):
                compare_date = ''
                compare_time_interval = ''

                if has_reser_result[i] != '':
                    compare_date = has_reser_result[i].split('#')[0].split()[0]
                    compare_time_interval = has_reser_result[i].split('#')[1]
                if compare_date == date and compare_time_interval == time_interval:
                    sql = "update customer set has_reser" + str(i+1) + " = '' where userid = '" + userid + "';"
                    cursor.execute(sql)
                    conn.commit()

            # get reser_num
            sql = "select reser_num from customer where userid = '" +userid+"';"
            cursor.execute(sql)
            conn.commit()
            reser_num = int(cursor.fetchone()[0])

            # updata reser_num
            reser_num -= 1
            sql = "update customer set reser_num = '" + str(reser_num) + "' where userid = '" + userid +"';"
            cursor.execute(sql)
            conn.commit()

            cursor.close()
            conn.close()
            return 0
        else: # Ê≤íÊúâuserid
            # Âà™Èô§ reservation
            userName = event.postback.data.split('#')[1].split('@')[0]
            date = event.postback.data.split('#')[2].split('@')[0]
            time_interval = event.postback.data.split('#')[2].split('@')[1]
            start_index = time_table.index(time_interval.split('-')[0])
            end_index = time_table.index(time_interval.split('-')[1])

            # Èò≤Ê≠¢‰∫åÊ¨°Âà™Èô§
            for i in range(start_index,end_index):
                sql = "select slot" + slot_table[i] + " from reservation where reser_date = '" + date + "';"
                cursor.execute(sql)
                conn.commit()
                slot_result = cursor.fetchone()[0]
                name = slot_result.split('#')[0]
                if name != userName : # È†êÈò≤Âà™Èô§Âà•‰∫∫ÁöÑÈ†êÁ¥Ñ
                    return 0
            for i in range(start_index,end_index):
                sql = "update reservation set slot" + slot_table[i] + " = null where reser_date = '" + date + "';"
                cursor.execute(sql)
                conn.commit()
            # Âà™Èô§ has_reser
            # get has_reser
            sql = "select has_reser from reservation where reser_date = '" + date + "';"
            cursor.execute(sql)
            conn.commit()
            has_reser_list = cursor.fetchone()[0].split()
            do_not_write_in_has_reser = []
            for i in range(start_index,end_index):
                do_not_write_in_has_reser.append('slot'+slot_table[i])

            re_write_has_reser_list = []

            for i in has_reser_list:
                if i in do_not_write_in_has_reser:
                    continue
                else:
                    re_write_has_reser_list.append(i)


            re_write_has_reser = ""
            for i in re_write_has_reser_list:
                re_write_has_reser += i + " "

            sql = "update reservation set has_reser = '" + re_write_has_reser + "' where reser_date = '" + date + "';"
            cursor.execute(sql)
            conn.commit()


            cursor.close()
            conn.close()
            return 0

        return 0


    if "ÂèñÊ∂àÂà™Èô§ÂÆ¢‰∫∫È†êÁ¥Ñ" in event.postback.data:
        line_bot_api.reply_message(event.reply_token , TextSendMessage ("Â∑≤ÂèñÊ∂à"))
        return 0

    if "Âà™Èô§ÂÆ¢‰∫∫È†êÁ¥Ñ" in event.postback.data:
        line_bot_api.reply_message(event.reply_token,TextSendMessage("Á¢∫ÂÆöË¶ÅÂà™Èô§ÂóéÔºü"
                                ,quick_reply=QuickReply(
                                    items=[
                                    QuickReplyButton(
                                        action=PostbackAction(label="Á¢∫ÂÆöÂà™Èô§"
                                                            , data="Á¢∫ÂÆö" + event.postback.data)
                                    ),
                                    QuickReplyButton(
                                        action=PostbackAction(label="ÂèñÊ∂àÂà™Èô§"
                                                            , data="ÂèñÊ∂à" + event.postback.data)
                                    )
                                ]
                                )))

        return 0

    if event.postback.data == "Êú¨ÈÄ±È†êÁ¥Ñ":
        line_bot_api.reply_message(event.reply_token, TextSendMessage("Ë´ãÈÅ∏ÊìáÊó•Êúü"
            ,quick_reply=QuickReply(
                items=[
                    QuickReplyButton(
                        action=PostbackAction(label=business_day[0]
                                            , data="Êú¨ÈÄ±È†êÁ¥ÑÊü•Ë©¢#"+date_list[0])
                    ),
                    QuickReplyButton(
                        action=PostbackAction(label=business_day[1]
                                            , data="Êú¨ÈÄ±È†êÁ¥ÑÊü•Ë©¢#"+date_list[1])
                    ),
                    QuickReplyButton(
                        action=PostbackAction(label=business_day[2]
                                            , data="Êú¨ÈÄ±È†êÁ¥ÑÊü•Ë©¢#"+date_list[2])
                    ),
                    QuickReplyButton(
                        action=PostbackAction(label=business_day[3]
                                            , data="Êú¨ÈÄ±È†êÁ¥ÑÊü•Ë©¢#"+date_list[3])
                    ),
                    QuickReplyButton(
                        action=PostbackAction(label=business_day[4]
                                            , data="Êú¨ÈÄ±È†êÁ¥ÑÊü•Ë©¢#"+date_list[4])
                    ),
                    QuickReplyButton(
                        action=PostbackAction(label=business_day[5]
                                            , data="Êú¨ÈÄ±È†êÁ¥ÑÊü•Ë©¢#"+date_list[5])
                    ),
                    QuickReplyButton(
                        action=PostbackAction(label=business_day[6]
                                            , data="Êú¨ÈÄ±È†êÁ¥ÑÊü•Ë©¢#"+date_list[6])
                    )
                ]
        )))


        return 0


    if "Êú¨ÈÄ±È†êÁ¥ÑÊü•Ë©¢" in event.postback.data:
        # Áï∂Êó•ÊôÇÈñì
        theTime = datetime.datetime.now().strftime(ISOTIMEFORMAT)
        today = str(theTime).split()[0]
        nowtime = str(theTime).split()[1]

        # ÈÅ∏ÊìáÊôÇÈñì
        select_date = event.postback.data.split('#')[1]


        #DB set
        DATABASE_URL = os.environ['DATABASE_URL']
        conn = psycopg2.connect(DATABASE_URL, sslmode='require')
        cursor = conn.cursor()


        # DB if not exists insert into reservation table
        query = f"""select * from reservation where reser_date = (%s);"""
        cursor.execute(query,(select_date,))
        conn.commit()
        if cursor.fetchone() == None:
            table_columns = '(reser_date,has_reser)'
            postgres_insert_query = f"""INSERT INTO reservation {table_columns} VALUES (%s,%s);"""
            cursor.execute(postgres_insert_query, (select_date,''))
            conn.commit()

        #Á©∫ÁôΩË°®
        null_table = {
            "type": "bubble",
            "body": {
                "type": "box",
                "layout": "vertical",
                "contents": [
                {
                    "type": "box",
                    "layout": "vertical",
                    "contents": [
                    {
                        "type": "text",
                        "text": "04-30 (Âõõ)",
                        "align": "center",
                        "size": "xl",
                        "offsetTop": "5px",
                        "weight": "bold"
                    },
                    {
                        "type": "spacer"
                    }
                    ]
                }
                ],
                "spacing": "sm",
                "paddingAll": "13px"
            }
        }


        # Ë®≠ÂÆöÁ©∫ÁôΩË°®ÊôÇÈñì
        null_table['body']['contents'][0]['contents'][0]['text'] = business_day[date_list.index(select_date)]

        sql = "select * from reservation where reser_date = '" + select_date +"';"
        cursor.execute(sql)
        conn.commit()
        result = cursor.fetchone()
        start_flag = -1
        end_flag = -1
        for i in range(1,len(result)-1,1):
            #ÊâãÂãïÈ†êÁ¥Ñ
            manul_slot = {
                "type": "box",
                "layout": "horizontal",
                "contents": [
                {
                    "type": "text",
                    "text": "09:30-10:00",
                    "align": "center",
                    "size": "xl",
                    "gravity": "center"
                },
                {
                    "type": "button",
                    "action": {
                    "type": "postback",
                    "label": "Êñ∞Â¢û",
                    "data": "time 04-30 (Âõõ) 09:30-10:00 ÊâãÂãïÈ†êÁ¥Ñ"
                    },
                    "flex": 0,
                    "style": "primary"
                }
                ]
            }
            #ÂàÜÈöîÁ∑ö
            separator = {
                "type": "separator",
                "margin": "md"
            }
            # ÂÆ¢‰∫∫Ë®äÊÅØ
            customer_slot = {
                "type": "box",
                "layout": "vertical",
                "margin": "xxl",
                "spacing": "sm",
                "contents": [
                {
                    "type": "box",
                    "layout": "horizontal",
                    "contents": [
                    {
                        "type": "text",
                        "text": "09:30-10:00",
                        "align": "center",
                        "size": "xl",
                        "gravity": "center",
                        "weight": "bold",
                        "color": "#111111"
                    }
                    ]
                },
                {
                    "type": "box",
                    "layout": "horizontal",
                    "contents": [
                    {
                        "type": "text",
                        "text": "È†êÁ¥Ñ‰∫∫",
                        "size": "lg",
                        "color": "#111111",
                        "flex": 0
                    },
                    {
                        "type": "text",
                        "text": "Êûó‰ª≤ÊÅ©",
                        "size": "lg",
                        "color": "#111111",
                        "align": "end"
                    }
                    ]
                },
                {
                    "type": "box",
                    "layout": "horizontal",
                    "contents": [
                    {
                        "type": "text",
                        "text": "ÁæéÈ´ÆÈ†ÖÁõÆ",
                        "size": "lg",
                        "color": "#111111",
                        "flex": 0
                    },
                    {
                        "type": "text",
                        "text": "ÁáôÈ´Æ",
                        "size": "lg",
                        "color": "#111111",
                        "align": "end"
                    }
                    ]
                },
                {
                    "type": "button",
                    "action": {
                    "type": "postback",
                    "label": "Âà™Èô§",
                    "data": "hello"
                    },
                    "style": "primary"
                }
                ],
                "cornerRadius": "10px",
                "backgroundColor": "#FF7F50",
                "paddingAll": "10px"
            }
            if result[i] == None: #ÊâãÂãïÊñ∞Â¢û

                if select_date == today:
                    if nowtime < time_table[i-1] and time_table[i] < '18:30':
                        # ÁõÆÂâçÊôÇÈñìslot
                        now_slot = time_table[i-1] + "-" + time_table[i]
                        #ÊîπÊôÇÈñì
                        manul_slot['contents'][0]['text'] = now_slot
                        #Êîπ postback data
                        manul_slot['contents'][1]['action']['data'] = "time " + business_day[date_list.index(select_date)] + " " + now_slot + " " + "ÊâãÂãïÈ†êÁ¥Ñ"
                        null_table['body']['contents'].append(manul_slot)
                        null_table['body']['contents'].append(separator)
                else:
                    if time_table[i] < '18:30':
                        now_slot = time_table[i-1] + "-" + time_table[i]
                        #ÊîπÊôÇÈñì
                        manul_slot['contents'][0]['text'] = time_table[i-1] + "-" + time_table[i]
                        #Êîπ postback data
                        manul_slot['contents'][1]['action']['data'] = "time " + business_day[date_list.index(select_date)] +  " " + now_slot + " " + "ÊâãÂãïÈ†êÁ¥Ñ"
                        null_table['body']['contents'].append(manul_slot)
                        null_table['body']['contents'].append(separator)

            else:
                compare1 = result[i]
                compare2 = result[i+1]

                if start_flag == -1:
                        start_flag = i

                if compare1 != compare2 :
                    end_flag = i
                    if start_flag > -1 :
                        name = compare1.split('#')[0]
                        time = time_table[start_flag-1] + "-" +time_table[end_flag]
                        service = compare1.split('#')[1]
                        customer_slot['contents'][0]['contents'][0]['text'] = time
                        customer_slot['contents'][1]['contents'][1]['text'] = name
                        customer_slot['contents'][2]['contents'][1]['text'] = service
                        #Âà™Èô§ÊåâÈàï postback data
                        #manger Êñ∞Â¢ûÁöÑÊ≤íÊúâuserid
                        if len(compare1.split('#')) == 3:
                            userid = compare1.split('#')[2]
                            customer_slot['contents'][3]['action']['data'] = "Âà™Èô§ÂÆ¢‰∫∫È†êÁ¥Ñ"+ "#"+ userid  +"#"+ name + "@" + service + "#" + select_date + "@" + time
                        #ÂÆ¢‰∫∫Êñ∞Â¢ûÁöÑ Êúâ userid
                        if len(compare1.split('#')) == 2:
                            customer_slot['contents'][3]['action']['data'] = "Âà™Èô§ÂÆ¢‰∫∫È†êÁ¥Ñ"+ "#"+  name + "@" + service + "#" + select_date + "@" + time
                        null_table['body']['contents'].append(customer_slot)
                        null_table['body']['contents'].append(separator)

                        #ËôïÁêÜÂÆå Ê≠∏Èõ∂
                        start_flag = -1
                        end_flag = -1

        null_table['body']['contents'] = null_table['body']['contents'][:-1]
        null_table['body']['contents'].append(null_table['body']['contents'][0])

        line_bot_api.reply_message(event.reply_token,FlexSendMessage(alt_text="Êú¨ÈÄ±È†êÁ¥Ñ",contents=null_table
        ,quick_reply=QuickReply(
                items=[
                    QuickReplyButton(
                        action=PostbackAction(label=business_day[0]
                                            , data="Êú¨ÈÄ±È†êÁ¥ÑÊü•Ë©¢#"+date_list[0])
                    ),
                    QuickReplyButton(
                        action=PostbackAction(label=business_day[1]
                                            , data="Êú¨ÈÄ±È†êÁ¥ÑÊü•Ë©¢#"+date_list[1])
                    ),
                    QuickReplyButton(
                        action=PostbackAction(label=business_day[2]
                                            , data="Êú¨ÈÄ±È†êÁ¥ÑÊü•Ë©¢#"+date_list[2])
                    ),
                    QuickReplyButton(
                        action=PostbackAction(label=business_day[3]
                                            , data="Êú¨ÈÄ±È†êÁ¥ÑÊü•Ë©¢#"+date_list[3])
                    ),
                    QuickReplyButton(
                        action=PostbackAction(label=business_day[4]
                                            , data="Êú¨ÈÄ±È†êÁ¥ÑÊü•Ë©¢#"+date_list[4])
                    ),
                    QuickReplyButton(
                        action=PostbackAction(label=business_day[5]
                                            , data="Êú¨ÈÄ±È†êÁ¥ÑÊü•Ë©¢#"+date_list[5])
                    ),
                    QuickReplyButton(
                        action=PostbackAction(label=business_day[6]
                                            , data="Êú¨ÈÄ±È†êÁ¥ÑÊü•Ë©¢#"+date_list[6])
                    )
                ]
        )))




        return 0


    if event.postback.data == "‰ªäÊó•È†êÁ¥Ñ":
        # Áï∂Êó•ÊôÇÈñì
        theTime = datetime.datetime.now().strftime(ISOTIMEFORMAT)
        today = str(theTime).split()[0]
        nowtime = str(theTime).split()[1]

        # ÈÅ∏ÊìáÊôÇÈñì
        #‰πãÂæåË¶ÅÊîπÊàê event.postback.data
        select_date = today


        #DB set
        DATABASE_URL = os.environ['DATABASE_URL']
        conn = psycopg2.connect(DATABASE_URL, sslmode='require')
        cursor = conn.cursor()

        # DB if not exists insert into reservation table
        query = f"""select * from reservation where reser_date = (%s);"""
        cursor.execute(query,(select_date,))
        conn.commit()
        if cursor.fetchone() == None:
            table_columns = '(reser_date,has_reser)'
            postgres_insert_query = f"""INSERT INTO reservation {table_columns} VALUES (%s,%s);"""
            cursor.execute(postgres_insert_query, (select_date,''))
            conn.commit()

        #Á©∫ÁôΩË°®
        null_table = {
            "type": "bubble",
            "body": {
                "type": "box",
                "layout": "vertical",
                "contents": [
                {
                    "type": "box",
                    "layout": "vertical",
                    "contents": [
                    {
                        "type": "text",
                        "text": "04-30 (Âõõ)",
                        "align": "center",
                        "size": "xl",
                        "offsetTop": "5px",
                        "weight": "bold"
                    },
                    {
                        "type": "spacer"
                    }
                    ]
                }
                ],
                "spacing": "sm",
                "paddingAll": "13px"
            }
        }


        # Ë®≠ÂÆöÁ©∫ÁôΩË°®ÊôÇÈñì
        try:
            null_table['body']['contents'][0]['contents'][0]['text'] = business_day[date_list.index(select_date)]
        except ValueError:
            line_bot_api.reply_message(event.reply_token,TextSendMessage('‰ªäÂ§©ÊòØÁ¶ÆÊãúÂ§©ÔºåÊ≤íÊúâ‰∫∫È†êÁ¥Ñ„ÄÇ'))
            return 0


        sql = "select * from reservation where reser_date = '" + select_date +"';"
        cursor.execute(sql)
        conn.commit()
        result = cursor.fetchone()
        start_flag = -1
        end_flag = -1
        for i in range(1,len(result)-1,1):
            #ÊâãÂãïÈ†êÁ¥Ñ
            manul_slot = {
                "type": "box",
                "layout": "horizontal",
                "contents": [
                {
                    "type": "text",
                    "text": "09:30-10:00",
                    "align": "center",
                    "size": "xl",
                    "gravity": "center"
                },
                {
                    "type": "button",
                    "action": {
                    "type": "postback",
                    "label": "Êñ∞Â¢û",
                    "data": "time 04-30 (Âõõ) 09:30-10:00 ÊâãÂãïÈ†êÁ¥Ñ"
                    },
                    "flex": 0,
                    "style": "primary"
                }
                ]
            }
            #ÂàÜÈöîÁ∑ö
            separator = {
                "type": "separator",
                "margin": "md"
            }
            # ÂÆ¢‰∫∫Ë®äÊÅØ
            customer_slot = {
                "type": "box",
                "layout": "vertical",
                "margin": "xxl",
                "spacing": "sm",
                "contents": [
                {
                    "type": "box",
                    "layout": "horizontal",
                    "contents": [
                    {
                        "type": "text",
                        "text": "09:30-10:00",
                        "align": "center",
                        "size": "xl",
                        "gravity": "center",
                        "weight": "bold",
                        "color": "#111111"
                    }
                    ]
                },
                {
                    "type": "box",
                    "layout": "horizontal",
                    "contents": [
                    {
                        "type": "text",
                        "text": "È†êÁ¥Ñ‰∫∫",
                        "size": "lg",
                        "color": "#111111",
                        "flex": 0
                    },
                    {
                        "type": "text",
                        "text": "Êûó‰ª≤ÊÅ©",
                        "size": "lg",
                        "color": "#111111",
                        "align": "end"
                    }
                    ]
                },
                {
                    "type": "box",
                    "layout": "horizontal",
                    "contents": [
                    {
                        "type": "text",
                        "text": "ÁæéÈ´ÆÈ†ÖÁõÆ",
                        "size": "lg",
                        "color": "#111111",
                        "flex": 0
                    },
                    {
                        "type": "text",
                        "text": "ÁáôÈ´Æ",
                        "size": "lg",
                        "color": "#111111",
                        "align": "end"
                    }
                    ]
                },
                {
                    "type": "button",
                    "action": {
                    "type": "postback",
                    "label": "Âà™Èô§",
                    "data": "hello"
                    },
                    "style": "primary"
                }
                ],
                "cornerRadius": "10px",
                "backgroundColor": "#FF7F50",
                "paddingAll": "10px"
            }
            if result[i] == None: #ÊâãÂãïÊñ∞Â¢û

                if select_date == today:
                    if nowtime < time_table[i-1] and time_table[i] < '18:30':
                        # ÁõÆÂâçÊôÇÈñìslot
                        now_slot = time_table[i-1] + "-" + time_table[i]
                        #ÊîπÊôÇÈñì
                        manul_slot['contents'][0]['text'] = now_slot
                        #Êîπ postback data
                        manul_slot['contents'][1]['action']['data'] = "time " + business_day[date_list.index(today)] + " " + now_slot + " " + "ÊâãÂãïÈ†êÁ¥Ñ"
                        null_table['body']['contents'].append(manul_slot)
                        null_table['body']['contents'].append(separator)
                else:
                    #ÊîπÊôÇÈñì
                    manul_slot['contents'][0]['text'] = time_table[i-1] + "-" + time_table[i]
                    #Êîπ postback data
                    manul_slot['contents'][1]['action']['data'] = "time " + business_day[date_list.index(today)] +  " " + now_slot + " " + "ÊâãÂãïÈ†êÁ¥Ñ"
                    null_table['body']['contents'].append(manul_slot)
                    null_table['body']['contents'].append(separator)

            else: # ÂÆ¢‰∫∫Ë®äÊÅØ
                compare1 = result[i]
                compare2 = result[i+1]

                if start_flag == -1:
                        start_flag = i

                if compare1 != compare2 :
                    end_flag = i
                    if start_flag > -1 :
                        name = compare1.split('#')[0]
                        time = time_table[start_flag-1] + "-" +time_table[end_flag]
                        service = compare1.split('#')[1]
                        customer_slot['contents'][0]['contents'][0]['text'] = time
                        customer_slot['contents'][1]['contents'][1]['text'] = name
                        customer_slot['contents'][2]['contents'][1]['text'] = service
                        #Âà™Èô§ÊåâÈàï postback data
                        #manger Êñ∞Â¢ûÁöÑÊ≤íÊúâuserid
                        if len(compare1.split('#')) == 3:
                            userid = compare1.split('#')[2]
                            customer_slot['contents'][3]['action']['data'] = "Âà™Èô§ÂÆ¢‰∫∫È†êÁ¥Ñ"+ "#"+ userid  +"#"+ name + "@" + service + "#" + select_date + "@" + time
                        #ÂÆ¢‰∫∫Êñ∞Â¢ûÁöÑ Êúâ userid
                        if len(compare1.split('#')) == 2:
                            customer_slot['contents'][3]['action']['data'] = "Âà™Èô§ÂÆ¢‰∫∫È†êÁ¥Ñ"+ "#"+  name + "@" + service + "#" + select_date + "@" + time
                        null_table['body']['contents'].append(customer_slot)
                        null_table['body']['contents'].append(separator)

                        #ËôïÁêÜÂÆå Ê≠∏Èõ∂
                        start_flag = -1
                        end_flag = -1

        null_table['body']['contents'] = null_table['body']['contents'][:-1]
        null_table['body']['contents'].append(null_table['body']['contents'][0])

        line_bot_api.reply_message(event.reply_token,FlexSendMessage(alt_text="‰ªäÊó•È†êÁ¥Ñ",contents=null_table))



        return 0

    if "ÂèñÊ∂àÂà™Èô§" in event.postback.data:
        line_bot_api.reply_message(event.reply_token,TextSendMessage("Â∑≤ÂèñÊ∂à"))
        return 0

    if "Á¢∫ÂÆöÂà™Èô§" in event.postback.data:
        #TODO Âà™Èô§ÊåâÂÖ©Ê¨°ÁöÑÊÉÖÊ≥Å !!!!!!!! Ê≥®ÊÑè

        line_bot_api.reply_message(event.reply_token,TextSendMessage("Â∑≤Á∂ìÂπ´ÊÇ®Âà™Èô§È†êÁ¥ÑÔºÅ"))
        # Âà™Èô§customer / reservation
        # reser_num - 1

        #DB setting
        DATABASE_URL = os.environ['DATABASE_URL']
        conn = psycopg2.connect(DATABASE_URL, sslmode='require')
        cursor = conn.cursor()

        date = event.postback.data.split()[1]
        start_index = int(event.postback.data.split()[2])
        end_index = int(event.postback.data.split()[3])
        delete_index = int(event.postback.data.split()[4])
        # 05-08 14 16 1

        # Èò≤Ê≠¢ÊåâÂÖ©Ê¨° Âà™Èô§ ÈÄ†Êàê reser_num ‰∏ÄÁõ¥Ê∏õÂ∞ë
        # Ê™¢Êü• ÊòØÂê¶ slot0000 = userName and slot‰∏ä service = Êú¨Ë∫´ÁöÑservice

        for i in range(start_index,end_index):
            sql = "select slot" + slot_table[i] + " from reservation where reser_date = '" + date + "';"
            cursor.execute(sql)
            conn.commit()
            slot_result = cursor.fetchone()[0]
            name = slot_result.split('#')[0]
            if name != userName : # È†êÈò≤Âà™Èô§Âà•‰∫∫ÁöÑÈ†êÁ¥Ñ
                return 0



        # get reser_num
        sql = "select reser_num from customer where userid = '" +userID+"';"
        cursor.execute(sql)
        conn.commit()
        reser_num = int(cursor.fetchone()[0])

        # updata reser_num
        reser_num -= 1
        sql = "update customer set reser_num = '" + str(reser_num) + "' where userid = '" + userID +"';"
        cursor.execute(sql)
        conn.commit()

        # delete customer data
        sql = "update customer set has_reser" + str(delete_index) + " = '' where userid = '" + userID +"';"
        cursor.execute(sql)
        conn.commit()

        # delete reservation data
        # set slot0000 = '' and remove data frmo has_reser
        for i in range(start_index,end_index):
            sql = "update reservation set slot" + slot_table[i] + " = null where reser_date = '" + date + "';"
            cursor.execute(sql)
            conn.commit()

        # get has_reser
        sql = "select has_reser from reservation where reser_date = '" + date + "';"
        cursor.execute(sql)
        conn.commit()
        has_reser_list = cursor.fetchone()[0].split()
        do_not_write_in_has_reser = []
        for i in range(start_index,end_index):
            do_not_write_in_has_reser.append('slot'+slot_table[i])

        re_write_has_reser_list = []

        for i in has_reser_list:
            if i in do_not_write_in_has_reser:
                continue
            else:
                re_write_has_reser_list.append(i)


        re_write_has_reser = ""
        for i in re_write_has_reser_list:
            re_write_has_reser += i + " "

        sql = "update reservation set has_reser = '" + re_write_has_reser + "' where reser_date = '" + date + "';"
        cursor.execute(sql)
        conn.commit()


        cursor.close()
        conn.close()


        # ÈÄöÁü•manager
        notify_mamanger_flex = {
            "type": "bubble",
            "body": {
                "type": "box",
                "layout": "vertical",
                "contents": [
                {
                    "type": "text",
                    "text": "ÂèñÊ∂àÈ†êÁ¥ÑË®äÊÅØ",
                    "weight": "bold",
                    "color": "#1DB446",
                    "size": "xl",
                    "gravity": "center",
                    "align": "center"
                },
                {
                    "type": "separator",
                    "margin": "lg"
                },
                {
                    "type": "box",
                    "layout": "vertical",
                    "margin": "xxl",
                    "spacing": "sm",
                    "contents": [
                    {
                        "type": "box",
                        "layout": "horizontal",
                        "contents": [
                        {
                            "type": "text",
                            "text": "ÂèñÊ∂àÈ†êÁ¥Ñ‰∫∫",
                            "size": "lg",
                            "color": "#555555",
                            "flex": 0
                        },
                        {
                            "type": "text",
                            "text": userName,
                            "size": "lg",
                            "color": "#111111",
                            "align": "end"
                        }
                        ]
                    },
                    {
                        "type": "box",
                        "layout": "horizontal",
                        "contents": [
                        {
                            "type": "text",
                            "text": "ÂèñÊ∂àÊó•Êúü",
                            "size": "lg",
                            "color": "#555555",
                            "flex": 0
                        },
                        {
                            "type": "text",
                            "text": date,
                            "size": "lg",
                            "color": "#111111",
                            "align": "end"
                        }
                        ]
                    },
                    {
                        "type": "box",
                        "layout": "horizontal",
                        "contents": [
                        {
                            "type": "text",
                            "text": "ÂèñÊ∂àÈ†êÁ¥ÑÊôÇÈñì",
                            "size": "lg",
                            "color": "#555555",
                            "flex": 0
                        },
                        {
                            "type": "text",
                            "text": time_table[start_index] + " - " + time_table[end_index-1],
                            "size": "lg",
                            "color": "#111111",
                            "align": "end"
                        }
                        ]
                    }
                    ]
                }
                ]
            }
        }

        line_bot_api.push_message('Ue9484510f6a0ba4d68b30d0c759949c9',FlexSendMessage(
                alt_text = 'ÂèñÊ∂àÈ†êÁ¥ÑÈÄöÁü•',
                contents = notify_mamanger_flex ))


        return 0

    if "Âà™Èô§È†êÁ¥Ñ" in event.postback.data :
        line_bot_api.reply_message(event.reply_token, TextSendMessage("Á¢∫ÂÆöË¶ÅÂà™Èô§È†êÁ¥ÑÂóéÔºü"
            ,quick_reply=QuickReply(
                items=[
                    QuickReplyButton(
                        action=PostbackAction(label="Á¢∫ÂÆöÂà™Èô§"
                                            , data="Á¢∫ÂÆöÂà™Èô§ " + event.postback.data[4:])
                    ),
                    QuickReplyButton(
                        action=PostbackAction(label="ÂèñÊ∂àÂà™Èô§"
                                            , data="ÂèñÊ∂àÂà™Èô§")
                    )
                ]
        )))

        return 0

    if event.postback.data == "Á¢∫Ë™çÈ†êÁ¥Ñ":
        #ÊàêÂäüÈ†êÁ¥ÑË®äÊÅØ
        line_bot_api.reply_message(event.reply_token, TextSendMessage("ÊàêÂäüÈ†êÁ¥ÑüòÉÔºåÂèØ‰ª•Âà∞È†êÁ¥ÑÊü•Ë©¢\"‰øÆÊîπ\"Êàñ\"Âà™Èô§\"ÂñîÔºÅ"))

        #DB set
        DATABASE_URL = os.environ['DATABASE_URL']
        conn = psycopg2.connect(DATABASE_URL, sslmode='require')
        cursor = conn.cursor()


        # get resdate
        query = "select resdate from customer where userid = '" +userID+"';"
        cursor.execute(query)
        conn.commit()
        resdate = cursor.fetchone()[0]
        size = len(resdate.split())
        date = resdate.split()[0]
        # get has_reser , and append on it
        query = "select has_reser from reservation where reser_date = '" + date +"';"
        cursor.execute(query)
        conn.commit()
        has_reser = cursor.fetchone()[0]
        # append
        for i in range(1,size,1):
            has_reser += resdate.split()[i] + " "
        query = "update reservation set has_reser = '"+ has_reser + "' where reser_date = '" + date +"';"
        cursor.execute(query)
        conn.commit()


        sql = "select reser_full_data from customer where userid = '" + userID+"';"
        cursor.execute(sql)
        conn.commit()
        reser_full_data = cursor.fetchone()[0]
        write_in_reservation = userName +"#" +reser_full_data.split("#")[2] + "#" + userID

        # ÂØ´ÂÖ•reservation
        for i in range(1,size,1):
            query = "UPDATE reservation SET " + resdate.split()[i] +  "= '" + write_in_reservation + "'  where reser_date = '"  + date + "';"
            cursor.execute(query)
            conn.commit()


        # ÂØ´ÂÖ•customer
        sql = "select reser_num from customer where userid = '" + userID+"';"
        cursor.execute(sql)
        conn.commit()
        reser_num = cursor.fetchone()[0]
        reser_num+=1
        if reser_num < 4:
            # Êõ¥Êñ∞Âä†‰∏ÄÂæåÁöÑÂÄºÂõûÂéªnum ‰∏¶‰∏î
            query = "update customer set reser_num = '"+ str(reser_num) + "' where userid = '" + userID +"';"
            cursor.execute(query)
            conn.commit()
            # ÂØ´ÂÖ• has_reser_num
            query = "update customer set has_reser" + str(reser_num) + " = '"+ reser_full_data + "' where userid = '" + userID +"';"
            cursor.execute(query)
            conn.commit()

        notify_data = reser_full_data.split('#')[0]
        notify_time = reser_full_data.split('#')[1]
        notify_service = reser_full_data.split('#')[2]

        #Ê∏ÖÁ©∫cusomer data
        sql = "update customer set service = '' , resdate = '' ,reser_full_data = '' where userid = '" +userID+"';"
        cursor.execute(sql)
        conn.commit()


        cursor.close()
        conn.close()

        # ÈÄöÁü•manager
        notify_mamanger_flex = {
            "type": "bubble",
            "body": {
                "type": "box",
                "layout": "vertical",
                "contents": [
                {
                    "type": "text",
                    "text": "È†êÁ¥ÑË®äÊÅØ",
                    "weight": "bold",
                    "color": "#1DB446",
                    "size": "xl",
                    "gravity": "center",
                    "align": "center"
                },
                {
                    "type": "separator",
                    "margin": "lg"
                },
                {
                    "type": "box",
                    "layout": "vertical",
                    "margin": "xxl",
                    "spacing": "sm",
                    "contents": [
                    {
                        "type": "box",
                        "layout": "horizontal",
                        "contents": [
                        {
                            "type": "text",
                            "text": "È†êÁ¥Ñ‰∫∫",
                            "size": "lg",
                            "color": "#555555",
                            "flex": 0
                        },
                        {
                            "type": "text",
                            "text": userName,
                            "size": "lg",
                            "color": "#111111",
                            "align": "end"
                        }
                        ]
                    },
                    {
                        "type": "box",
                        "layout": "horizontal",
                        "contents": [
                        {
                            "type": "text",
                            "text": "È†êÁ¥ÑÊó•Êúü",
                            "size": "lg",
                            "color": "#555555",
                            "flex": 0
                        },
                        {
                            "type": "text",
                            "text": notify_data,
                            "size": "lg",
                            "color": "#111111",
                            "align": "end"
                        }
                        ]
                    },
                    {
                        "type": "box",
                        "layout": "horizontal",
                        "contents": [
                        {
                            "type": "text",
                            "text": "È†êÁ¥ÑÊôÇÈñì",
                            "size": "lg",
                            "color": "#555555",
                            "flex": 0
                        },
                        {
                            "type": "text",
                            "text": notify_time,
                            "size": "lg",
                            "color": "#111111",
                            "align": "end"
                        }
                        ]
                    },
                    {
                        "type": "box",
                        "layout": "horizontal",
                        "contents": [
                        {
                            "type": "text",
                            "text": "ÁæéÈ´ÆÈ†ÖÁõÆ",
                            "size": "lg",
                            "color": "#555555",
                            "flex": 0
                        },
                        {
                            "type": "text",
                            "text": notify_service,
                            "size": "lg",
                            "color": "#111111",
                            "align": "end"
                        }
                        ]
                    }
                    ]
                }
                ]
            }
        }

        line_bot_api.push_message('Ue9484510f6a0ba4d68b30d0c759949c9',FlexSendMessage(
                alt_text = 'È†êÁ¥ÑÈÄöÁü•',
                contents = notify_mamanger_flex ))


        return 0

    if event.postback.data == "ÂèñÊ∂àÈ†êÁ¥Ñ":
        #ÂèñÊ∂àÈ†êÁ¥ÑË®äÊÅØ
        line_bot_api.reply_message(event.reply_token, TextSendMessage("Â∑≤Á∂ìÂπ´ÊÇ®ÂèñÊ∂àÈ†êÁ¥Ñüòñ"))
        #DB set
        DATABASE_URL = os.environ['DATABASE_URL']
        conn = psycopg2.connect(DATABASE_URL, sslmode='require')
        cursor = conn.cursor()
        #Ê∏ÖÁ©∫cusomer data
        sql = "update customer set service = '' , resdate = '' ,reser_full_data = '' where userid = '" +userID+"';"
        cursor.execute(sql)
        conn.commit()

        cursor.close()
        conn.close()
        return 0

    if event.postback.data == "ÈáçÊñ∞È†êÁ¥Ñ":
        line_bot_api.reply_message(event.reply_token, TextSendMessage("Ë´ãÈÅ∏ÊìáÁæéÈ´ÆÈ†ÖÁõÆ"
            ,quick_reply=QuickReply(
                items=[
                    QuickReplyButton(
                        action=PostbackAction(label="Ââ™È´Æ"
                                            , data="Ââ™È´Æ")
                    ),
                    QuickReplyButton(
                        action=PostbackAction(label="Ââ™È´Æ+Ê¥óÈ´Æ"
                                            , data="Ââ™È´Æ(Ê¥óÈ´Æ)")
                    ),
                    QuickReplyButton(
                        action=PostbackAction(label="Ê¥óÈ´Æ"
                                            , data="Ê¥óÈ´Æ")
                    ),
                    QuickReplyButton(
                        action=PostbackAction(label="ÁáôÈ´Æ(Áî∑)"
                                            , data="ÁáôÈ´Æ(Áî∑)")
                    ),
                    QuickReplyButton(
                        action=PostbackAction(label="ÁáôÈ´Æ(Â•≥)"
                                            , data="ÁáôÈ´Æ(Â•≥)")
                    ),
                    QuickReplyButton(
                        action=PostbackAction(label="ÊüìÈ´Æ"
                                            , data="ÊüìÈ´Æ")
                    )
                ]
        )))
        return 0

    if event.postback.data in business_day : #  ÈÅ∏ÂÆåÊó•ÊúüÂæå
        select_day_index = business_day.index(event.postback.data)
        select_day = date_list[select_day_index]

        #DB setting
        DATABASE_URL = os.environ['DATABASE_URL']
        conn = psycopg2.connect(DATABASE_URL, sslmode='require')
        cursor = conn.cursor()

        # ÂèñÂæó‰∏ãÁè≠ÊôÇÈñì
        sql = "select off_hour from manager where userid = 'Ue9484510f6a0ba4d68b30d0c759949c9'"
        cursor.execute(sql)
        conn.commit()
        off_hour_result = cursor.fetchone()[0]
        off_hour_date = ''
        off_hour_time = ''
        off_hour_index = ''
        if off_hour_result != '':
            off_hour_date = off_hour_result.split()[0]
            off_hour_time = off_hour_result.split()[1]

            tmp = off_hour_result.split()
            for j in range(2, len(tmp)):
                index = slot_table.index(tmp[j][4:])
                off_hour_index += "[" + str((index * 2) +1) + "]"


        reservation = {
            "type": "carousel",
            "contents": [
                {
                "type": "bubble",
                "size": "kilo",
                "body": {
                    "type": "box",
                    "layout": "vertical",
                    "contents": [
                    {
                        "type": "box",
                        "layout": "vertical",
                        "contents": [
                        {
                            "type": "text",
                            "text": "04-30 (Âõõ)",
                            "align": "center",
                            "size": "xl",
                            "offsetTop": "5px",
                            "weight": "bold"
                        },
                        {
                            "type": "spacer"
                        }
                        ]
                    },
                    {
                        "type": "box",
                        "layout": "horizontal",
                        "contents": [
                        {
                            "type": "text",
                            "text": "09:00-09:30",
                            "align": "center",
                            "size": "xl",
                            "gravity": "center"
                        },
                        {
                            "type": "button",
                            "action": {
                            "type": "postback",
                            "label": "È†êÁ¥Ñ",
                            "data": "time 04-30 (Âõõ) 09:00-09:30 È†êÁ¥Ñ"
                            },
                            "flex": 0,
                            "style": "primary"
                        }
                        ]
                    },
                    {
                        "type": "separator",
                        "margin": "md"
                    },
                    {
                        "type": "box",
                        "layout": "horizontal",
                        "contents": [
                        {
                            "type": "text",
                            "text": "09:30-10:00",
                            "align": "center",
                            "size": "xl",
                            "gravity": "center"
                        },
                        {
                            "type": "button",
                            "action": {
                            "type": "postback",
                            "label": "È†êÁ¥Ñ",
                            "data": "time 04-30 (Âõõ) 09:30-10:00 È†êÁ¥Ñ"
                            },
                            "flex": 0,
                            "style": "primary"
                        }
                        ]
                    },
                    {
                        "type": "separator",
                        "margin": "md"
                    },
                    {
                        "type": "box",
                        "layout": "horizontal",
                        "contents": [
                        {
                            "type": "text",
                            "text": "10:00-10:30",
                            "align": "center",
                            "size": "xl",
                            "gravity": "center"
                        },
                        {
                            "type": "button",
                            "action": {
                            "type": "postback",
                            "label": "È†êÁ¥Ñ",
                            "data": "time 04-30 (Âõõ) 10:00-10:30 È†êÁ¥Ñ"
                            },
                            "flex": 0,
                            "style": "primary"
                        }
                        ]
                    },
                    {
                        "type": "separator",
                        "margin": "md"
                    },
                    {
                        "type": "box",
                        "layout": "horizontal",
                        "contents": [
                        {
                            "type": "text",
                            "text": "10:30-11:00",
                            "align": "center",
                            "size": "xl",
                            "gravity": "center"
                        },
                        {
                            "type": "button",
                            "action": {
                            "type": "postback",
                            "label": "È†êÁ¥Ñ",
                            "data": "time 04-30 (Âõõ) 10:30-11:00 È†êÁ¥Ñ"
                            },
                            "flex": 0,
                            "style": "primary"
                        }
                        ]
                    },
                    {
                        "type": "separator",
                        "margin": "md"
                    },
                    {
                        "type": "box",
                        "layout": "horizontal",
                        "contents": [
                        {
                            "type": "text",
                            "text": "11:00-11:30",
                            "align": "center",
                            "size": "xl",
                            "gravity": "center"
                        },
                        {
                            "type": "button",
                            "action": {
                            "type": "postback",
                            "label": "È†êÁ¥Ñ",
                            "data": "time 04-30 (Âõõ) 11:00-11:30 È†êÁ¥Ñ"
                            },
                            "flex": 0,
                            "style": "primary"
                        }
                        ]
                    },
                    {
                        "type": "separator",
                        "margin": "md"
                    },
                    {
                        "type": "box",
                        "layout": "horizontal",
                        "contents": [
                        {
                            "type": "text",
                            "text": "11:30-12:00",
                            "align": "center",
                            "size": "xl",
                            "gravity": "center"
                        },
                        {
                            "type": "button",
                            "action": {
                            "type": "postback",
                            "label": "È†êÁ¥Ñ",
                            "data": "time 04-30 (Âõõ) 11:30-12:00 È†êÁ¥Ñ"
                            },
                            "flex": 0,
                            "style": "primary"
                        }
                        ]
                    },
                    {
                        "type": "separator",
                        "margin": "md"
                    },
                    {
                        "type": "box",
                        "layout": "horizontal",
                        "contents": [
                        {
                            "type": "text",
                            "text": "12:00-12:30",
                            "align": "center",
                            "size": "xl",
                            "gravity": "center"
                        },
                        {
                            "type": "button",
                            "action": {
                            "type": "postback",
                            "label": "È†êÁ¥Ñ",
                            "data": "time 04-30 (Âõõ) 12:00-12:30 È†êÁ¥Ñ"
                            },
                            "flex": 0,
                            "style": "primary"
                        }
                        ]
                    },
                    {
                        "type": "separator",
                        "margin": "md"
                    },
                    {
                        "type": "box",
                        "layout": "horizontal",
                        "contents": [
                        {
                            "type": "text",
                            "text": "12:30-13:00",
                            "align": "center",
                            "size": "xl",
                            "gravity": "center"
                        },
                        {
                            "type": "button",
                            "action": {
                            "type": "postback",
                            "label": "È†êÁ¥Ñ",
                            "data": "time 04-30 (Âõõ) 12:30-13:00 È†êÁ¥Ñ"
                            },
                            "flex": 0,
                            "style": "primary"
                        }
                        ]
                    },
                    {
                        "type": "separator",
                        "margin": "md"
                    },
                    {
                        "type": "box",
                        "layout": "horizontal",
                        "contents": [
                        {
                            "type": "text",
                            "text": "13:00-13:30",
                            "align": "center",
                            "size": "xl",
                            "gravity": "center"
                        },
                        {
                            "type": "button",
                            "action": {
                            "type": "postback",
                            "label": "È†êÁ¥Ñ",
                            "data": "time 04-30 (Âõõ) 13:00-13:30 È†êÁ¥Ñ"
                            },
                            "flex": 0,
                            "style": "primary"
                        }
                        ]
                    },
                    {
                        "type": "box",
                        "layout": "vertical",
                        "contents": [
                        {
                            "type": "text",
                            "text": "04-30 (Âõõ)",
                            "align": "center",
                            "size": "xl",
                            "offsetTop": "5px",
                            "weight": "bold"
                        },
                        {
                            "type": "spacer"
                        }
                        ]
                    }
                    ],
                    "spacing": "sm",
                    "paddingAll": "13px"
                }
                },
                {
                "type": "bubble",
                "size": "kilo",
                "body": {
                    "type": "box",
                    "layout": "vertical",
                    "contents": [
                    {
                        "type": "box",
                        "layout": "vertical",
                        "contents": [
                        {
                            "type": "text",
                            "text": "04-30 (Âõõ)",
                            "align": "center",
                            "size": "xl",
                            "offsetTop": "5px",
                            "weight": "bold"
                        },
                        {
                            "type": "spacer"
                        }
                        ]
                    },
                    {
                        "type": "box",
                        "layout": "horizontal",
                        "contents": [
                        {
                            "type": "text",
                            "text": "13:30-14:00",
                            "align": "center",
                            "size": "xl",
                            "gravity": "center"
                        },
                        {
                            "type": "button",
                            "action": {
                            "type": "postback",
                            "label": "È†êÁ¥Ñ",
                            "data": "time 04-30 (Âõõ) 13:30-14:00 È†êÁ¥Ñ"
                            },
                            "flex": 0,
                            "style": "primary"
                        }
                        ]
                    },
                    {
                        "type": "separator",
                        "margin": "md"
                    },
                    {
                        "type": "box",
                        "layout": "horizontal",
                        "contents": [
                        {
                            "type": "text",
                            "text": "14:00-14:30",
                            "align": "center",
                            "size": "xl",
                            "gravity": "center"
                        },
                        {
                            "type": "button",
                            "action": {
                            "type": "postback",
                            "label": "È†êÁ¥Ñ",
                            "data": "time 04-30 (Âõõ) 14:00-14:30 È†êÁ¥Ñ"
                            },
                            "flex": 0,
                            "style": "primary"
                        }
                        ]
                    },
                    {
                        "type": "separator",
                        "margin": "md"
                    },
                    {
                        "type": "box",
                        "layout": "horizontal",
                        "contents": [
                        {
                            "type": "text",
                            "text": "14:30-15:00",
                            "align": "center",
                            "size": "xl",
                            "gravity": "center"
                        },
                        {
                            "type": "button",
                            "action": {
                            "type": "postback",
                            "label": "È†êÁ¥Ñ",
                            "data": "time 04-30 (Âõõ) 14:30-15:00 È†êÁ¥Ñ"
                            },
                            "flex": 0,
                            "style": "primary"
                        }
                        ]
                    },
                    {
                        "type": "separator",
                        "margin": "md"
                    },
                    {
                        "type": "box",
                        "layout": "horizontal",
                        "contents": [
                        {
                            "type": "text",
                            "text": "15:00-15:30",
                            "align": "center",
                            "size": "xl",
                            "gravity": "center"
                        },
                        {
                            "type": "button",
                            "action": {
                            "type": "postback",
                            "label": "È†êÁ¥Ñ",
                            "data": "time 04-30 (Âõõ) 15:00-15:30 È†êÁ¥Ñ"
                            },
                            "flex": 0,
                            "style": "primary"
                        }
                        ]
                    },
                    {
                        "type": "separator",
                        "margin": "md"
                    },
                    {
                        "type": "box",
                        "layout": "horizontal",
                        "contents": [
                        {
                            "type": "text",
                            "text": "15:30-16:00",
                            "align": "center",
                            "size": "xl",
                            "gravity": "center"
                        },
                        {
                            "type": "button",
                            "action": {
                            "type": "postback",
                            "label": "È†êÁ¥Ñ",
                            "data": "time 04-30 (Âõõ) 15:30-16:00 È†êÁ¥Ñ"
                            },
                            "flex": 0,
                            "style": "primary"
                        }
                        ]
                    },
                    {
                        "type": "separator",
                        "margin": "md"
                    },
                    {
                        "type": "box",
                        "layout": "horizontal",
                        "contents": [
                        {
                            "type": "text",
                            "text": "16:00-16:30",
                            "align": "center",
                            "size": "xl",
                            "gravity": "center"
                        },
                        {
                            "type": "button",
                            "action": {
                            "type": "postback",
                            "label": "È†êÁ¥Ñ",
                            "data": "time 04-30 (Âõõ) 16:00-16:30 È†êÁ¥Ñ"
                            },
                            "flex": 0,
                            "style": "primary"
                        }
                        ]
                    },
                    {
                        "type": "separator",
                        "margin": "md"
                    },
                    {
                        "type": "box",
                        "layout": "horizontal",
                        "contents": [
                        {
                            "type": "text",
                            "text": "16:30-17:00",
                            "align": "center",
                            "size": "xl",
                            "gravity": "center"
                        },
                        {
                            "type": "button",
                            "action": {
                            "type": "postback",
                            "label": "È†êÁ¥Ñ",
                            "data": "time 04-30 (Âõõ) 16:30-17:00 È†êÁ¥Ñ"
                            },
                            "flex": 0,
                            "style": "primary"
                        }
                        ]
                    },
                    {
                        "type": "separator",
                        "margin": "md"
                    },
                    {
                        "type": "box",
                        "layout": "horizontal",
                        "contents": [
                        {
                            "type": "text",
                            "text": "17:00-17:30",
                            "align": "center",
                            "size": "xl",
                            "gravity": "center"
                        },
                        {
                            "type": "button",
                            "action": {
                            "type": "postback",
                            "label": "È†êÁ¥Ñ",
                            "data": "time 04-30 (Âõõ) 17:00-17:30 È†êÁ¥Ñ"
                            },
                            "flex": 0,
                            "style": "primary"
                        }
                        ]
                    },
                    {
                        "type": "separator",
                        "margin": "md"
                    },
                    {
                        "type": "box",
                        "layout": "horizontal",
                        "contents": [
                        {
                            "type": "text",
                            "text": "17:30-18:00",
                            "align": "center",
                            "size": "xl",
                            "gravity": "center"
                        },
                        {
                            "type": "button",
                            "action": {
                            "type": "postback",
                            "label": "È†êÁ¥Ñ",
                            "data": "time 04-30 (Âõõ) 17:30-18:00 È†êÁ¥Ñ"
                            },
                            "flex": 0,
                            "style": "primary"
                        }
                        ]
                    },
                    {
                        "type": "box",
                        "layout": "vertical",
                        "contents": [
                        {
                            "type": "text",
                            "text": "04-30 (Âõõ)",
                            "align": "center",
                            "size": "xl",
                            "offsetTop": "5px",
                            "weight": "bold"
                        },
                        {
                            "type": "spacer"
                        }
                        ]
                    }
                    ],
                    "spacing": "sm",
                    "paddingAll": "13px"
                }
                }
            ]
            }



        #get select day has_reser
        # DB if not exists insert into reservation table
        query = f"""select * from reservation where reser_date = (%s);"""
        cursor.execute(query,(select_day,))
        conn.commit()
        if cursor.fetchone() == None:
            table_columns = '(reser_date,has_reser)'
            postgres_insert_query = f"""INSERT INTO reservation {table_columns} VALUES (%s,%s);"""
            cursor.execute(postgres_insert_query, (select_day,''))
            conn.commit()

        query = "select has_reser from reservation where reser_date = '" + select_day +"';"
        cursor.execute(query)
        conn.commit()
        has_reser = cursor.fetchone()[0]
        tmp = has_reser.split()
        has_reser_index = ""
        for j in range(len(tmp)):
            index = slot_table.index(tmp[j][4:])
            has_reser_index += "[" + str((index * 2) +1) + "]"

        reservation['contents'][0]['body']['contents'][0]['contents'][0]['text'] = business_day[select_day_index] + " ‰∏äÂçà"
        reservation['contents'][0]['body']['contents'][18]['contents'][0]['text'] = business_day[select_day_index] + " ‰∏äÂçà"
        reservation['contents'][1]['body']['contents'][0]['contents'][0]['text'] = business_day[select_day_index] + " ‰∏ãÂçà"
        reservation['contents'][1]['body']['contents'][18]['contents'][0]['text'] = business_day[select_day_index] + " ‰∏ãÂçà"

        # Áï∂Êó•ÊôÇÈñìË∂ÖÈÅé È†êÁ¥ÑÊîπÁÅ∞
        theTime = datetime.datetime.now().strftime(ISOTIMEFORMAT)
        today = str(theTime).split()[0]
        nowtime = str(theTime).split()[1]

        for j in range(1,len(reservation['contents'][0]['body']['contents']),2):

            if date_list[select_day_index] == today :
                # Áï∂Êó•ÊôÇÈñìË∂ÖÈÅé È†êÁ¥ÑÊîπÁÅ∞
                reser_time_slot = reservation['contents'][0]['body']['contents'][j]['contents'][0]['text'].split('-')[0]
                if nowtime > reser_time_slot:
                    reservation['contents'][0]['body']['contents'][j]['contents'][1]['style'] = "secondary"

            if date_list[select_day_index] == off_hour_date:
                if ("["+str(j)+"]") in off_hour_index:
                    #ÊèõÈ°èËâ≤ ÊîπÂ∑≤Êªø
                    reservation['contents'][0]['body']['contents'][j]['contents'][1]['style'] = "secondary"
                    reservation['contents'][0]['body']['contents'][j]['contents'][1]['action']['label'] = "‰∏ãÁè≠"
                    reservation['contents'][0]['body']['contents'][j]['contents'][1]['action']['data'] = "‰∏ãÁè≠"

            if ("["+str(j)+"]") in has_reser_index:
                #ÊèõÈ°èËâ≤ ÊîπÂ∑≤Êªø
                reservation['contents'][0]['body']['contents'][j]['contents'][1]['style'] = "secondary"
                reservation['contents'][0]['body']['contents'][j]['contents'][1]['action']['label'] = "Â∑≤Êªø"
            tmp = str(reservation['contents'][0]['body']['contents'][j]['contents'][1]['action']['data'])
            tmp = tmp[:5] + business_day[select_day_index] + tmp[14:]
            reservation['contents'][0]['body']['contents'][j]['contents'][1]['action']['data'] = tmp

        for j in range(1,len(reservation['contents'][1]['body']['contents']),2):

            if date_list[select_day_index] == today :
                # Áï∂Êó•ÊôÇÈñìË∂ÖÈÅé È†êÁ¥ÑÊîπÁÅ∞
                reser_time_slot = reservation['contents'][1]['body']['contents'][j]['contents'][0]['text'].split('-')[0]
                if nowtime > reser_time_slot:
                    reservation['contents'][1]['body']['contents'][j]['contents'][1]['style'] = "secondary"

            if date_list[select_day_index] == off_hour_date:
                if ("["+str(j+18)+"]") in off_hour_index:
                    #ÊèõÈ°èËâ≤ ÊîπÂ∑≤Êªø
                    reservation['contents'][1]['body']['contents'][j]['contents'][1]['style'] = "secondary"
                    reservation['contents'][1]['body']['contents'][j]['contents'][1]['action']['label'] = "‰∏ãÁè≠"
                    reservation['contents'][1]['body']['contents'][j]['contents'][1]['action']['data'] = "‰∏ãÁè≠"

            if ("["+str(j+18)+"]") in has_reser_index:
                #ÊèõÈ°èËâ≤ ÊîπÂ∑≤Êªø
                reservation['contents'][1]['body']['contents'][j]['contents'][1]['style'] = "secondary"
                reservation['contents'][1]['body']['contents'][j]['contents'][1]['action']['label'] = "Â∑≤Êªø"
            tmp = str(reservation['contents'][1]['body']['contents'][j]['contents'][1]['action']['data'])
            tmp = tmp[:5] + business_day[select_day_index] + tmp[14:]
            reservation['contents'][1]['body']['contents'][j]['contents'][1]['action']['data'] = tmp


        line_bot_api.reply_message(event.reply_token, FlexSendMessage(
                alt_text = 'ÈÅ∏ÊìáÈ†êÁ¥ÑÊôÇÊÆµ',
                contents = reservation ,
                quick_reply=QuickReply(
                items=[
                    QuickReplyButton(
                        action=PostbackAction(label=business_day[0]
                                            , data=business_day[0])
                    ),
                    QuickReplyButton(
                        action=PostbackAction(label=business_day[1]
                                            , data=business_day[1])
                    ),
                    QuickReplyButton(
                        action=PostbackAction(label=business_day[2]
                                            , data=business_day[2])
                    ),
                    QuickReplyButton(
                        action=PostbackAction(label=business_day[3]
                                            , data=business_day[3])
                    ),
                    QuickReplyButton(
                        action=PostbackAction(label=business_day[4]
                                            , data=business_day[4])
                    ),
                    QuickReplyButton(
                        action=PostbackAction(label=business_day[5]
                                            , data=business_day[5])
                    ),
                    QuickReplyButton(
                        action=PostbackAction(label=business_day[6]
                                            , data=business_day[6])
                    )
                ]
        )))

        return 0

    # ÊâãÂãïÊñ∞Â¢ûÈ†êÁ¥Ñ
    if "Áº∫È†êÁ¥Ñ‰∫∫" in event.postback.data:


            service = event.postback.data.split('#')[1]
            resdate = event.postback.data.split('#')[2]

            #DB setting
            DATABASE_URL = os.environ['DATABASE_URL']
            conn = psycopg2.connect(DATABASE_URL, sslmode='require')
            cursor = conn.cursor()

            out_of_service = ['Â§ñÂá∫','Á†îÁøí']

            if service not in out_of_service :
                line_bot_api.reply_message(event.reply_token,TextSendMessage("Ë´ãËº∏ÂÖ•È†êÁ¥Ñ‰∫∫ÂßìÂêç :"))

                sql = "update manager set add_service = '" + service + "' where userid = 'Ue9484510f6a0ba4d68b30d0c759949c9'"
                cursor.execute(sql)
                conn.commit()

                sql = "update manager set add_resdate = '" + resdate + "' where userid = 'Ue9484510f6a0ba4d68b30d0c759949c9'"
                cursor.execute(sql)
                conn.commit()

                sql = "update manager set status = 'Ëº∏ÂÖ•È†êÁ¥Ñ‰∫∫ÂßìÂêç' where userid = 'Ue9484510f6a0ba4d68b30d0c759949c9'"
                cursor.execute(sql)
                conn.commit()
                return 0
            else:
                designer = 'ÊùéË≤û'
                sql = "update manager set add_name = '" + designer + "' where userid = 'Ue9484510f6a0ba4d68b30d0c759949c9'"
                cursor.execute(sql)
                conn.commit()


                sql = "update manager set add_service = '" + service + "' where userid = 'Ue9484510f6a0ba4d68b30d0c759949c9'"
                cursor.execute(sql)
                conn.commit()

                sql = "update manager set add_resdate = '" + resdate + "' where userid = 'Ue9484510f6a0ba4d68b30d0c759949c9'"
                cursor.execute(sql)
                conn.commit()



                date = resdate.split()[0]
                time = resdate.split()[1]
                check_reser = {
                    "type": "bubble",
                    "body": {
                        "type": "box",
                        "layout": "vertical",
                        "contents": [
                        {
                            "type": "text",
                            "text": "Â§ñÂá∫Ë®äÊÅØ",
                            "weight": "bold",
                            "color": "#1DB446",
                            "size": "xl",
                            "gravity": "center",
                            "align": "center"
                        },
                        {
                            "type": "separator",
                            "margin": "lg"
                        },
                        {
                            "type": "box",
                            "layout": "vertical",
                            "margin": "xxl",
                            "spacing": "sm",
                            "contents": [
                            {
                                "type": "box",
                                "layout": "horizontal",
                                "contents": [
                                {
                                    "type": "text",
                                    "text": "È†êÁ¥ÑÊó•Êúü",
                                    "size": "lg",
                                    "color": "#555555",
                                    "flex": 0
                                },
                                {
                                    "type": "text",
                                    "text": business_day[date_list.index(date)],
                                    "size": "lg",
                                    "color": "#111111",
                                    "align": "end"
                                }
                                ]
                            },
                            {
                                "type": "box",
                                "layout": "horizontal",
                                "contents": [
                                {
                                    "type": "text",
                                    "text": "È†êÁ¥ÑÊôÇÈñì",
                                    "size": "lg",
                                    "color": "#555555",
                                    "flex": 0
                                },
                                {
                                    "type": "text",
                                    "text": time,
                                    "size": "lg",
                                    "color": "#111111",
                                    "align": "end"
                                }
                                ]
                            },
                            {
                                "type": "box",
                                "layout": "horizontal",
                                "contents": [
                                {
                                    "type": "text",
                                    "text": "ÁæéÈ´ÆÈ†ÖÁõÆ",
                                    "size": "lg",
                                    "color": "#555555",
                                    "flex": 0
                                },
                                {
                                    "type": "text",
                                    "text": service,
                                    "size": "lg",
                                    "color": "#111111",
                                    "align": "end"
                                }
                                ]
                            }
                            ]
                        }
                        ]
                    }
                }
                line_bot_api.reply_message(event.reply_token,FlexSendMessage(alt_text="Á¢∫Ë™çÊñ∞Â¢ûË®äÊÅØ",contents=check_reser
                                        ,quick_reply= QuickReply(
                                            items=[
                                                QuickReplyButton(
                                                    action=PostbackAction(label="Á¢∫Ë™çÊñ∞Â¢û"
                                                                        , data="Á¢∫Ë™çÊñ∞Â¢û")
                                                ),
                                                QuickReplyButton(
                                                    action=PostbackAction(label="ÂèñÊ∂àÊñ∞Â¢û"
                                                                        , data="ÂèñÊ∂àÊñ∞Â¢û")
                                                )
                                            ]
                                        )))

                #Ê∏ÖÁ©∫manager status
                sql = "update manager set status = '' where userid = 'Ue9484510f6a0ba4d68b30d0c759949c9'"
                cursor.execute(sql)
                conn.commit()

                cursor.close()
                conn.close()


                return 0

    if "Áº∫ÁæéÈ´ÆÈ†ÖÁõÆÂíåÈ†êÁ¥Ñ‰∫∫" in event.postback.data:
            reser_data = event.postback.data.split('#')[1]
            date = reser_data.split()[0]
            start_time = reser_data.split()[1].split('-')[0]
            end_time = reser_data.split()[1].split('-')[1]

            # Ê™¢Êü•ÂçÄÈñìÊòØÂê¶ÊúâÊªø
            #DB set
            DATABASE_URL = os.environ['DATABASE_URL']
            conn = psycopg2.connect(DATABASE_URL, sslmode='require')
            cursor = conn.cursor()

            check_interval_list = slot_table[time_table.index(start_time):time_table.index(end_time)]

            table_columns = ''
            for i in range(len(check_interval_list)):
                table_columns += ",slot" +check_interval_list[i]


            query = f"""select {table_columns[1:]} from reservation where reser_date = (%s);"""
            cursor.execute(query,(date,))
            conn.commit()
            size = len(table_columns[1:].split(','))
            result = cursor.fetchone()
            not_none = False
            have_other_slot_isNull = False
            has_customer_index = 0
            for i in range(0,size,1):

                if result[i] != None:
                    has_customer_index = i
                    not_none = True
                    break
                else:
                    have_other_slot_isNull = True

            if have_other_slot_isNull and not_none:
                line_bot_api.reply_message(event.reply_token, TextSendMessage(time_table[time_table.index(start_time) + has_customer_index] + " Â∑≤Ë¢´È†êÁ¥ÑÔºåË´ãÈáçÊñ∞ÈÅ∏Êìá"))
                return 0


            line_bot_api.reply_message(event.reply_token, TextSendMessage("Ë´ãÈÅ∏ÊìáÁæéÈ´ÆÈ†ÖÁõÆ"
            ,quick_reply=QuickReply(
                items=[
                    QuickReplyButton(
                        action=PostbackAction(label="Ââ™È´Æ"
                                            , data="Áº∫È†êÁ¥Ñ‰∫∫#Ââ™È´Æ#"+reser_data)
                    ),
                    QuickReplyButton(
                        action=PostbackAction(label="Ê¥óÈ´Æ"
                                            , data="Áº∫È†êÁ¥Ñ‰∫∫#Ê¥óÈ´Æ#"+reser_data)
                    ),
                    QuickReplyButton(
                        action=PostbackAction(label="Ââ™È´Æ+Ê¥óÈ´Æ"
                                            , data="Áº∫È†êÁ¥Ñ‰∫∫#Ââ™È´Æ(Ê¥óÈ´Æ)#"+reser_data)
                    ),QuickReplyButton(
                        action=PostbackAction(label="Ë≠∑È´Æ+Ê¥óÈ´Æ"
                                            , data="Áº∫È†êÁ¥Ñ‰∫∫#Ë≠∑È´Æ(Ê¥óÈ´Æ)#"+reser_data)
                    ),
                    QuickReplyButton(
                        action=PostbackAction(label="ÁáôÈ´Æ(Áî∑)"
                                            , data="Áº∫È†êÁ¥Ñ‰∫∫#ÁáôÈ´Æ(Áî∑)#"+reser_data)
                    ),
                    QuickReplyButton(
                        action=PostbackAction(label="ÁáôÈ´Æ(Â•≥)"
                                            , data="Áº∫È†êÁ¥Ñ‰∫∫#ÁáôÈ´Æ(Â•≥)#"+reser_data)
                    ),
                    QuickReplyButton(
                        action=PostbackAction(label="ÊüìÈ´Æ"
                                            , data="Áº∫È†êÁ¥Ñ‰∫∫#ÊüìÈ´Æ#"+reser_data)
                    ),
                    QuickReplyButton(
                        action=PostbackAction(label="ÊüìÈ´Æ+Ââ™È´Æ"
                                            , data="Áº∫È†êÁ¥Ñ‰∫∫#ÊüìÈ´Æ(Ââ™È´Æ)#"+reser_data)
                    ),
                    QuickReplyButton(
                        action=PostbackAction(label="Â§ñÂá∫"
                                            , data="Áº∫È†êÁ¥Ñ‰∫∫#Â§ñÂá∫#"+reser_data)
                    ),
                    QuickReplyButton(
                        action=PostbackAction(label="Á†îÁøí"
                                            , data="Áº∫È†êÁ¥Ñ‰∫∫#Á†îÁøí#"+reser_data)
                    )
                ]
            )))
            return 0

    if "time" in event.postback.data and "ÊâãÂãïÈ†êÁ¥Ñ" in event.postback.data:
        update_bussiness_day()
        start_time = event.postback.data.split()[3].split('-')[0]
        start_time_index = time_table.index(start_time)
        date = event.postback.data.split()[1]
        line_bot_api.reply_message(event.reply_token, TextSendMessage("Ë´ãÂïèË¶ÅÂæû "+start_time+" Âà∞ÂπæÈªûÔºü"
            ,quick_reply=QuickReply(
                items=[
                    QuickReplyButton(
                        action=PostbackAction(label=time_table[start_time_index + 1]
                                            , data="Áº∫ÁæéÈ´ÆÈ†ÖÁõÆÂíåÈ†êÁ¥Ñ‰∫∫#"+ date + " " +start_time+ "-" +time_table[start_time_index + 1])
                    ),
                    QuickReplyButton(
                        action=PostbackAction(label=time_table[start_time_index + 2]
                                            , data="Áº∫ÁæéÈ´ÆÈ†ÖÁõÆÂíåÈ†êÁ¥Ñ‰∫∫#"+ date + " " +start_time+ "-" +time_table[start_time_index + 2])
                    ),
                    QuickReplyButton(
                        action=PostbackAction(label=time_table[start_time_index + 3]
                                            , data="Áº∫ÁæéÈ´ÆÈ†ÖÁõÆÂíåÈ†êÁ¥Ñ‰∫∫#"+ date + " " +start_time+ "-" +time_table[start_time_index + 3])
                    ),
                    QuickReplyButton(
                        action=PostbackAction(label=time_table[start_time_index + 4]
                                            , data="Áº∫ÁæéÈ´ÆÈ†ÖÁõÆÂíåÈ†êÁ¥Ñ‰∫∫#"+ date + " " +start_time+ "-" +time_table[start_time_index + 4])
                    ),
                    QuickReplyButton(
                        action=PostbackAction(label=time_table[start_time_index + 5]
                                            , data="Áº∫ÁæéÈ´ÆÈ†ÖÁõÆÂíåÈ†êÁ¥Ñ‰∫∫#"+ date + " " +start_time+ "-" +time_table[start_time_index + 5])
                    ),
                    QuickReplyButton(
                        action=PostbackAction(label=time_table[start_time_index + 6]
                                            , data="Áº∫ÁæéÈ´ÆÈ†ÖÁõÆÂíåÈ†êÁ¥Ñ‰∫∫#"+ date + " " +start_time+ "-" +time_table[start_time_index + 6])
                    ),
                    QuickReplyButton(
                        action=PostbackAction(label=time_table[start_time_index + 7]
                                            , data="Áº∫ÁæéÈ´ÆÈ†ÖÁõÆÂíåÈ†êÁ¥Ñ‰∫∫#"+ date + " " +start_time+ "-" +time_table[start_time_index + 7])
                    ),
                    QuickReplyButton(
                        action=PostbackAction(label=time_table[start_time_index + 8]
                                            , data="Áº∫ÁæéÈ´ÆÈ†ÖÁõÆÂíåÈ†êÁ¥Ñ‰∫∫#"+ date + " " +start_time+ "-" +time_table[start_time_index + 8])
                    )
                ]
        )))

        #Ê∏ÖÁ©∫manger Ê¨Ñ‰Ωç
        #DB setting
        DATABASE_URL = os.environ['DATABASE_URL']
        conn = psycopg2.connect(DATABASE_URL, sslmode='require')
        cursor = conn.cursor()

        sql = "update manager set status = '' , add_service = '' , add_name = '' , add_resdate = '' where userid = 'Ue9484510f6a0ba4d68b30d0c759949c9'"
        cursor.execute(sql)
        conn.commit()

        cursor.close()
        conn.close()

        return 0

    if event.postback.data == "Á¢∫Ë™çÊñ∞Â¢û":
        line_bot_api.reply_message(event.reply_token , TextSendMessage("Êñ∞Â¢ûÊàêÂäü"))
        #DB set
        DATABASE_URL = os.environ['DATABASE_URL']
        conn = psycopg2.connect(DATABASE_URL, sslmode='require')
        cursor = conn.cursor()

        sql = "select add_name from manager where userid = 'Ue9484510f6a0ba4d68b30d0c759949c9'"
        cursor.execute(sql)
        conn.commit()
        add_name = cursor.fetchone()[0]

        sql = "select add_service from manager where userid = 'Ue9484510f6a0ba4d68b30d0c759949c9'"
        cursor.execute(sql)
        conn.commit()
        add_service = cursor.fetchone()[0]

        sql = "select add_resdate from manager where userid = 'Ue9484510f6a0ba4d68b30d0c759949c9'"
        cursor.execute(sql)
        conn.commit()
        add_resdate = cursor.fetchone()[0]
        date = add_resdate.split()[0]
        time = add_resdate.split()[1]
        start_time = time.split('-')[0]
        end_time = time.split('-')[1]

        write_in_reservation = add_name + "#" + add_service
        write_in_slot = slot_table[time_table.index(start_time) : time_table.index(end_time)]
        # ÂØ´ÂÖ•reservation
        for i in write_in_slot:
            query = "UPDATE reservation SET slot" + i +  "= '" + write_in_reservation + "'  where reser_date = '"  + date + "';"
            cursor.execute(query)
            conn.commit()

        #ÂØ´ÂÖ• reservation ÁöÑ has_reser
        # get has_reser , and append on it
        query = "select has_reser from reservation where reser_date = '" + date +"';"
        cursor.execute(query)
        conn.commit()
        has_reser = cursor.fetchone()[0]
        # append
        for i in write_in_slot:
            has_reser += "slot" + i + " "
        query = "update reservation set has_reser = '"+ has_reser + "' where reser_date = '" + date +"';"
        cursor.execute(query)
        conn.commit()


        #Ê∏ÖÁ©∫manager Ë≥áË®ä
        sql = "update manager set  add_name = '' , add_service = '' , add_resdate = '' where userid = 'Ue9484510f6a0ba4d68b30d0c759949c9'"
        cursor.execute(sql)
        conn.commit()

        cursor.close()
        conn.close()


        return 0

    if event.postback.data == "ÂèñÊ∂àÊñ∞Â¢û":
        line_bot_api.reply_message(event.reply_token , TextSendMessage("Â∑≤ÂèñÊ∂à"))

        #DB set
        DATABASE_URL = os.environ['DATABASE_URL']
        conn = psycopg2.connect(DATABASE_URL, sslmode='require')
        cursor = conn.cursor()

        #Ê∏ÖÁ©∫manager Ë≥áË®ä
        sql = "update manager set  add_name = '' , add_service = '' , add_resdate = '' where userid = 'Ue9484510f6a0ba4d68b30d0c759949c9'"
        cursor.execute(sql)
        conn.commit()

        cursor.close()
        conn.close()

        return 0

    # ÊâãÂãïÊñ∞Â¢ûÈ†êÁ¥Ñ

    if "‰∏ãÁè≠" in event.postback.data:
        line_bot_api.reply_message(event.reply_token, TextSendMessage("Ë©≤ÊôÇÊÆµÂ∑≤Á∂ì‰∏ãÁè≠ÂõâÔºÅ"))
        return 0

    if "time" in event.postback.data:
        update_bussiness_day()
        date = str(event.postback.data).split(" ")[1]
        compare_time = str(event.postback.data).split(" ")[3].split("-")[0]
        time = compare_time[:2]+compare_time[3:]


        # Áï∂Êó•ÊôÇÈñìË∂ÖÈÅé
        theTime = datetime.datetime.now().strftime(ISOTIMEFORMAT)
        today = str(theTime).split()[0]
        nowtime = str(theTime).split()[1]

        if today == date :
            if nowtime > compare_time:
                line_bot_api.reply_message(event.reply_token, TextSendMessage("ÁÑ°Ê≥ïÈ†êÁ¥ÑÈÅéÂéªÁöÑÊôÇÊÆµÂñîÔºÅ"
                ,quick_reply=QuickReply(
                items=[
                    QuickReplyButton(
                        action=PostbackAction(label=business_day[0]
                                            , data=business_day[0])
                    ),
                    QuickReplyButton(
                        action=PostbackAction(label=business_day[1]
                                            , data=business_day[1])
                    ),
                    QuickReplyButton(
                        action=PostbackAction(label=business_day[2]
                                            , data=business_day[2])
                    ),
                    QuickReplyButton(
                        action=PostbackAction(label=business_day[3]
                                            , data=business_day[3])
                    ),
                    QuickReplyButton(
                        action=PostbackAction(label=business_day[4]
                                            , data=business_day[4])
                    ),
                    QuickReplyButton(
                        action=PostbackAction(label=business_day[5]
                                            , data=business_day[5])
                    ),
                    QuickReplyButton(
                        action=PostbackAction(label=business_day[6]
                                            , data=business_day[6])
                    )
                ]
            )))
                return 0

        #DB set
        DATABASE_URL = os.environ['DATABASE_URL']
        conn = psycopg2.connect(DATABASE_URL, sslmode='require')
        cursor = conn.cursor()

        #DB get service
        query = f"""select service from customer where userid = (%s);"""
        cursor.execute(query,(userID,))
        conn.commit()
        service = cursor.fetchone()[0]


        sql = "select reser_num from customer where userid = '" + userID+"';"
        cursor.execute(sql)
        conn.commit()
        reser_num = cursor.fetchone()[0]

        if reser_num == 3:
            line_bot_api.reply_message(event.reply_token, TextSendMessage("ÊúÄÂ§ö‰∏ÄÊ¨°Âè™ËÉΩÈ†êÁ¥Ñ‰∏âÂÄãÊôÇÊÆµÂñîÔºÅüò•\nÂ¶ÇÊûúË¶ÅË™øÊï¥ÊôÇÊÆµË´ãÂà∞\"È†êÁ¥ÑÊü•Ë©¢ÂÅöË™øÊï¥\""))
            return 0

        if service == "":
            line_bot_api.reply_message(event.reply_token, TextSendMessage("Ë´ãÂÖàÈÅ∏ÂèñÁæéÈ´ÆÈ†ÖÁõÆÂñîÔºÅ"
            ,quick_reply=QuickReply(
                items=[
                    QuickReplyButton(
                        action=PostbackAction(label="Ââ™È´Æ"
                                            , data="Ââ™È´Æ")
                    ),
                    QuickReplyButton(
                        action=PostbackAction(label="Ê¥óÈ´Æ"
                                            , data="Ê¥óÈ´Æ")
                    ),
                    QuickReplyButton(
                        action=PostbackAction(label="Ââ™È´Æ+Ê¥óÈ´Æ"
                                            , data="Ââ™È´Æ(Ê¥óÈ´Æ)")
                    ),
                    QuickReplyButton(
                        action=PostbackAction(label="Ë≠∑È´Æ+Ê¥óÈ´Æ"
                                            , data="Ë≠∑È´Æ(Ê¥óÈ´Æ)")
                    ),
                    QuickReplyButton(
                        action=PostbackAction(label="ÁáôÈ´Æ(Áî∑)"
                                            , data="ÁáôÈ´Æ(Áî∑)")
                    ),
                    QuickReplyButton(
                        action=PostbackAction(label="ÁáôÈ´Æ(Â•≥)"
                                            , data="ÁáôÈ´Æ(Â•≥)")
                    ),
                    QuickReplyButton(
                        action=PostbackAction(label="ÊüìÈ´Æ"
                                            , data="ÊüìÈ´Æ")
                    ),
                    QuickReplyButton(
                        action=PostbackAction(label="ÊüìÈ´Æ+Ââ™È´Æ"
                                            , data="ÊüìÈ´Æ(Ââ™È´Æ)")
                    )
                ]
            )))
            return 0

        # service time
        table_columns = 'reser_date'
        have_other_slot_isNull = False
        hour = ""
        index = slot_table.index(time)
        total_time = []
        reser_time = []
        if service == 'Ââ™È´Æ':
            service_time = "30ÂàÜÈêò"
            total_time = slot_table[index:index + 1]
            reser_time.append(time_table[index])

            for i in range(len(total_time)):
                table_columns += ",slot" +total_time[i]
            reser_time.append(time_table[index + 1])

        if service == 'Ââ™È´Æ(Ê¥óÈ´Æ)':
            service_time = "‰∏ÄÂ∞èÊôÇ"
            total_time = slot_table[index:index + 2]
            reser_time.append(time_table[index])

            for i in range(len(total_time)):
                table_columns += ",slot" +total_time[i]
            reser_time.append(time_table[index + 2])

        if service == 'Ê¥óÈ´Æ(Èï∑È´Æ)' or service == 'Ê¥óÈ´Æ(Áü≠È´Æ)':
            service_time = "30ÂàÜÈêò"
            total_time = slot_table[index:index + 1]
            reser_time.append(time_table[index])

            for i in range(len(total_time)):
                table_columns += ",slot" +total_time[i]

            reser_time.append(time_table[index + 1])

        if service == 'Ë≠∑È´Æ(Ê¥óÈ´Æ)':
            service_time = "‰∏ÄÂ∞èÊôÇ"
            total_time = slot_table[index:index + 2]
            reser_time.append(time_table[index])

            for i in range(len(total_time)):
                table_columns += ",slot" +total_time[i]
            reser_time.append(time_table[index + 2])

        if service == 'ÁáôÈ´Æ(Áî∑)':
            service_time = "ÂÖ©Â∞èÊôÇ"
            total_time = slot_table[index:index + 4]
            reser_time.append(time_table[index])

            for i in range(len(total_time)):
                table_columns += ",slot" +total_time[i]

            reser_time.append(time_table[index + 4])

        if service == 'ÁáôÈ´Æ(Áü≠È´Æ)':
            service_time = "ÂÖ©Â∞èÊôÇ"
            total_time = slot_table[index:index + 4]
            reser_time.append(time_table[index])

            for i in range(len(total_time)):
                table_columns += ",slot" +total_time[i]

            reser_time.append(time_table[index + 4])

        if service == 'ÁáôÈ´Æ(‰∏≠Èï∑È´Æ)':
            service_time = "‰∏âÂÄãÂçäÂ∞èÊôÇ"
            total_time = slot_table[index:index + 7]
            reser_time.append(time_table[index])

            for i in range(len(total_time)):
                table_columns += ",slot" +total_time[i]

            reser_time.append(time_table[index + 7])

        if service == 'ÁáôÈ´Æ(Èï∑È´Æ)':
            service_time = "ÂõõÂ∞èÊôÇ"
            total_time = slot_table[index:index + 8]
            reser_time.append(time_table[index])

            for i in range(len(total_time)):
                table_columns += ",slot" +total_time[i]

            reser_time.append(time_table[index + 8])

        if service == 'ÊüìÈ´Æ(Áü≠È´Æ)':
            service_time = "‰∏ÄÂÄãÂçäÂ∞èÊôÇ"
            total_time = slot_table[index:index + 3]
            reser_time.append(time_table[index])

            for i in range(len(total_time)):
                table_columns += ",slot" +total_time[i]

            reser_time.append(time_table[index + 3])

        if service == 'ÊüìÈ´Æ(‰∏≠Èï∑È´Æ)':
            service_time = "ÂÖ©Â∞èÊôÇ"
            total_time = slot_table[index:index + 4]
            reser_time.append(time_table[index])

            for i in range(len(total_time)):
                table_columns += ",slot" +total_time[i]

            reser_time.append(time_table[index + 4])

        if service == 'ÊüìÈ´Æ(Èï∑È´Æ)':
            service_time = "ÂÖ©ÂÄãÂçäÂ∞èÊôÇ"
            total_time = slot_table[index:index + 5]
            reser_time.append(time_table[index])

            for i in range(len(total_time)):
                table_columns += ",slot" +total_time[i]

            reser_time.append(time_table[index + 5])

        if service == 'ÊüìÈ´Æ(Ââ™È´Æ)(Áü≠È´Æ)':
            service_time = "ÂÖ©Â∞èÊôÇ"
            total_time = slot_table[index:index + 4]
            reser_time.append(time_table[index])

            for i in range(len(total_time)):
                table_columns += ",slot" +total_time[i]

            reser_time.append(time_table[index + 4])

        if service == 'ÊüìÈ´Æ(Ââ™È´Æ)(‰∏≠Èï∑È´Æ)':
            service_time = "ÂÖ©ÂÄãÂçäÂ∞èÊôÇ"
            total_time = slot_table[index:index + 5]
            reser_time.append(time_table[index])

            for i in range(len(total_time)):
                table_columns += ",slot" +total_time[i]

            reser_time.append(time_table[index + 5])

        if service == 'ÊüìÈ´Æ(Ââ™È´Æ)(Èï∑È´Æ)':
            service_time = "‰∏âÂ∞èÊôÇ"
            total_time = slot_table[index:index + 6]
            reser_time.append(time_table[index])

            for i in range(len(total_time)):
                table_columns += ",slot" +total_time[i]

            reser_time.append(time_table[index + 6])




        #DB write into reservation

        query = f"""select {table_columns} from reservation where reser_date = (%s);"""
        cursor.execute(query,(date,))
        conn.commit()
        size = len(table_columns.split(','))
        result = cursor.fetchone()
        not_none = False
        has_customer_index = 0
        for i in range(1,size,1):

            if result[i] != None:
                has_customer_index = i - 1
                not_none = True
                break
            else:
                have_other_slot_isNull = True

        if have_other_slot_isNull and not_none:
            line_bot_api.reply_message(event.reply_token, TextSendMessage("ÊÇ®ÁöÑÁæéÈ´ÆÈ†ÖÁõÆÈúÄË¶Å "+ service_time +"\n"
                                                        + total_time[has_customer_index][:2]+":"+total_time[has_customer_index][2:] + "Â∑≤ÊúâÂÆ¢‰∫∫ÂõâÔºÅ"
                                                        ,quick_reply=QuickReply(
                                                        items=[
                                                            QuickReplyButton(
                                                                action=PostbackAction(label=business_day[0]
                                                                                    , data=business_day[0])
                                                            ),
                                                            QuickReplyButton(
                                                                action=PostbackAction(label=business_day[1]
                                                                                    , data=business_day[1])
                                                            ),
                                                            QuickReplyButton(
                                                                action=PostbackAction(label=business_day[2]
                                                                                    , data=business_day[2])
                                                            ),
                                                            QuickReplyButton(
                                                                action=PostbackAction(label=business_day[3]
                                                                                    , data=business_day[3])
                                                            ),
                                                            QuickReplyButton(
                                                                action=PostbackAction(label=business_day[4]
                                                                                    , data=business_day[4])
                                                            ),
                                                            QuickReplyButton(
                                                                action=PostbackAction(label=business_day[5]
                                                                                    , data=business_day[5])
                                                            ),
                                                            QuickReplyButton(
                                                                action=PostbackAction(label=business_day[6]
                                                                                    , data=business_day[6])
                                                            )
                                                        ]
                                                )))
            return 0

        if not_none:
            line_bot_api.reply_message(event.reply_token, TextSendMessage("Ê≠§ÊôÇÊÆµÂ∑≤È°çÊªøÔºÅ"))
            return 0
        else:
            tmp = str(event.postback.data).split()
            date_week = tmp[1] + " " + tmp[2]

            check_reser = {
                "type": "bubble",
                "body": {
                    "type": "box",
                    "layout": "vertical",
                    "contents": [
                    {
                        "type": "text",
                        "text": "È†êÁ¥ÑË®äÊÅØ",
                        "weight": "bold",
                        "color": "#1DB446",
                        "size": "xl",
                        "gravity": "center",
                        "align": "center"
                    },
                    {
                        "type": "separator",
                        "margin": "lg"
                    },
                    {
                        "type": "box",
                        "layout": "vertical",
                        "margin": "xxl",
                        "spacing": "sm",
                        "contents": [
                        {
                            "type": "box",
                            "layout": "horizontal",
                            "contents": [
                            {
                                "type": "text",
                                "text": "È†êÁ¥ÑÊó•Êúü",
                                "size": "lg",
                                "color": "#555555",
                                "flex": 0
                            },
                            {
                                "type": "text",
                                "text": date_week,
                                "size": "lg",
                                "color": "#111111",
                                "align": "end"
                            }
                            ]
                        },
                        {
                            "type": "box",
                            "layout": "horizontal",
                            "contents": [
                            {
                                "type": "text",
                                "text": "È†êÁ¥ÑÊôÇÈñì",
                                "size": "lg",
                                "color": "#555555",
                                "flex": 0
                            },
                            {
                                "type": "text",
                                "text": reser_time[0] + "-" +reser_time[1],
                                "size": "lg",
                                "color": "#111111",
                                "align": "end"
                            }
                            ]
                        },
                        {
                            "type": "box",
                            "layout": "horizontal",
                            "contents": [
                            {
                                "type": "text",
                                "text": "ÁæéÈ´ÆÈ†ÖÁõÆ",
                                "size": "lg",
                                "color": "#555555",
                                "flex": 0
                            },
                            {
                                "type": "text",
                                "text": service,
                                "size": "lg",
                                "color": "#111111",
                                "align": "end"
                            }
                            ]
                        }
                        ]
                    }
                    ]
                },
            }
            line_bot_api.reply_message(event.reply_token, FlexSendMessage(
            alt_text = 'È†êÁ¥ÑË®äÊÅØÊ≠£Á¢∫ÂóéÔºü',
            contents = check_reser
            ,quick_reply=QuickReply(
                items=[
                    QuickReplyButton(
                        action=PostbackAction(label="Á¢∫Ë™çÈ†êÁ¥Ñ"
                                            , data="Á¢∫Ë™çÈ†êÁ¥Ñ")
                    ),
                    QuickReplyButton(
                        action=PostbackAction(label = "ÂèñÊ∂àÈ†êÁ¥Ñ"
                                            , data = "ÂèñÊ∂àÈ†êÁ¥Ñ")
                    ),
                    QuickReplyButton(
                        action=PostbackAction(label = "ÈáçÊñ∞È†êÁ¥Ñ"
                                            , data = "ÈáçÊñ∞È†êÁ¥Ñ")
                    )
                ]
            )))

            # write reservatin date into customer
            resdate = date
            for i in range(1,size,1):
                resdate += " " + table_columns.split(',')[i]

            sql = f"""UPDATE customer SET resdate = %s WHERE userid = %s"""
            cursor.execute(sql, (resdate , userID))
            conn.commit()
            # write full reservation data into cusotmer
            full_data = date_week + "#" +  reser_time[0] + "-" +reser_time[1] + "#" + service
            query = "update customer set reser_full_data = '" + full_data + "' where userid = '" + userID +"';"
            cursor.execute(query)
            conn.commit()

        cursor.close()
        conn.close()


        return 0


    if event.postback.data == "Ê¥óÈ´Æ":
        line_bot_api.reply_message(event.reply_token, TextSendMessage("Ë´ãÂïèÊÇ®ÊòØ\"Áü≠È´Æ\"ÈÇÑÊòØ\"Èï∑È´Æ\""
            ,quick_reply=QuickReply(
                items=[
                    QuickReplyButton(
                        action=PostbackAction(label="Áü≠È´Æ"
                                            , data="Ê¥óÈ´Æ(Áü≠È´Æ)")
                    ),
                    QuickReplyButton(
                        action=PostbackAction(label="Èï∑È´Æ"
                                            , data="Ê¥óÈ´Æ(Èï∑È´Æ)")
                    )
                ]
        )))
        return 0

    check_length_string = ["ÁáôÈ´Æ(Â•≥)","ÊüìÈ´Æ","ÊüìÈ´Æ(Ââ™È´Æ)"]
    if event.postback.data in check_length_string:
        tmp = event.postback.data
        if tmp == "ÁáôÈ´Æ(Â•≥)":
            tmp = "ÁáôÈ´Æ"
        line_bot_api.reply_message(event.reply_token, ImageSendMessage(
            original_content_url='https://imgur.com/Bwn0zuL.jpg',
            preview_image_url='https://imgur.com/Bwn0zuL.jpg'
            ,quick_reply=QuickReply(
                items=[
                    QuickReplyButton(
                        action=PostbackAction(label="Áü≠È´Æ"
                                            , data=tmp+"(Áü≠È´Æ)")
                    ),
                    QuickReplyButton(
                        action=PostbackAction(label="‰∏≠Èï∑È´Æ"
                                            , data=tmp+"(‰∏≠Èï∑È´Æ)")
                    ),
                    QuickReplyButton(
                        action=PostbackAction(label="Èï∑È´Æ"
                                            , data=tmp+"(Èï∑È´Æ)")
                    )
                ]
        )))
        return 0

    accept_string = ["Ââ™È´Æ","Ââ™È´Æ(Ê¥óÈ´Æ)","Ë≠∑È´Æ(Ê¥óÈ´Æ)","ÁáôÈ´Æ(Áî∑)","Ê¥óÈ´Æ(Èï∑È´Æ)","Ê¥óÈ´Æ(Áü≠È´Æ)","ÁáôÈ´Æ(Áü≠È´Æ)",
    "ÁáôÈ´Æ(‰∏≠Èï∑È´Æ)","ÁáôÈ´Æ(Èï∑È´Æ)","ÊüìÈ´Æ(Áü≠È´Æ)","ÊüìÈ´Æ(‰∏≠Èï∑È´Æ)","ÊüìÈ´Æ(Èï∑È´Æ)","ÊüìÈ´Æ(Ââ™È´Æ)(Áü≠È´Æ)","ÊüìÈ´Æ(Ââ™È´Æ)(‰∏≠Èï∑È´Æ)","ÊüìÈ´Æ(Ââ™È´Æ)(Èï∑È´Æ)"]
    if(event.postback.data in accept_string):
        line_bot_api.reply_message(event.reply_token, TextSendMessage("Ë´ãÈÅ∏ÊìáÈ†êÁ¥ÑÊó•Êúü"
            ,quick_reply=QuickReply(
                items=[
                    QuickReplyButton(
                        action=PostbackAction(label=business_day[0]
                                            , data=business_day[0])
                    ),
                    QuickReplyButton(
                        action=PostbackAction(label=business_day[1]
                                            , data=business_day[1])
                    ),
                    QuickReplyButton(
                        action=PostbackAction(label=business_day[2]
                                            , data=business_day[2])
                    ),
                    QuickReplyButton(
                        action=PostbackAction(label=business_day[3]
                                            , data=business_day[3])
                    ),
                    QuickReplyButton(
                        action=PostbackAction(label=business_day[4]
                                            , data=business_day[4])
                    ),
                    QuickReplyButton(
                        action=PostbackAction(label=business_day[5]
                                            , data=business_day[5])
                    ),
                    QuickReplyButton(
                        action=PostbackAction(label=business_day[6]
                                            , data=business_day[6])
                    )
                ]
        )))
        #DB setting
        DATABASE_URL = os.environ['DATABASE_URL']
        conn = psycopg2.connect(DATABASE_URL, sslmode='require')
        cursor = conn.cursor()

        #DB update customer service
        service = str(event.postback.data)

        postgres_update_query = f"""UPDATE customer SET service = %s WHERE userid = %s"""
        cursor.execute(postgres_update_query, (service , userID))
        conn.commit()

        cursor.close()
        conn.close()
        return 0



static_tmp_path = os.path.join(os.path.dirname(__file__), 'static','tmp')

@handler.add(MessageEvent, message=(TextMessage,ImageMessage))
def handle_message(event):
    update_bussiness_day()
    userID = event.source.user_id
    userName = line_bot_api.get_profile(event.source.user_id).display_name
    root = ['Ue9484510f6a0ba4d68b30d0c759949c9', 'Ued44f07a33a44078eaf591e8796e3c02']

    if userID not in root:
        if isinstance(event.message, TextMessage):

            command_text = ['ÊúÄÊñ∞Ê∂àÊÅØ','ËÅØÁµ°ÊàëÂÄë','È†êÁ¥ÑÈÅ∏È†Ö','‰ΩúÂìÅÈõÜ','È†êÁ¥ÑÊü•Ë©¢','‰ªäÊó•È†êÁ¥Ñ','Êú¨ÈÄ±È†êÁ¥Ñ','ÊúÄÊñ∞Ê∂àÊÅØÁÆ°ÁêÜ','ÁáüÊ•≠ÊôÇÈñìÁÆ°ÁêÜ']
            if event.message.text not in command_text:
            # ÊèêÈÜíÂÆ¢‰∫∫Ëº∏ÂÖ•ÈùûËß∏ÁôºË®äÊÅØÔºåË¶ÅË∑≥Á™ó
                contact_us_flex = {
                    "type": "bubble",
                    "size": "giga",
                    "body": {
                        "type": "box",
                        "layout": "vertical",
                        "contents": [
                        {
                            "type": "text",
                            "text": "Âú®ÈÄôÈÇäÂÇ≥Ë®äÊÅØÔºåË®≠Ë®àÂ∏´ÁÑ°Ê≥ïÁúãÂà∞„ÄÇ",
                            "align": "center",
                            "offsetTop": "10px"
                        },
                        {
                            "type": "text",
                            "text": "Â¶ÇÊûúÈúÄË¶ÅÂíåË®≠Ë®àÂ∏´Ê∫ùÈÄöÔºåË´ãÈªûÈÅ∏‰ª•‰∏ãÈÅ∏È†ÖÂî∑ÔºÅ",
                            "align": "center",
                            "offsetTop": "10px"
                        },
                        {
                            "type": "box",
                            "layout": "horizontal",
                            "contents": [
                            {
                                "type": "box",
                                "layout": "vertical",
                                "contents": [
                                {
                                    "type": "image",
                                    "url": "https://scdn.line-apps.com/n/channel_devcenter/img/flexsnapshot/clip/clip13.jpg",
                                    "aspectMode": "cover",
                                    "size": "full"
                                }
                                ],
                                "cornerRadius": "100px",
                                "width": "72px",
                                "height": "72px"
                            },
                            {
                                "type": "box",
                                "layout": "vertical",
                                "contents": [
                                {
                                    "type": "text",
                                    "contents": [
                                    {
                                        "type": "span",
                                        "text": "MB È´ÆÂ¶ù",
                                        "weight": "bold",
                                        "color": "#000000",
                                        "size": "lg"
                                    }
                                    ],
                                    "size": "sm"
                                },
                                {
                                    "type": "separator",
                                    "margin": "md"
                                },
                                {
                                    "type": "text",
                                    "contents": [
                                    {
                                        "type": "span",
                                        "text": "Ë®≠Ë®àÂ∏´üíáüèª‚Äç‚ôÄÔ∏è ÊùéË≤û",
                                        "weight": "bold",
                                        "color": "#000000"
                                    }
                                    ],
                                    "size": "sm",
                                    "margin": "md"
                                },
                                {
                                    "type": "separator",
                                    "margin": "md"
                                },
                                {
                                    "type": "text",
                                    "contents": [
                                    {
                                        "type": "span",
                                        "text": "Âú∞ÂùÄüè° Â±èÊù±Â∏Ç‰∏≠ËèØË∑Ø431Ëôü",
                                        "weight": "bold",
                                        "color": "#000000"
                                    }
                                    ],
                                    "size": "sm",
                                    "margin": "md"
                                },
                                {
                                    "type": "separator",
                                    "margin": "md"
                                },
                                {
                                    "type": "text",
                                    "contents": [
                                    {
                                        "type": "span",
                                        "text": "ËÅØÁµ°ÈõªË©± üìû (08)-7366715",
                                        "weight": "bold",
                                        "color": "#000000"
                                    }
                                    ],
                                    "size": "sm",
                                    "margin": "md"
                                }
                                ]
                            }
                            ],
                            "spacing": "xl",
                            "paddingAll": "35px"
                        },
                        {
                            "type": "box",
                            "layout": "horizontal",
                            "contents": [
                            {
                                "type": "button",
                                "action": {
                                "type": "uri",
                                "label": "Êí•ÊâìÈõªË©±",
                                "uri": "tel://087366715"
                                },
                                "height": "sm",
                                "flex": 1,
                                "gravity": "center"
                            },
                            {
                                "type": "button",
                                "action": {
                                "type": "uri",
                                "label": "ËÅØÁµ°Ë®≠Ë®àÂ∏´",
                                "uri": "https://line.me/ti/p/MY9sqcvY6h"
                                },
                                "gravity": "center",
                                "height": "sm",
                                "flex": 1
                            }
                            ],
                            "paddingAll": "20px"
                        },
                        {
                            "type": "spacer"
                        }
                        ],
                        "paddingAll": "10px"
                    }
                    }
                line_bot_api.reply_message(event.reply_token, FlexSendMessage(
                            alt_text = 'ËÅØÁµ°Ë≥áË®ä',
                            contents = contact_us_flex ))

                return 0


    # Á¢∫Ë™çÊòØËÄÅÈóÜÊú¨‰∫∫
    if userID in root :
        #get manager status
        #DB set
        DATABASE_URL = os.environ['DATABASE_URL']
        conn = psycopg2.connect(DATABASE_URL, sslmode='require')
        cursor = conn.cursor()

        sql = "select status from manager where userid = 'Ue9484510f6a0ba4d68b30d0c759949c9'"
        cursor.execute(sql)
        conn.commit()
        manager_status = cursor.fetchone()[0]

        if manager_status == 'Ëº∏ÂÖ•È†êÁ¥Ñ‰∫∫ÂßìÂêç':
            sql = "update manager set add_name = '" + event.message.text + "' where userid = 'Ue9484510f6a0ba4d68b30d0c759949c9'"
            cursor.execute(sql)
            conn.commit()

            add_name = event.message.text

            sql = "select add_service from manager where userid = 'Ue9484510f6a0ba4d68b30d0c759949c9'"
            cursor.execute(sql)
            conn.commit()
            add_service = cursor.fetchone()[0]

            sql = "select add_resdate from manager where userid = 'Ue9484510f6a0ba4d68b30d0c759949c9'"
            cursor.execute(sql)
            conn.commit()
            add_resdate = cursor.fetchone()[0]
            date = add_resdate.split()[0]
            time = add_resdate.split()[1]
            #Ë≥áË®äÊ≠£Á¢∫Âóé Ôºü
            check_reser = {
                "type": "bubble",
                "body": {
                    "type": "box",
                    "layout": "vertical",
                    "contents": [
                    {
                        "type": "text",
                        "text": "È†êÁ¥ÑË®äÊÅØ",
                        "weight": "bold",
                        "color": "#1DB446",
                        "size": "xl",
                        "gravity": "center",
                        "align": "center"
                    },
                    {
                        "type": "separator",
                        "margin": "lg"
                    },
                    {
                        "type": "box",
                        "layout": "vertical",
                        "margin": "xxl",
                        "spacing": "sm",
                        "contents": [
                        {
                            "type": "box",
                            "layout": "horizontal",
                            "contents": [
                            {
                                "type": "text",
                                "text": "È†êÁ¥Ñ‰∫∫",
                                "size": "lg",
                                "color": "#555555",
                                "flex": 0
                            },
                            {
                                "type": "text",
                                "text": add_name,
                                "size": "lg",
                                "color": "#111111",
                                "align": "end"
                            }
                            ]
                        },
                        {
                            "type": "box",
                            "layout": "horizontal",
                            "contents": [
                            {
                                "type": "text",
                                "text": "È†êÁ¥ÑÊó•Êúü",
                                "size": "lg",
                                "color": "#555555",
                                "flex": 0
                            },
                            {
                                "type": "text",
                                "text": business_day[date_list.index(date)],
                                "size": "lg",
                                "color": "#111111",
                                "align": "end"
                            }
                            ]
                        },
                        {
                            "type": "box",
                            "layout": "horizontal",
                            "contents": [
                            {
                                "type": "text",
                                "text": "È†êÁ¥ÑÊôÇÈñì",
                                "size": "lg",
                                "color": "#555555",
                                "flex": 0
                            },
                            {
                                "type": "text",
                                "text": time,
                                "size": "lg",
                                "color": "#111111",
                                "align": "end"
                            }
                            ]
                        },
                        {
                            "type": "box",
                            "layout": "horizontal",
                            "contents": [
                            {
                                "type": "text",
                                "text": "ÁæéÈ´ÆÈ†ÖÁõÆ",
                                "size": "lg",
                                "color": "#555555",
                                "flex": 0
                            },
                            {
                                "type": "text",
                                "text": add_service,
                                "size": "lg",
                                "color": "#111111",
                                "align": "end"
                            }
                            ]
                        }
                        ]
                    }
                    ]
                }
            }
            line_bot_api.reply_message(event.reply_token,FlexSendMessage(alt_text="Á¢∫Ë™çÊñ∞Â¢ûË®äÊÅØ",contents=check_reser
                                    ,quick_reply= QuickReply(
                                        items=[
                                            QuickReplyButton(
                                                action=PostbackAction(label="Á¢∫Ë™çÊñ∞Â¢û"
                                                                    , data="Á¢∫Ë™çÊñ∞Â¢û")
                                            ),
                                            QuickReplyButton(
                                                action=PostbackAction(label="ÂèñÊ∂àÊñ∞Â¢û"
                                                                    , data="ÂèñÊ∂àÊñ∞Â¢û")
                                            )
                                        ]
                                    )))

            #Ê∏ÖÁ©∫manager status
            sql = "update manager set status = '' where userid = 'Ue9484510f6a0ba4d68b30d0c759949c9'"
            cursor.execute(sql)
            conn.commit()

            cursor.close()
            conn.close()

            return 0

        if manager_status == 'Ëº∏ÂÖ•ÊúÄÊñ∞Ê∂àÊÅØ':
            line_bot_api.reply_message(event.reply_token,TextSendMessage("Â∑≤Êñ∞Â¢ûÂÆåÊàêüóí"))

            # get the url list
            sql = "select pic_1,pic_2 from manager where userid = 'Ue9484510f6a0ba4d68b30d0c759949c9'"
            cursor.execute(sql)
            conn.commit()
            img_list = cursor.fetchone()

            # insert into news_table
            # update to the portfolio
            table_columns = '(news,news_p1,news_p2)'
            sql = f"""insert into news_table {table_columns} values (%s,%s,%s)"""
            cursor.execute(sql , (event.message.text,img_list[0],img_list[1]))
            conn.commit()


            #reset pic_num ,reset img_url
            sql = "update manager set news='',status='',pic_num = '0' ,pic_1 = '', pic_2 = '', pic_3 = '' where userid = 'Ue9484510f6a0ba4d68b30d0c759949c9'"
            cursor.execute(sql)
            conn.commit()

            cursor.close()
            conn.close()

            line_bot_api.reply_message(event.reply_token,TextSendMessage("Â∑≤Êñ∞Â¢ûÂÆåÊàêüóí"))
            return 0

        #‰∏äÂÇ≥ÂúñÁâá
        if manager_status == "‰∏äÂÇ≥‰∏ÄÂºµÂúñÁâá":
            need_pic_num = 1
            ext = 'jpg'
            message_content = line_bot_api.get_message_content(event.message.id)

            with tempfile.NamedTemporaryFile(dir=static_tmp_path, prefix=ext + '-', delete=False) as tf:
                for chunk in message_content.iter_content():
                    tf.write(chunk)
                tempfile_path = tf.name

            dist_path = tempfile_path + '.' + ext
            dist_name = os.path.basename(dist_path)
            os.rename(tempfile_path, dist_path)
            try:
                client = ImgurClient(client_id, client_secret, access_token, refresh_token)
                config = {
                    'album': works_album_id,
                    'name': 'Catastrophe!',
                    'title': 'Catastrophe!',
                    'description': 'Cute kitten being cute on '
                }
                path = os.path.join('static', 'tmp', dist_name)
                img_url = client.upload_from_path(path, config=config, anon=False)
                os.remove(path)

                # get pic#
                sql = "select pic_num from manager where userid = 'Ue9484510f6a0ba4d68b30d0c759949c9'"
                cursor.execute(sql)
                conn.commit()
                pic_num = int(cursor.fetchone()[0])
                pic_num += 1


                # update pic# and update the url
                sql = "update manager set pic_num='" + str(pic_num) +"' where userid = 'Ue9484510f6a0ba4d68b30d0c759949c9'"
                cursor.execute(sql)
                conn.commit()

                sql = "update manager set pic_" + str(pic_num) + " ='" + img_url['link'] + "' where userid = 'Ue9484510f6a0ba4d68b30d0c759949c9'"
                cursor.execute(sql)
                conn.commit()

                # if pic# == need_pic_num , then reply
                if pic_num == need_pic_num:
                    # reply text
                    line_bot_api.reply_message(event.reply_token, TextSendMessage("ÂÜç‰æÜËº∏ÂÖ•Ë¶ÅÂëäË®¥ÂÆ¢‰∫∫ÁöÑÊúÄÊñ∞Ê∂àÊÅØüòÑ"))
                    # set manager status
                    #DB setting
                    DATABASE_URL = os.environ['DATABASE_URL']
                    conn = psycopg2.connect(DATABASE_URL, sslmode='require')
                    cursor = conn.cursor()

                    sql = "update manager set status = 'Ëº∏ÂÖ•ÊúÄÊñ∞Ê∂àÊÅØ' where userid = 'Ue9484510f6a0ba4d68b30d0c759949c9'"
                    cursor.execute(sql)
                    conn.commit()

                    cursor.close()
                    conn.close()

                return 0
            except Exception as e:
                print(e)
            return 0

        if manager_status == "‰∏äÂÇ≥ÂÖ©ÂºµÂúñÁâá":
            need_pic_num = 2
            ext = 'jpg'
            message_content = line_bot_api.get_message_content(event.message.id)

            with tempfile.NamedTemporaryFile(dir=static_tmp_path, prefix=ext + '-', delete=False) as tf:
                for chunk in message_content.iter_content():
                    tf.write(chunk)
                tempfile_path = tf.name

            dist_path = tempfile_path + '.' + ext
            dist_name = os.path.basename(dist_path)
            os.rename(tempfile_path, dist_path)
            try:
                client = ImgurClient(client_id, client_secret, access_token, refresh_token)
                config = {
                    'album': works_album_id,
                    'name': 'Catastrophe!',
                    'title': 'Catastrophe!',
                    'description': 'Cute kitten being cute on '
                }
                path = os.path.join('static', 'tmp', dist_name)
                img_url = client.upload_from_path(path, config=config, anon=False)
                os.remove(path)

                # get pic#
                sql = "select pic_num from manager where userid = 'Ue9484510f6a0ba4d68b30d0c759949c9'"
                cursor.execute(sql)
                conn.commit()
                pic_num = int(cursor.fetchone()[0])
                pic_num += 1


                # update pic# and update the url
                sql = "update manager set pic_num='" + str(pic_num) +"' where userid = 'Ue9484510f6a0ba4d68b30d0c759949c9'"
                cursor.execute(sql)
                conn.commit()

                sql = "update manager set pic_" + str(pic_num) + " ='" + img_url['link'] + "' where userid = 'Ue9484510f6a0ba4d68b30d0c759949c9'"
                cursor.execute(sql)
                conn.commit()

                # if pic# == need_pic_num , then reply
                if pic_num == need_pic_num:
                    # reply text
                    line_bot_api.reply_message(event.reply_token, TextSendMessage("ÂÜç‰æÜËº∏ÂÖ•Ë¶ÅÂëäË®¥ÂÆ¢‰∫∫ÁöÑÊúÄÊñ∞Ê∂àÊÅØüòÑ"))
                    # set manager status
                    #DB setting
                    DATABASE_URL = os.environ['DATABASE_URL']
                    conn = psycopg2.connect(DATABASE_URL, sslmode='require')
                    cursor = conn.cursor()

                    sql = "update manager set status = 'Ëº∏ÂÖ•ÊúÄÊñ∞Ê∂àÊÅØ' where userid = 'Ue9484510f6a0ba4d68b30d0c759949c9'"
                    cursor.execute(sql)
                    conn.commit()

                    cursor.close()
                    conn.close()

                    return 0
            except Exception as e:
                print(e)
            return 0

        if '‰∏äÂÇ≥ÂúñÁâá' in manager_status :
            style = manager_status.split('#')[1]
            need_pic_num = 0
            if style == "Ê®£Âºè‰∏Ä":
                need_pic_num = 1
            if style == "Ê®£Âºè‰∫å":
                need_pic_num = 2
            if style == "Ê®£Âºè‰∏â":
                need_pic_num = 3


            ext = 'jpg'
            message_content = line_bot_api.get_message_content(event.message.id)

            with tempfile.NamedTemporaryFile(dir=static_tmp_path, prefix=ext + '-', delete=False) as tf:
                for chunk in message_content.iter_content():
                    tf.write(chunk)
                tempfile_path = tf.name

            dist_path = tempfile_path + '.' + ext
            dist_name = os.path.basename(dist_path)
            os.rename(tempfile_path, dist_path)
            try:
                client = ImgurClient(client_id, client_secret, access_token, refresh_token)
                config = {
                    'album': works_album_id,
                    'name': 'Catastrophe!',
                    'title': 'Catastrophe!',
                    'description': 'Cute kitten being cute on '
                }
                path = os.path.join('static', 'tmp', dist_name)
                img_url = client.upload_from_path(path, config=config, anon=False)
                os.remove(path)

                # get pic#
                sql = "select pic_num from manager where userid = 'Ue9484510f6a0ba4d68b30d0c759949c9'"
                cursor.execute(sql)
                conn.commit()
                pic_num = int(cursor.fetchone()[0])
                pic_num += 1


                # update pic# and update the url
                sql = "update manager set pic_num='" + str(pic_num) +"' where userid = 'Ue9484510f6a0ba4d68b30d0c759949c9'"
                cursor.execute(sql)
                conn.commit()

                sql = "update manager set pic_" + str(pic_num) + " ='" + img_url['link'] + "' where userid = 'Ue9484510f6a0ba4d68b30d0c759949c9'"
                cursor.execute(sql)
                conn.commit()

                # if pic# == need_pic_num , then reply
                if pic_num == need_pic_num:
                    # preview the result and ask yes or no
                    # get the pic_url
                    # get the theme
                    if 'Ê®£Âºè‰∏Ä' in manager_status:
                        sql = "select pic_1 from manager where userid = 'Ue9484510f6a0ba4d68b30d0c759949c9'"
                        cursor.execute(sql)
                        conn.commit()
                        img_list = cursor.fetchone()

                        theme1 = {
                            "type": "bubble",
                            "size": "giga",
                            "body": {
                                "type": "box",
                                "layout": "vertical",
                                "contents": [
                                {
                                    "type": "box",
                                    "layout": "vertical",
                                    "contents": [
                                    {
                                        "type": "image",
                                        "url": img_list[0],
                                        "aspectMode": "cover",
                                        "size": "full",
                                        "aspectRatio": "50:100"
                                    }
                                    ]
                                }
                                ],
                                "paddingAll": "10px"
                            }
                        }

                        line_bot_api.reply_message(event.reply_token, FlexSendMessage('È†êË¶ΩÊ®£Âºè‰∏Ä',theme1,quick_reply=QuickReply(
                                items=[
                                    QuickReplyButton(
                                        action=PostbackAction(label="‰∏äÂÇ≥Ëá≥„ÄéÂâ™È´ÆÁõ∏Á∞ø„Äè"
                                                            , data="‰∏äÂÇ≥Ââ™È´ÆÁõ∏Á∞ø")
                                    ),
                                    QuickReplyButton(
                                        action=PostbackAction(label="‰∏äÂÇ≥Ëá≥„ÄéÁáôÈ´ÆÁõ∏Á∞ø„Äè"
                                                            , data="‰∏äÂÇ≥ÁáôÈ´ÆÁõ∏Á∞ø")
                                    ),
                                    QuickReplyButton(
                                        action=PostbackAction(label="‰∏äÂÇ≥Ëá≥„ÄéÊüìÈ´ÆÁõ∏Á∞ø„Äè"
                                                            , data="‰∏äÂÇ≥ÊüìÈ´ÆÁõ∏Á∞ø")
                                    ),
                                    QuickReplyButton(
                                        action=PostbackAction(label="ÈáçÊñ∞‰∏äÂÇ≥"
                                                            , data="Êñ∞Â¢û‰ΩúÂìÅ")
                                    )
                                ]
                                )
                        ))

                    if 'Ê®£Âºè‰∫å' in manager_status:
                        sql = "select pic_1,pic_2 from manager where userid = 'Ue9484510f6a0ba4d68b30d0c759949c9'"
                        cursor.execute(sql)
                        conn.commit()
                        img_list = cursor.fetchone()

                        theme2 = {
                            "type": "bubble",
                            "size": "giga",
                            "body": {
                                "type": "box",
                                "layout": "vertical",
                                "contents": [
                                {
                                    "type": "box",
                                    "layout": "vertical",
                                    "contents": [
                                    {
                                        "type": "image",
                                        "url": img_list[0],
                                        "aspectMode": "cover",
                                        "size": "full",
                                        "aspectRatio": "100:100"
                                    },
                                    {
                                        "type": "image",
                                        "url": img_list[1],
                                        "aspectMode": "cover",
                                        "size": "full",
                                        "aspectRatio": "100:100"
                                    }
                                    ]
                                }
                                ],
                                "paddingAll": "10px"
                            }
                        }

                        line_bot_api.reply_message(event.reply_token, FlexSendMessage('È†êË¶ΩÊ®£Âºè‰∫å',theme2,quick_reply=QuickReply(
                                items=[
                                    QuickReplyButton(
                                        action=PostbackAction(label="‰∏äÂÇ≥Ëá≥„ÄéÂâ™È´ÆÁõ∏Á∞ø„Äè"
                                                            , data="‰∏äÂÇ≥Ââ™È´ÆÁõ∏Á∞ø")
                                    ),
                                    QuickReplyButton(
                                        action=PostbackAction(label="‰∏äÂÇ≥Ëá≥„ÄéÁáôÈ´ÆÁõ∏Á∞ø„Äè"
                                                            , data="‰∏äÂÇ≥ÁáôÈ´ÆÁõ∏Á∞ø")
                                    ),
                                    QuickReplyButton(
                                        action=PostbackAction(label="‰∏äÂÇ≥Ëá≥„ÄéÊüìÈ´ÆÁõ∏Á∞ø„Äè"
                                                            , data="‰∏äÂÇ≥ÊüìÈ´ÆÁõ∏Á∞ø")
                                    ),
                                    QuickReplyButton(
                                        action=PostbackAction(label="ÈáçÊñ∞‰∏äÂÇ≥"
                                                            , data="Êñ∞Â¢û‰ΩúÂìÅ")
                                    )
                                ]
                                )
                        ))

                    if 'Ê®£Âºè‰∏â' in manager_status:
                        sql = "select pic_1,pic_2,pic_3 from manager where userid = 'Ue9484510f6a0ba4d68b30d0c759949c9'"
                        cursor.execute(sql)
                        conn.commit()
                        img_list = cursor.fetchone()

                        theme3 = {
                            "type": "bubble",
                            "size": "giga",
                            "body": {
                                "type": "box",
                                "layout": "vertical",
                                "contents": [
                                {
                                    "type": "box",
                                    "layout": "vertical",
                                    "contents": [
                                    {
                                        "type": "image",
                                        "url": img_list[0],
                                        "aspectMode": "cover",
                                        "size": "full"
                                    }
                                    ],
                                    "cornerRadius": "200px"
                                },
                                {
                                    "type": "box",
                                    "layout": "horizontal",
                                    "contents": [
                                    {
                                        "type": "image",
                                        "url": img_list[1],
                                        "aspectMode": "cover",
                                        "size": "5xl",
                                        "aspectRatio": "150:300"
                                    },
                                    {
                                        "type": "image",
                                        "url": img_list[2],
                                        "aspectMode": "cover",
                                        "size": "5xl",
                                        "aspectRatio": "150:300"
                                    }
                                    ]
                                }
                                ],
                                "paddingAll": "10px"
                            }
                        }

                        line_bot_api.reply_message(event.reply_token, FlexSendMessage('È†êË¶ΩÊ®£Âºè‰∏â',theme3,quick_reply=QuickReply(
                                items=[
                                    QuickReplyButton(
                                        action=PostbackAction(label="‰∏äÂÇ≥Ëá≥„ÄéÂâ™È´ÆÁõ∏Á∞ø„Äè"
                                                            , data="‰∏äÂÇ≥Ââ™È´ÆÁõ∏Á∞ø")
                                    ),
                                    QuickReplyButton(
                                        action=PostbackAction(label="‰∏äÂÇ≥Ëá≥„ÄéÁáôÈ´ÆÁõ∏Á∞ø„Äè"
                                                            , data="‰∏äÂÇ≥ÁáôÈ´ÆÁõ∏Á∞ø")
                                    ),
                                    QuickReplyButton(
                                        action=PostbackAction(label="‰∏äÂÇ≥Ëá≥„ÄéÊüìÈ´ÆÁõ∏Á∞ø„Äè"
                                                            , data="‰∏äÂÇ≥ÊüìÈ´ÆÁõ∏Á∞ø")
                                    ),
                                    QuickReplyButton(
                                        action=PostbackAction(label="ÈáçÊñ∞‰∏äÂÇ≥"
                                                            , data="Êñ∞Â¢û‰ΩúÂìÅ")
                                    )
                                ]
                                )
                        ))

                    return 0



                # line_bot_api.reply_message(
                #     event.reply_token,
                #     TextSendMessage(text='‰∏äÂÇ≥ÊàêÂäü'))
            except Exception as e:
                print(e)
            return 0

if __name__ == "__main__":
    app.run()
